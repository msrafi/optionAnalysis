{"version":3,"file":"index-7fe61f84-1760992276599.js","sources":["../../node_modules/react/cjs/react-jsx-runtime.production.min.js","../../node_modules/react/jsx-runtime.js","../../node_modules/react-dom/client.js","../../src/utils/dataParser.ts","../../src/components/TickerList.tsx","../../src/components/VolumeProfileChart.tsx","../../src/components/TradeList.tsx","../../src/components/StrikeExpiryHeatmap.tsx","../../src/utils/fileLoader.ts","../../src/utils/stockPrice.ts","../../src/components/OptionsDashboard.tsx","../../src/components/DarkPoolList.tsx","../../src/components/DarkPoolTickerList.tsx","../../src/components/DarkPoolTradeChart.tsx","../../src/components/DarkPoolTimeChart.tsx","../../src/components/DarkPoolDashboard.tsx","../../src/components/ErrorBoundary.tsx","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","export interface OptionData {\n  ticker: string;\n  strike: number;\n  expiry: string;\n  optionType: 'Call' | 'Put';\n  volume: number;\n  premium: string;\n  openInterest: number;\n  bidAskSpread: number;\n  timestamp: string;\n  sweepType: string;\n  sourceFile?: string; // Track which file this data came from\n}\n\nexport interface DarkPoolData {\n  ticker: string;\n  quantity: number;\n  price: number;\n  totalValue: string;\n  timestamp: string;\n  sourceFile?: string; // Track which file this data came from\n}\n\nexport interface MergedDataInfo {\n  totalFiles: number;\n  totalRecords: number;\n  dateRange: {\n    earliest: Date | null;\n    latest: Date | null;\n  };\n  files: {\n    filename: string;\n    recordCount: number;\n    timestamp: Date;\n  }[];\n}\n\nexport interface TickerSummary {\n  ticker: string;\n  totalVolume: number;\n  callVolume: number;\n  putVolume: number;\n  totalPremium: number;\n  uniqueExpiries: string[];\n  lastActivity: string;\n  lastActivityDate: Date | null;\n  lastTrade: {\n    strike: number;\n    optionType: 'Call' | 'Put';\n    volume: number;\n    premium: string;\n    sweepType: string;\n    timestamp: string;\n  } | null;\n}\n\nexport interface VolumeProfileData {\n  strike: number;\n  callVolume: number;\n  putVolume: number;\n  openInterest: number;\n  totalVolume: number;\n}\n\nexport interface HighestVolumeData {\n  strike: number;\n  totalVolume: number;\n  callVolume: number;\n  putVolume: number;\n  openInterest: number;\n}\n\n// Cache for parsed data to avoid re-parsing\nconst parseCache = new Map<string, OptionData[]>();\nconst darkPoolParseCache = new Map<string, DarkPoolData[]>();\n\n// Clear cache function for development\nexport function clearDataCache() {\n  parseCache.clear();\n  tickerSummaryCache.clear();\n  if (import.meta.env.DEV) {\n    console.log('Options data cache cleared - all caches reset');\n  }\n}\n\n// Clear dark pool cache function\nexport function clearDarkPoolDataCache() {\n  darkPoolParseCache.clear();\n  darkPoolTickerSummaryCache.clear();\n  if (import.meta.env.DEV) {\n    console.log('Dark pool data cache cleared');\n  }\n}\n\n/**\n * Parse timestamp from CSV data\n * Expected format: \"Wednesday, October 8, 2025 at 3:02 PM\"\n */\nexport function parseTimestampFromData(timestampStr: string): Date | null {\n  try {\n    if (!timestampStr) return null;\n    \n    // Handle format: \"Wednesday, October 8, 2025 at 3:02 PM\"\n    const match = timestampStr.match(/(\\w+),\\s+(\\w+)\\s+(\\d+),\\s+(\\d+)\\s+at\\s+(\\d+):(\\d+)\\s+(AM|PM)/i);\n    if (!match) {\n      if (import.meta.env.DEV) {\n        console.warn(`Timestamp format not recognized: ${timestampStr}`);\n      }\n      return null;\n    }\n    \n    const [, , monthName, day, year, hour, minute, ampm] = match;\n    \n    // Convert month name to number\n    const monthMap: { [key: string]: number } = {\n      'january': 0, 'february': 1, 'march': 2, 'april': 3,\n      'may': 4, 'june': 5, 'july': 6, 'august': 7,\n      'september': 8, 'october': 9, 'november': 10, 'december': 11\n    };\n    \n    const month = monthMap[monthName.toLowerCase()];\n    if (month === undefined) {\n      if (import.meta.env.DEV) {\n        console.warn(`Unknown month: ${monthName}`);\n      }\n      return null;\n    }\n    \n    // Convert 12-hour to 24-hour format\n    let hour24 = parseInt(hour);\n    if (ampm.toUpperCase() === 'PM' && hour24 !== 12) {\n      hour24 += 12;\n    } else if (ampm.toUpperCase() === 'AM' && hour24 === 12) {\n      hour24 = 0;\n    }\n    \n    const parsedDate = new Date(parseInt(year), month, parseInt(day), hour24, parseInt(minute));\n    return parsedDate;\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.warn(`Failed to parse timestamp: ${timestampStr}`, error);\n    }\n    return null;\n  }\n}\n\n/**\n * Check if an option has expired based on its expiry date\n * Expected format: \"MM/DD/YYYY\" (e.g., \"10/10/2025\")\n */\nfunction isOptionExpired(expiryStr: string): boolean {\n  try {\n    if (!expiryStr) return false;\n    \n    // Parse expiry date from MM/DD/YYYY format\n    const parts = expiryStr.split('/');\n    if (parts.length !== 3) return false;\n    \n    const month = parseInt(parts[0]) - 1; // JavaScript months are 0-indexed\n    const day = parseInt(parts[1]);\n    const year = parseInt(parts[2]);\n    \n    // Create expiry date at end of day (23:59:59) to ensure options expire after market close\n    const expiryDate = new Date(year, month, day, 23, 59, 59);\n    const today = new Date();\n    \n    // Option is expired if expiry date is before today\n    return expiryDate < today;\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.warn(`Failed to parse expiry date: ${expiryStr}`, error);\n    }\n    return false; // If we can't parse it, don't filter it out\n  }\n}\n\nexport function parseCSVData(csvText: string, sourceFile?: string): OptionData[] {\n  // Check cache first\n  const cacheKey = `${sourceFile || 'unknown'}_${csvText.length}_${csvText.slice(0, 100)}`;\n  const cached = parseCache.get(cacheKey);\n  if (cached) {\n    return cached;\n  }\n\n  const lines = csvText.split('\\n');\n  const data: OptionData[] = [];\n  \n  // Pre-allocate array with estimated size for better performance\n  const estimatedSize = Math.max(1000, lines.length * 0.8);\n  data.length = estimatedSize;\n  let dataIndex = 0;\n  \n  // Skip header row\n  for (let i = 1; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (!line) continue;\n    \n    // Parse CSV line (handle quoted fields)\n    const fields = parseCSVLine(line);\n    \n    if (fields.length < 19) continue;\n    \n    try {\n      // Extract relevant fields based on the CSV structure\n      // Col 1: Avatar URL, Col 2: Username, Col 3: APP, Col 4: Short time, Col 5: Separator\n      const timestamp = fields[5] || ''; // Column 6 (index 5) - Full Timestamp\n      const sweepType = fields[6] || ''; // Column 7 (index 6) - Sweep Type (e.g., \"Call Sweep\")\n      const ticker = fields[7] || '';     // Column 8 (index 7) - Ticker\n      const strike = parseFloat(fields[8]) || 0;  // Column 9 (index 8) - Strike\n      const expiry = fields[9] || '';     // Column 10 (index 9) - Expiry\n      const optionType = fields[10] as 'Call' | 'Put'; // Column 11 (index 10) - Option Type\n      const volume = parseInt(fields[12]?.replace(/,/g, '') || '0'); // Column 13 (index 12) - Volume\n      const premium = fields[13] || '$0';  // Column 14 (index 13) - Premium\n      const openInterest = parseInt(fields[14]?.replace(/,/g, '') || '0'); // Column 15 (index 14) - OI\n      const bidAskSpread = 0; // Not available in current format\n      \n      // Filter out non-ticker entries (trade types, sweep types, etc.)\n      const invalidTickers = ['Ask', 'Above', 'Bid', 'Below', 'Sweep', 'Block', 'Trade', 'Volume', 'Premium'];\n      const isValidTicker = ticker && \n        ticker.length >= 1 && \n        ticker.length <= 10 && \n        !invalidTickers.includes(ticker) &&\n        !ticker.match(/^\\d+$/) && // Not just numbers\n        !ticker.includes(' ') && // No spaces\n        /^[A-Z0-9]+$/.test(ticker); // Only uppercase letters and numbers\n      \n      // Check if the option has expired\n      const isExpired = isOptionExpired(expiry);\n      \n      // Only process valid option data with valid tickers and non-expired options\n      if (isValidTicker && strike > 0 && expiry && optionType && volume > 0 && !isExpired) {\n        data[dataIndex++] = {\n          ticker,\n          strike,\n          expiry,\n          optionType,\n          volume,\n          premium,\n          openInterest,\n          bidAskSpread,\n          timestamp,\n          sweepType,\n          sourceFile\n        };\n      }\n    } catch (error) {\n      if (import.meta.env.DEV) {\n        console.warn('Error parsing line:', line, error);\n      }\n    }\n  }\n  \n  // Trim array to actual size\n  data.length = dataIndex;\n  \n  // Cache the result\n  parseCache.set(cacheKey, data);\n  \n  return data;\n}\n\n\n// Cache for ticker summaries\nconst tickerSummaryCache = new Map<string, TickerSummary[]>();\nconst darkPoolTickerSummaryCache = new Map<string, any[]>();\n\nexport function getTickerSummaries(data: OptionData[]): TickerSummary[] {\n  // Create cache key based on data length and first few items\n  const cacheKey = `${data.length}_${data.slice(0, 3).map(d => `${d.ticker}_${d.timestamp}`).join('_')}`;\n  const cached = tickerSummaryCache.get(cacheKey);\n  if (cached) {\n    return cached;\n  }\n\n  const tickerMap = new Map<string, TickerSummary & { expirySet: Set<string> }>();\n  \n  // Use for loop for better performance than forEach\n  for (let i = 0; i < data.length; i++) {\n    const option = data[i];\n    \n    if (!tickerMap.has(option.ticker)) {\n      const parsedTimestamp = parseTimestampFromData(option.timestamp);\n      tickerMap.set(option.ticker, {\n        ticker: option.ticker,\n        totalVolume: 0,\n        callVolume: 0,\n        putVolume: 0,\n        totalPremium: 0,\n        uniqueExpiries: [],\n        expirySet: new Set<string>(),\n        lastActivity: option.timestamp,\n        lastActivityDate: parsedTimestamp,\n        lastTrade: {\n          strike: option.strike,\n          optionType: option.optionType,\n          volume: option.volume,\n          premium: option.premium,\n          sweepType: option.sweepType,\n          timestamp: option.timestamp\n        }\n      });\n    }\n    \n    const summary = tickerMap.get(option.ticker)!;\n    summary.totalVolume += option.volume;\n    summary.totalPremium += parsePremium(option.premium);\n    \n    if (option.optionType === 'Call') {\n      summary.callVolume += option.volume;\n    } else {\n      summary.putVolume += option.volume;\n    }\n    \n    // Use Set for O(1) expiry checking instead of O(n) array.includes()\n    if (!summary.expirySet.has(option.expiry)) {\n      summary.expirySet.add(option.expiry);\n      summary.uniqueExpiries.push(option.expiry);\n    }\n    \n    // Update last activity if this is more recent\n    const currentTimestamp = parseTimestampFromData(option.timestamp);\n    if (currentTimestamp && summary.lastActivityDate && currentTimestamp > summary.lastActivityDate) {\n      summary.lastActivity = option.timestamp;\n      summary.lastActivityDate = currentTimestamp;\n      // Update last trade with most recent trade\n      summary.lastTrade = {\n        strike: option.strike,\n        optionType: option.optionType,\n        volume: option.volume,\n        premium: option.premium,\n        sweepType: option.sweepType,\n        timestamp: option.timestamp\n      };\n    } else if (currentTimestamp && !summary.lastActivityDate) {\n      summary.lastActivity = option.timestamp;\n      summary.lastActivityDate = currentTimestamp;\n      // Set last trade if none exists\n      if (!summary.lastTrade) {\n        summary.lastTrade = {\n          strike: option.strike,\n          optionType: option.optionType,\n          volume: option.volume,\n          premium: option.premium,\n          sweepType: option.sweepType,\n          timestamp: option.timestamp\n        };\n      }\n    }\n  }\n  \n  // Sort by most recent activity first, then by total volume\n  // Remove the expirySet before returning (it was just for performance)\n  const result = Array.from(tickerMap.values()).map(({ expirySet, ...summary }) => summary).sort((a, b) => {\n    // Use parsed dates for more accurate sorting\n    const dateA = a.lastActivityDate;\n    const dateB = b.lastActivityDate;\n    \n    // First sort by most recent activity\n    if (dateA && dateB && dateA.getTime() !== dateB.getTime()) {\n      return dateB.getTime() - dateA.getTime();\n    }\n    \n    // If same activity time or no dates, sort by total volume\n    return b.totalVolume - a.totalVolume;\n  });\n  \n  // Cache the result\n  tickerSummaryCache.set(cacheKey, result);\n  \n  return result;\n}\n\nexport function getVolumeProfileForTicker(\n  data: OptionData[], \n  ticker: string, \n  expiry?: string\n): VolumeProfileData[] {\n  const filteredData = data.filter(option => \n    option.ticker === ticker && \n    (!expiry || option.expiry === expiry)\n  );\n  \n  const strikeMap = new Map<number, VolumeProfileData>();\n  \n  filteredData.forEach(option => {\n    if (!strikeMap.has(option.strike)) {\n      strikeMap.set(option.strike, {\n        strike: option.strike,\n        callVolume: 0,\n        putVolume: 0,\n        openInterest: 0,\n        totalVolume: 0\n      });\n    }\n    \n    const profile = strikeMap.get(option.strike)!;\n    profile.totalVolume += option.volume;\n    profile.openInterest += option.openInterest;\n    \n    if (option.optionType === 'Call') {\n      profile.callVolume += option.volume;\n    } else {\n      profile.putVolume += option.volume;\n    }\n  });\n  \n  return Array.from(strikeMap.values())\n    .sort((a, b) => a.strike - b.strike);\n}\n\nexport function getExpiryDatesForTicker(data: OptionData[], ticker: string): string[] {\n  const expiries = new Set<string>();\n  \n  data.forEach(option => {\n    if (option.ticker === ticker) {\n      expiries.add(option.expiry);\n    }\n  });\n  \n  return Array.from(expiries).sort((a, b) => new Date(a).getTime() - new Date(b).getTime());\n}\n\nexport function getHighestVolumeData(\n  data: OptionData[], \n  ticker: string, \n  expiry?: string\n): HighestVolumeData | null {\n  const filteredData = data.filter(option => \n    option.ticker === ticker && \n    (!expiry || option.expiry === expiry)\n  );\n  \n  if (!filteredData.length) return null;\n  \n  const strikeMap = new Map<number, VolumeProfileData>();\n  \n  filteredData.forEach(option => {\n    if (!strikeMap.has(option.strike)) {\n      strikeMap.set(option.strike, {\n        strike: option.strike,\n        callVolume: 0,\n        putVolume: 0,\n        openInterest: 0,\n        totalVolume: 0\n      });\n    }\n    \n    const profile = strikeMap.get(option.strike)!;\n    profile.totalVolume += option.volume;\n    profile.openInterest += option.openInterest;\n    \n    if (option.optionType === 'Call') {\n      profile.callVolume += option.volume;\n    } else {\n      profile.putVolume += option.volume;\n    }\n  });\n  \n  const profiles = Array.from(strikeMap.values());\n  const highestVolume = profiles.reduce((max, current) => \n    current.totalVolume > max.totalVolume ? current : max\n  );\n  \n  return {\n    strike: highestVolume.strike,\n    totalVolume: highestVolume.totalVolume,\n    callVolume: highestVolume.callVolume,\n    putVolume: highestVolume.putVolume,\n    openInterest: highestVolume.openInterest\n  };\n}\n\nfunction parsePremium(premium: string): number {\n  const cleanPremium = premium.replace(/[$,K]/g, '');\n  const num = parseFloat(cleanPremium);\n  \n  if (premium.includes('K')) {\n    return num * 1000;\n  } else if (premium.includes('M')) {\n    return num * 1000000;\n  }\n  \n  return num;\n}\n\nexport function formatVolume(volume: number): string {\n  if (volume >= 1000000) {\n    return `${(volume / 1000000).toFixed(1)}M`;\n  } else if (volume >= 1000) {\n    return `${(volume / 1000).toFixed(1)}K`;\n  }\n  return volume.toString();\n}\n\nexport function formatPremium(premium: number): string {\n  if (premium >= 1000000) {\n    return `$${(premium / 1000000).toFixed(1)}M`;\n  } else if (premium >= 1000) {\n    return `$${(premium / 1000).toFixed(1)}K`;\n  }\n  return `$${premium.toFixed(0)}`;\n}\n\n/**\n * Merge data from multiple CSV files\n */\nexport function mergeDataFromFiles(fileData: Array<{filename: string, data: string, timestamp: Date}>): {\n  mergedData: OptionData[];\n  info: MergedDataInfo;\n} {\n  const mergedData: OptionData[] = [];\n  const fileInfo: MergedDataInfo['files'] = [];\n  let earliestDate: Date | null = null;\n  let latestDate: Date | null = null;\n  \n  // Track unique trades to avoid duplicates\n  const uniqueTrades = new Map<string, OptionData>();\n  \n  // Sort files by timestamp (most recent first)\n  const sortedFiles = fileData.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n  \n  sortedFiles.forEach(file => {\n    const parsedData = parseCSVData(file.data, file.filename);\n    \n    // Deduplicate trades based on key fields\n    parsedData.forEach(trade => {\n      // Create unique key from trade characteristics\n      const key = `${trade.ticker}_${trade.strike}_${trade.expiry}_${trade.optionType}_${trade.volume}_${trade.premium}_${trade.timestamp}`;\n      \n      // Only add if we haven't seen this exact trade before\n      if (!uniqueTrades.has(key)) {\n        uniqueTrades.set(key, trade);\n      }\n    });\n    \n    fileInfo.push({\n      filename: file.filename,\n      recordCount: parsedData.length,\n      timestamp: file.timestamp\n    });\n    \n    // Update date range\n    if (!earliestDate || file.timestamp < earliestDate) {\n      earliestDate = file.timestamp;\n    }\n    if (!latestDate || file.timestamp > latestDate) {\n      latestDate = file.timestamp;\n    }\n  });\n  \n  // Convert Map values to array\n  mergedData.push(...uniqueTrades.values());\n  \n  const info: MergedDataInfo = {\n    totalFiles: fileData.length,\n    totalRecords: mergedData.length,\n    dateRange: {\n      earliest: earliestDate,\n      latest: latestDate\n    },\n    files: fileInfo\n  };\n  \n  return { mergedData, info };\n}\n\n/**\n * Get data summary for the merged dataset\n */\nexport function getDataSummary(data: OptionData[]): {\n  totalTickers: number;\n  totalVolume: number;\n  totalCalls: number;\n  totalPuts: number;\n  uniqueExpiries: number;\n  dateRange: {\n    earliest: Date | null;\n    latest: Date | null;\n  };\n  sourceFiles: string[];\n} {\n  const tickers = new Set<string>();\n  const expiries = new Set<string>();\n  const sourceFiles = new Set<string>();\n  let totalVolume = 0;\n  let totalCalls = 0;\n  let totalPuts = 0;\n  let earliestDate: Date | null = null;\n  let latestDate: Date | null = null;\n  \n  data.forEach(option => {\n    tickers.add(option.ticker);\n    expiries.add(option.expiry);\n    if (option.sourceFile) sourceFiles.add(option.sourceFile);\n    \n    totalVolume += option.volume;\n    if (option.optionType === 'Call') {\n      totalCalls += option.volume;\n    } else {\n      totalPuts += option.volume;\n    }\n    \n    // Use parsed timestamp for more accurate date range\n    const parsedTimestamp = parseTimestampFromData(option.timestamp);\n    if (parsedTimestamp) {\n      if (!earliestDate || parsedTimestamp < earliestDate) {\n        earliestDate = parsedTimestamp;\n      }\n      if (!latestDate || parsedTimestamp > latestDate) {\n        latestDate = parsedTimestamp;\n      }\n    }\n  });\n  \n  return {\n    totalTickers: tickers.size,\n    totalVolume,\n    totalCalls,\n    totalPuts,\n    uniqueExpiries: expiries.size,\n    dateRange: {\n      earliest: earliestDate,\n      latest: latestDate\n    },\n    sourceFiles: Array.from(sourceFiles)\n  };\n}\n\n/**\n * Filter data by time range\n */\nexport function filterDataByTimeRange(\n  data: OptionData[], \n  startDate: Date, \n  endDate: Date\n): OptionData[] {\n  return data.filter(option => {\n    const timestamp = new Date(option.timestamp);\n    return timestamp >= startDate && timestamp <= endDate;\n  });\n}\n\n/**\n * Get data from the last N hours\n */\nexport function getRecentData(data: OptionData[], hours: number = 24): OptionData[] {\n  const cutoff = new Date(Date.now() - hours * 60 * 60 * 1000);\n  return filterDataByTimeRange(data, cutoff, new Date());\n}\n\n// ============================================================================\n// ANALYTICAL FEATURES\n// ============================================================================\n\nexport interface UnusualActivityAlert {\n  ticker: string;\n  alertType: 'volume' | 'premium' | 'sweep' | 'multiple';\n  severity: 'low' | 'medium' | 'high';\n  reason: string;\n  metrics: {\n    totalVolume: number;\n    totalPremium: number;\n    callPutRatio: number;\n    sweepCount: number;\n    avgTradeSize: number;\n  };\n}\n\nexport interface KeyPriceLevel {\n  strike: number;\n  volume: number;\n  openInterest: number;\n  premium: number;\n  significance: 'high' | 'medium' | 'low';\n  type: 'call' | 'put' | 'both';\n}\n\nexport interface GammaExposure {\n  strike: number;\n  netGammaExposure: number; // Positive = dealers long gamma, Negative = dealers short gamma\n  callVolume: number;\n  putVolume: number;\n  callOI: number;\n  putOI: number;\n  level: 'extreme' | 'high' | 'moderate' | 'low';\n}\n\nexport interface TickerAnalytics {\n  ticker: string;\n  unusualActivity?: UnusualActivityAlert | null;\n  keyPriceLevels: KeyPriceLevel[];\n  gammaExposure: GammaExposure[];\n  maxPainStrike: number | null;\n  currentPrice?: number;\n}\n\n/**\n * Detect unusual activity for a ticker\n */\nexport function detectUnusualActivity(\n  tickerData: OptionData[],\n  ticker: string,\n  allData: OptionData[]\n): UnusualActivityAlert | null {\n  if (tickerData.length === 0) return null;\n\n  // Calculate metrics for this ticker\n  const totalVolume = tickerData.reduce((sum, t) => sum + t.volume, 0);\n  const totalPremium = tickerData.reduce((sum, t) => {\n    const premium = parseFloat(t.premium.replace(/[$,]/g, '')) || 0;\n    return sum + premium;\n  }, 0);\n  \n  const callVolume = tickerData.filter(t => t.optionType === 'Call').reduce((sum, t) => sum + t.volume, 0);\n  const putVolume = tickerData.filter(t => t.optionType === 'Put').reduce((sum, t) => sum + t.volume, 0);\n  const callPutRatio = putVolume > 0 ? callVolume / putVolume : callVolume;\n  \n  const sweepCount = tickerData.filter(t => t.sweepType && t.sweepType.toLowerCase().includes('sweep')).length;\n  const avgTradeSize = totalVolume / tickerData.length;\n\n  // Calculate baseline (average across all tickers for comparison)\n  const allTickers = [...new Set(allData.map(t => t.ticker))];\n  const avgVolumePerTicker = allData.reduce((sum, t) => sum + t.volume, 0) / allTickers.length;\n  const avgPremiumPerTicker = allData.reduce((sum, t) => {\n    const premium = parseFloat(t.premium.replace(/[$,]/g, '')) || 0;\n    return sum + premium;\n  }, 0) / allTickers.length;\n\n  // Detection criteria\n  const alerts: string[] = [];\n  let severity: 'low' | 'medium' | 'high' = 'low';\n  let alertType: 'volume' | 'premium' | 'sweep' | 'multiple' = 'volume';\n  \n  // High volume alert (3x average)\n  if (totalVolume > avgVolumePerTicker * 3) {\n    alerts.push(`Volume ${((totalVolume / avgVolumePerTicker) * 100).toFixed(0)}% above average`);\n    severity = 'high';\n    alertType = 'volume';\n  } else if (totalVolume > avgVolumePerTicker * 2) {\n    alerts.push(`Volume ${((totalVolume / avgVolumePerTicker) * 100).toFixed(0)}% above average`);\n    severity = 'medium';\n  }\n\n  // High premium alert (3x average)\n  if (totalPremium > avgPremiumPerTicker * 3) {\n    alerts.push(`Premium ${((totalPremium / avgPremiumPerTicker) * 100).toFixed(0)}% above average`);\n    severity = 'high';\n    if (alertType !== 'volume') alertType = 'premium';\n    else alertType = 'multiple';\n  } else if (totalPremium > avgPremiumPerTicker * 2) {\n    alerts.push(`Premium ${((totalPremium / avgPremiumPerTicker) * 100).toFixed(0)}% above average`);\n    if (severity !== 'high') severity = 'medium';\n  }\n\n  // Unusual sweep activity\n  if (sweepCount > 5) {\n    alerts.push(`${sweepCount} sweeps detected`);\n    severity = 'high';\n    alertType = alertType === 'volume' || alertType === 'premium' ? 'multiple' : 'sweep';\n  } else if (sweepCount > 2) {\n    alerts.push(`${sweepCount} sweeps detected`);\n    if (severity === 'low') severity = 'medium';\n  }\n\n  // Extreme call/put ratio\n  if (callPutRatio > 5) {\n    alerts.push(`Heavy call bias (${callPutRatio.toFixed(1)}:1)`);\n    if (severity === 'low') severity = 'medium';\n  } else if (callPutRatio < 0.2) {\n    alerts.push(`Heavy put bias (1:${(1/callPutRatio).toFixed(1)})`);\n    if (severity === 'low') severity = 'medium';\n  }\n\n  // Large average trade size\n  if (avgTradeSize > 5000) {\n    alerts.push(`Large avg trade size: ${formatVolume(Math.round(avgTradeSize))}`);\n    if (severity === 'low') severity = 'medium';\n  }\n\n  // Return alert if any criteria met\n  if (alerts.length > 0) {\n    return {\n      ticker,\n      alertType,\n      severity,\n      reason: alerts.join(' • '),\n      metrics: {\n        totalVolume,\n        totalPremium,\n        callPutRatio,\n        sweepCount,\n        avgTradeSize\n      }\n    };\n  }\n\n  return null;\n}\n\n/**\n * Identify key price levels based on volume and open interest\n */\nexport function identifyKeyPriceLevels(\n  tickerData: OptionData[],\n  topN: number = 5\n): KeyPriceLevel[] {\n  if (tickerData.length === 0) return [];\n\n  // Aggregate by strike price\n  const strikeMap = new Map<number, {\n    volume: number;\n    openInterest: number;\n    premium: number;\n    callVolume: number;\n    putVolume: number;\n  }>();\n\n  tickerData.forEach(trade => {\n    const existing = strikeMap.get(trade.strike) || {\n      volume: 0,\n      openInterest: 0,\n      premium: 0,\n      callVolume: 0,\n      putVolume: 0\n    };\n\n    const premium = parseFloat(trade.premium.replace(/[$,]/g, '')) || 0;\n\n    existing.volume += trade.volume;\n    existing.openInterest += trade.openInterest;\n    existing.premium += premium;\n    \n    if (trade.optionType === 'Call') {\n      existing.callVolume += trade.volume;\n    } else {\n      existing.putVolume += trade.volume;\n    }\n\n    strikeMap.set(trade.strike, existing);\n  });\n\n  // Convert to array and sort by combined score\n  const levels = Array.from(strikeMap.entries()).map(([strike, data]) => {\n    // Combined significance score (weighted: 40% volume, 40% OI, 20% premium)\n    const maxVolume = Math.max(...Array.from(strikeMap.values()).map(v => v.volume));\n    const maxOI = Math.max(...Array.from(strikeMap.values()).map(v => v.openInterest));\n    const maxPremium = Math.max(...Array.from(strikeMap.values()).map(v => v.premium));\n    \n    const volumeScore = maxVolume > 0 ? data.volume / maxVolume : 0;\n    const oiScore = maxOI > 0 ? data.openInterest / maxOI : 0;\n    const premiumScore = maxPremium > 0 ? data.premium / maxPremium : 0;\n    \n    const combinedScore = volumeScore * 0.4 + oiScore * 0.4 + premiumScore * 0.2;\n    \n    let significance: 'high' | 'medium' | 'low' = 'low';\n    if (combinedScore > 0.7) significance = 'high';\n    else if (combinedScore > 0.4) significance = 'medium';\n\n    let type: 'call' | 'put' | 'both' = 'both';\n    if (data.callVolume > data.putVolume * 2) type = 'call';\n    else if (data.putVolume > data.callVolume * 2) type = 'put';\n\n    return {\n      strike,\n      volume: data.volume,\n      openInterest: data.openInterest,\n      premium: data.premium,\n      significance,\n      type,\n      combinedScore\n    };\n  });\n\n  // Sort by combined score and return top N\n  return levels\n    .sort((a, b) => b.combinedScore - a.combinedScore)\n    .slice(0, topN)\n    .map(({ combinedScore, ...rest }) => rest);\n}\n\n/**\n * Estimate gamma exposure at each strike\n * Note: This is a simplified estimation without actual Greeks data\n */\nexport function estimateGammaExposure(\n  tickerData: OptionData[],\n  currentPrice?: number\n): GammaExposure[] {\n  if (tickerData.length === 0) return [];\n\n  // Aggregate by strike\n  const strikeMap = new Map<number, {\n    callVolume: number;\n    putVolume: number;\n    callOI: number;\n    putOI: number;\n  }>();\n\n  tickerData.forEach(trade => {\n    const existing = strikeMap.get(trade.strike) || {\n      callVolume: 0,\n      putVolume: 0,\n      callOI: 0,\n      putOI: 0\n    };\n\n    if (trade.optionType === 'Call') {\n      existing.callVolume += trade.volume;\n      existing.callOI += trade.openInterest;\n    } else {\n      existing.putVolume += trade.volume;\n      existing.putOI += trade.openInterest;\n    }\n\n    strikeMap.set(trade.strike, existing);\n  });\n\n  // Calculate gamma exposure estimates\n  const exposures = Array.from(strikeMap.entries()).map(([strike, data]) => {\n    // Simplified gamma estimation:\n    // Dealers are typically short options (providing liquidity)\n    // Call OI = dealers short calls = negative gamma for dealers (must buy as price rises)\n    // Put OI = dealers short puts = positive gamma for dealers (must sell as price falls)\n    \n    // Weight ATM options higher (simplified: within 10% of current price gets full weight)\n    let atmWeight = 1;\n    if (currentPrice) {\n      const percentFromCurrent = Math.abs(strike - currentPrice) / currentPrice;\n      if (percentFromCurrent < 0.05) atmWeight = 2; // Very close to ATM\n      else if (percentFromCurrent < 0.10) atmWeight = 1.5; // Near ATM\n      else if (percentFromCurrent > 0.20) atmWeight = 0.5; // Far OTM/ITM\n    }\n\n    // Net gamma exposure (negative = dealers need to buy on way up, sell on way down)\n    // Using OI as it represents open positions that need hedging\n    const netGammaExposure = (data.putOI - data.callOI) * atmWeight;\n    \n    const absExposure = Math.abs(netGammaExposure);\n    const maxExposure = Math.max(...Array.from(strikeMap.values()).map(v => \n      Math.abs((v.putOI - v.callOI))\n    ));\n    \n    let level: 'extreme' | 'high' | 'moderate' | 'low' = 'low';\n    if (maxExposure > 0) {\n      const exposureRatio = absExposure / maxExposure;\n      if (exposureRatio > 0.7) level = 'extreme';\n      else if (exposureRatio > 0.4) level = 'high';\n      else if (exposureRatio > 0.2) level = 'moderate';\n    }\n\n    return {\n      strike,\n      netGammaExposure,\n      callVolume: data.callVolume,\n      putVolume: data.putVolume,\n      callOI: data.callOI,\n      putOI: data.putOI,\n      level\n    };\n  });\n\n  // Sort by strike price\n  return exposures.sort((a, b) => a.strike - b.strike);\n}\n\n/**\n * Calculate max pain (strike where option holders lose most money)\n */\nexport function calculateMaxPain(tickerData: OptionData[]): number | null {\n  if (tickerData.length === 0) return null;\n\n  // Get unique strikes\n  const strikes = [...new Set(tickerData.map(t => t.strike))].sort((a, b) => a - b);\n  \n  // For each strike, calculate total loss for option holders\n  const painMap = new Map<number, number>();\n\n  strikes.forEach(testStrike => {\n    let totalPain = 0;\n\n    tickerData.forEach(trade => {\n      const { strike, optionType, openInterest } = trade;\n      \n      if (optionType === 'Call') {\n        // Calls lose value if price is below strike\n        if (testStrike < strike) {\n          totalPain += openInterest * (strike - testStrike);\n        }\n      } else {\n        // Puts lose value if price is above strike\n        if (testStrike > strike) {\n          totalPain += openInterest * (testStrike - strike);\n        }\n      }\n    });\n\n    painMap.set(testStrike, totalPain);\n  });\n\n  // Find strike with maximum pain\n  let maxPainStrike = strikes[0];\n  let maxPain = painMap.get(strikes[0]) || 0;\n\n  painMap.forEach((pain, strike) => {\n    if (pain > maxPain) {\n      maxPain = pain;\n      maxPainStrike = strike;\n    }\n  });\n\n  return maxPainStrike;\n}\n\n/**\n * Get complete analytics for a ticker\n */\nexport function getTickerAnalytics(\n  ticker: string,\n  allData: OptionData[],\n  currentPrice?: number\n): TickerAnalytics {\n  const tickerData = allData.filter(t => t.ticker === ticker);\n  \n  return {\n    ticker,\n    unusualActivity: detectUnusualActivity(tickerData, ticker, allData),\n    keyPriceLevels: identifyKeyPriceLevels(tickerData, 5),\n    gammaExposure: estimateGammaExposure(tickerData, currentPrice),\n    maxPainStrike: calculateMaxPain(tickerData),\n    currentPrice\n  };\n}\n\n// Dark Pool Data Parsing Functions\n\n/**\n * Parse dark pool CSV data\n * Expected CSV format: avatar, username, botText, timestamp, separator, hiddenVisually, ticker, quantity, price, totalValue, relativeTime, timestamp2, time, separator2\n */\nexport function parseDarkPoolData(csvContent: string, filename: string): DarkPoolData[] {\n  // Check cache first\n  const cacheKey = `${filename}-${csvContent.length}`;\n  const cached = darkPoolParseCache.get(cacheKey);\n  if (cached) {\n    if (import.meta.env.DEV) {\n      console.log(`Using cached dark pool data for ${filename}`);\n    }\n    return cached;\n  }\n\n  const lines = csvContent.split('\\n');\n  const darkPoolData: DarkPoolData[] = [];\n  \n  // Skip header row\n  for (let i = 1; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (!line) continue;\n    \n    try {\n      // Parse CSV line - handle quoted fields\n      const fields = parseCSVLine(line);\n      \n      if (fields.length < 14) continue;\n      \n      const ticker = fields[6]?.replace(/\"/g, '').trim();\n      const quantityStr = fields[7]?.replace(/\"/g, '').replace(/,/g, '').trim();\n      const priceStr = fields[8]?.replace(/\"/g, '').trim();\n      const totalValue = fields[9]?.replace(/\"/g, '').trim();\n      const timestampStr = fields[5]?.replace(/\"/g, '').trim();\n      \n      // Skip rows without ticker or if ticker is empty\n      if (!ticker || ticker === '' || ticker === '[') continue;\n      \n      // Parse quantity\n      const quantity = parseInt(quantityStr);\n      if (isNaN(quantity) || quantity <= 0) continue;\n      \n      // Parse price\n      const price = parseFloat(priceStr);\n      if (isNaN(price) || price <= 0) continue;\n      \n      // Parse timestamp\n      const timestamp = parseTimestampFromData(timestampStr);\n      if (!timestamp) continue;\n      \n      darkPoolData.push({\n        ticker,\n        quantity,\n        price,\n        totalValue,\n        timestamp: timestamp.toISOString(),\n        sourceFile: filename\n      });\n      \n    } catch (error) {\n      if (import.meta.env.DEV) {\n        console.warn(`Error parsing dark pool line ${i}:`, error, line);\n      }\n      continue;\n    }\n  }\n  \n  // Cache the parsed data\n  darkPoolParseCache.set(cacheKey, darkPoolData);\n  \n  return darkPoolData;\n}\n\n/**\n * Parse CSV line handling quoted fields\n */\nfunction parseCSVLine(line: string): string[] {\n  const fields: string[] = [];\n  let current = '';\n  let inQuotes = false;\n  \n  for (let i = 0; i < line.length; i++) {\n    const char = line[i];\n    \n    if (char === '\"') {\n      inQuotes = !inQuotes;\n    } else if (char === ',' && !inQuotes) {\n      fields.push(current);\n      current = '';\n    } else {\n      current += char;\n    }\n  }\n  \n  fields.push(current);\n  return fields;\n}\n\n/**\n * Merge dark pool data from multiple files\n */\nexport function mergeDarkPoolDataFromFiles(\n  files: Array<{ filename: string; data: string; timestamp: Date }>\n): { mergedData: DarkPoolData[]; info: MergedDataInfo } {\n  const allData: DarkPoolData[] = [];\n  let totalRecords = 0;\n  let earliestDate: Date | null = null;\n  let latestDate: Date | null = null;\n  \n  const fileInfo = files.map(file => {\n    const parsedData = parseDarkPoolData(file.data, file.filename);\n    allData.push(...parsedData);\n    totalRecords += parsedData.length;\n    \n    // Update date range\n    parsedData.forEach(record => {\n      const recordDate = new Date(record.timestamp);\n      if (!earliestDate || recordDate < earliestDate) {\n        earliestDate = recordDate;\n      }\n      if (!latestDate || recordDate > latestDate) {\n        latestDate = recordDate;\n      }\n    });\n    \n    return {\n      filename: file.filename,\n      recordCount: parsedData.length,\n      timestamp: file.timestamp\n    };\n  });\n  \n  // Sort by timestamp (newest first)\n  allData.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n  \n  return {\n    mergedData: allData,\n    info: {\n      totalFiles: files.length,\n      totalRecords,\n      dateRange: {\n        earliest: earliestDate,\n        latest: latestDate\n      },\n      files: fileInfo\n    }\n  };\n}\n\n/**\n * Get dark pool summaries by ticker\n */\nexport function getDarkPoolTickerSummaries(darkPoolData: DarkPoolData[]): Array<{\n  ticker: string;\n  totalQuantity: number;\n  totalValue: number;\n  averagePrice: number;\n  tradeCount: number;\n  lastActivity: string;\n  lastActivityDate: Date | null;\n  largestTrade: {\n    quantity: number;\n    price: number;\n    totalValue: string;\n    timestamp: string;\n  } | null;\n}> {\n  // Check cache first\n  const cacheKey = `${darkPoolData.length}_${darkPoolData.slice(0, 3).map(d => `${d.ticker}_${d.timestamp}`).join('_')}`;\n  const cached = darkPoolTickerSummaryCache.get(cacheKey);\n  if (cached) {\n    if (import.meta.env.DEV) {\n      console.log('Using cached dark pool ticker summaries');\n    }\n    return cached;\n  }\n\n  const tickerMap = new Map<string, {\n    ticker: string;\n    totalQuantity: number;\n    totalValue: number;\n    tradeCount: number;\n    lastActivityDate: Date | null;\n    largestTrade: {\n      quantity: number;\n      price: number;\n      totalValue: string;\n      timestamp: string;\n    } | null;\n  }>();\n  \n  darkPoolData.forEach(trade => {\n    const existing = tickerMap.get(trade.ticker) || {\n      ticker: trade.ticker,\n      totalQuantity: 0,\n      totalValue: 0,\n      tradeCount: 0,\n      lastActivityDate: null,\n      largestTrade: null\n    };\n    \n    existing.totalQuantity += trade.quantity;\n    existing.totalValue += trade.quantity * trade.price;\n    existing.tradeCount += 1;\n    \n    // Update last activity\n    const tradeDate = new Date(trade.timestamp);\n    if (!existing.lastActivityDate || tradeDate > existing.lastActivityDate) {\n      existing.lastActivityDate = tradeDate;\n    }\n    \n    // Update largest trade\n    if (!existing.largestTrade || trade.quantity > existing.largestTrade.quantity) {\n      existing.largestTrade = {\n        quantity: trade.quantity,\n        price: trade.price,\n        totalValue: trade.totalValue,\n        timestamp: trade.timestamp\n      };\n    }\n    \n    tickerMap.set(trade.ticker, existing);\n  });\n  \n  const result = Array.from(tickerMap.values()).map(data => ({\n    ...data,\n    averagePrice: data.totalValue / data.totalQuantity,\n    lastActivity: data.lastActivityDate ? data.lastActivityDate.toLocaleString() : 'Unknown'\n  })).sort((a, b) => b.totalValue - a.totalValue);\n\n  // Cache the result\n  darkPoolTickerSummaryCache.set(cacheKey, result);\n  \n  return result;\n}\n","import React, { memo, useMemo, useState } from 'react';\nimport { TrendingUp, TrendingDown, Calendar, Clock, ArrowUpDown, Target, Zap } from 'lucide-react';\nimport { TickerSummary, formatVolume, formatPremium, OptionData, getTickerAnalytics } from '../utils/dataParser';\n\ninterface TickerListProps {\n  tickers: TickerSummary[];\n  onTickerSelect: (ticker: string) => void;\n  allData: OptionData[];\n}\n\ntype SortOption = 'recent' | 'oldest' | 'volume-high' | 'volume-low' | 'calls-high' | 'puts-high' | 'premium-high' | 'premium-low';\n\nconst formatDateTime = (timestamp: string, parsedDate?: Date | null): string => {\n  try {\n    let time: Date;\n    \n    // Use parsed date if available, otherwise try to parse the timestamp string\n    if (parsedDate) {\n      time = parsedDate;\n    } else {\n      time = new Date(timestamp);\n    }\n    \n    // Check if the date is valid\n    if (isNaN(time.getTime())) {\n      return '';\n    }\n    \n    // Format as \"Oct 8, 2025 3:02 PM\"\n    return time.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric'\n    }) + ' ' + time.toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true\n    });\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.warn('Error parsing timestamp:', timestamp, error);\n    }\n    return '';\n  }\n};\n\nconst TickerList: React.FC<TickerListProps> = memo(({ tickers, onTickerSelect, allData }) => {\n  const [sortBy, setSortBy] = useState<SortOption>('recent');\n\n  const sortedTickers = useMemo(() => {\n    const sorted = [...tickers];\n    \n    switch (sortBy) {\n      case 'recent':\n        return sorted.sort((a, b) => {\n          if (a.lastActivityDate && b.lastActivityDate) {\n            return b.lastActivityDate.getTime() - a.lastActivityDate.getTime();\n          }\n          return 0;\n        });\n      \n      case 'oldest':\n        return sorted.sort((a, b) => {\n          if (a.lastActivityDate && b.lastActivityDate) {\n            return a.lastActivityDate.getTime() - b.lastActivityDate.getTime();\n          }\n          return 0;\n        });\n      \n      case 'volume-high':\n        return sorted.sort((a, b) => b.totalVolume - a.totalVolume);\n      \n      case 'volume-low':\n        return sorted.sort((a, b) => a.totalVolume - b.totalVolume);\n      \n      case 'calls-high':\n        return sorted.sort((a, b) => b.callVolume - a.callVolume);\n      \n      case 'puts-high':\n        return sorted.sort((a, b) => b.putVolume - a.putVolume);\n      \n      case 'premium-high':\n        return sorted.sort((a, b) => b.totalPremium - a.totalPremium);\n      \n      case 'premium-low':\n        return sorted.sort((a, b) => a.totalPremium - b.totalPremium);\n      \n      default:\n        return sorted;\n    }\n  }, [tickers, sortBy]);\n\n  return (\n    <div className=\"ticker-list\">\n      <div className=\"ticker-list-header\">\n        <div className=\"header-content\">\n          <h2>Options Volume Dashboard</h2>\n          {/* <p>Click on any ticker to view detailed volume profile</p> */}\n        </div>\n        <div className=\"sort-controls\">\n          <ArrowUpDown className=\"sort-icon\" />\n          <select \n            className=\"sort-selector\"\n            value={sortBy}\n            onChange={(e) => setSortBy(e.target.value as SortOption)}\n          >\n            <option value=\"recent\">Most Recent</option>\n            <option value=\"oldest\">Oldest First</option>\n            <option value=\"volume-high\">Volume (High to Low)</option>\n            <option value=\"volume-low\">Volume (Low to High)</option>\n            <option value=\"calls-high\">Calls (High to Low)</option>\n            <option value=\"puts-high\">Puts (High to Low)</option>\n            <option value=\"premium-high\">Premium (High to Low)</option>\n            <option value=\"premium-low\">Premium (Low to High)</option>\n          </select>\n        </div>\n      </div>\n      \n      <div className=\"ticker-grid\">\n        {sortedTickers.map((ticker) => {\n          const callDominant = ticker.callVolume > ticker.putVolume;\n          const putDominant = ticker.putVolume > ticker.callVolume;\n          const dominanceClass = callDominant ? 'call-dominant' : putDominant ? 'put-dominant' : 'balanced';\n          \n          // Calculate analytics for this ticker\n          const analytics = getTickerAnalytics(ticker.ticker, allData);\n          \n          return (\n            <div \n              key={ticker.ticker} \n              className={`ticker-card ${dominanceClass}`}\n              onClick={() => onTickerSelect(ticker.ticker)}\n            >\n            <div className=\"ticker-header\">\n              <h3 className=\"ticker-symbol\">\n                {ticker.ticker}\n              </h3>\n              <div className=\"ticker-metrics\">\n                <div className=\"metric\">\n                  <TrendingUp className=\"metric-icon call\" />\n                  <span className=\"metric-label\">Calls</span>\n                  <span className=\"metric-value\">{formatVolume(ticker.callVolume)}</span>\n                </div>\n                <div className=\"metric\">\n                  <TrendingDown className=\"metric-icon put\" />\n                  <span className=\"metric-label\">Puts</span>\n                  <span className=\"metric-value\">{formatVolume(ticker.putVolume)}</span>\n                </div>\n              </div>\n            </div>\n            \n                <div className=\"ticker-details\">\n                  <div className=\"detail-row\">\n                    <span className=\"detail-label\">Total Volume:</span>\n                    <span className=\"detail-value\">{formatVolume(ticker.totalVolume)}</span>\n                  </div>\n                  <div className=\"detail-row\">\n                    <span className=\"detail-label\">Total Premium:</span>\n                    <span className=\"detail-value\">{formatPremium(ticker.totalPremium)}</span>\n                  </div>\n                  <div className=\"detail-row\">\n                    <Calendar className=\"detail-icon\" />\n                    <span className=\"detail-label\">Expiries:</span>\n                    <span className=\"detail-value\">{ticker.uniqueExpiries.length}</span>\n                  </div>\n                  {ticker.lastTrade && (\n                    <div className=\"detail-row last-trade-row\">\n                      <span className=\"detail-label\">Last Trade:</span>\n                      <span className=\"detail-value last-trade\">\n                        {ticker.lastTrade.optionType} ${ticker.lastTrade.strike} \n                        <span className={`trade-side ${ticker.lastTrade.optionType.toLowerCase()}`}>\n                          {ticker.lastTrade.optionType === 'Call' ? '↗' : '↘'}\n                        </span>\n                        {formatVolume(ticker.lastTrade.volume)}\n                      </span>\n                    </div>\n                  )}\n                </div>\n                \n                {/* Analytics Section */}\n                {(analytics.keyPriceLevels.length > 0 || analytics.maxPainStrike) && (\n                  <div className=\"ticker-analytics\">\n                    {analytics.keyPriceLevels.length > 0 && (\n                      <div className=\"analytics-badge key-levels-badge\">\n                        <Target size={12} />\n                        <span className=\"badge-label\">Key Levels:</span>\n                        <span className=\"badge-strikes\">\n                          {analytics.keyPriceLevels.slice(0, 3).map((level, idx) => (\n                            <span \n                              key={level.strike} \n                              className={`level-strike level-${level.significance}`}\n                              title={`${level.type === 'call' ? 'Call' : level.type === 'put' ? 'Put' : 'Call/Put'} - Vol: ${formatVolume(level.volume)}, OI: ${formatVolume(level.openInterest)}`}\n                            >\n                              {idx > 0 && ', '}${level.strike}\n                            </span>\n                          ))}\n                        </span>\n                      </div>\n                    )}\n                    \n                    {analytics.maxPainStrike && (\n                      <div className=\"analytics-badge max-pain-badge\">\n                        <Zap size={12} />\n                        <span className=\"badge-label\">Max Pain:</span>\n                        <span className=\"badge-value\">${analytics.maxPainStrike}</span>\n                      </div>\n                    )}\n                  </div>\n                )}\n                \n                <div className=\"ticker-footer\">\n                  <div className=\"last-activity\">\n                    <Clock className=\"activity-icon\" />\n                    <span>{formatDateTime(ticker.lastActivity, ticker.lastActivityDate)}</span>\n                  </div>\n                </div>\n          </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n});\n\nTickerList.displayName = 'TickerList';\n\nexport default TickerList;\n","import React, { memo, useMemo, useCallback, useState } from 'react';\nimport { VolumeProfileData, HighestVolumeData, formatVolume, OptionData } from '../utils/dataParser';\n\nexport interface VolumeProfileChartProps {\n  data: VolumeProfileData[];\n  highestVolumeData: HighestVolumeData | null;\n  ticker: string;\n  expiry?: string;\n  chartType: 'callput' | 'total';\n  currentPrice?: number; // Optional current stock price\n  trades?: OptionData[]; // Raw trade data for tooltips\n}\n\nconst VolumeProfileChart = memo<VolumeProfileChartProps>(({ \n  data, \n  highestVolumeData,\n  ticker, \n  expiry,\n  chartType,\n  currentPrice,\n  trades = []\n}) => {\n  // Tooltip state\n  const [tooltip, setTooltip] = useState<{\n    visible: boolean;\n    x: number;\n    y: number;\n    content: {\n      strike: number;\n      type?: 'Call' | 'Put';\n      volume: number;\n      trades: number;\n      premium: string;\n      premiumFull: string;\n      sweepTypes: string[];\n      tradeVolumes: number[];\n      expiries: string[];\n      size: number;\n      tradeDetails: Array<{\n        volume: number;\n        premium: string;\n        timestamp: string;\n        expiry: string;\n      }>;\n    } | null;\n  }>({\n    visible: false,\n    x: 0,\n    y: 0,\n    content: null\n  });\n\n  const getBarWidth = useCallback((volume: number, maxVolume: number) => {\n    if (maxVolume === 0) return 0;\n    // Scale to 46% of available space (48% total - 2% spacing on each side)\n    // This ensures bars don't exceed the available space with the new spacing\n    return Math.min((volume / maxVolume) * 46, 46);\n  }, []);\n\n  // Build tooltip data for a strike price and option type\n  const getTooltipData = useCallback((strike: number, optionType?: 'Call' | 'Put') => {\n    const strikeTrades = trades.filter(t => \n      t.strike === strike && (!optionType || t.optionType === optionType)\n    );\n    \n    const totalVolume = strikeTrades.reduce((sum, t) => sum + t.volume, 0);\n    const totalPremium = strikeTrades.reduce((sum, t) => {\n      const premium = t.premium.replace(/[$,]/g, '');\n      return sum + (parseFloat(premium) || 0);\n    }, 0);\n    \n    const premiumFormatted = totalPremium >= 1000000 \n      ? (totalPremium / 1000000).toFixed(2) + 'M' \n      : totalPremium >= 1000 \n      ? (totalPremium / 1000).toFixed(1) + 'K' \n      : totalPremium.toFixed(0);\n    \n    // Full premium value with commas\n    const premiumFull = totalPremium.toLocaleString('en-US', {\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    });\n    \n    const sweepTypes = [...new Set(strikeTrades.map(t => t.sweepType))].filter(Boolean);\n    \n    // Get individual trade volumes, sorted by volume descending\n    const tradeVolumes = strikeTrades\n      .map(t => t.volume)\n      .sort((a, b) => b - a); // Show all trades\n    \n    // Get unique expiry dates\n    const expiries = [...new Set(strikeTrades.map(t => t.expiry))].sort();\n    \n    // Size is the same as totalVolume (total contracts)\n    const size = totalVolume;\n    \n    // Get detailed trade information, sorted by volume descending\n    const tradeDetails = strikeTrades\n      .sort((a, b) => b.volume - a.volume)\n      .map(t => ({\n        volume: t.volume,\n        premium: t.premium,\n        timestamp: t.timestamp,\n        expiry: t.expiry\n      }));\n    \n    return {\n      strike,\n      type: optionType,\n      volume: totalVolume,\n      trades: strikeTrades.length,\n      premium: premiumFormatted,\n      premiumFull,\n      sweepTypes,\n      tradeVolumes,\n      expiries,\n      size,\n      tradeDetails\n    };\n  }, [trades]);\n\n  // Handle mouse enter on volume bar\n  const handleBarMouseEnter = useCallback((e: React.MouseEvent, strike: number, optionType?: 'Call' | 'Put') => {\n    const rect = e.currentTarget.getBoundingClientRect();\n    const tooltipData = getTooltipData(strike, optionType);\n    \n    setTooltip({\n      visible: true,\n      x: e.clientX,\n      y: rect.top - 10,\n      content: tooltipData\n    });\n  }, [getTooltipData]);\n\n  // Handle mouse leave\n  const handleBarMouseLeave = useCallback(() => {\n    setTooltip(prev => ({ ...prev, visible: false }));\n  }, []);\n\n  // Handle mouse move to update position\n  const handleBarMouseMove = useCallback((e: React.MouseEvent) => {\n    setTooltip(prev => ({\n      ...prev,\n      x: e.clientX,\n    }));\n  }, []);\n\n  // Determine current price - use provided currentPrice or fall back to highest volume strike\n  const getCurrentPrice = useCallback(() => {\n    return currentPrice || (highestVolumeData?.strike || null);\n  }, [currentPrice, highestVolumeData]);\n\n  // Check if a strike price is the current price\n  const isCurrentPrice = useCallback((strike: number) => {\n    const current = getCurrentPrice();\n    return current !== null && Math.abs(strike - current) < 0.01; // Allow for small floating point differences\n  }, [getCurrentPrice]);\n\n  // Show all strike prices (no filtering)\n  const getFilteredData = useCallback(() => {\n    return data\n      .sort((a, b) => a.strike - b.strike); // Sort in ascending order (lowest to highest)\n  }, [data]);\n\n  // Get chart data for filtered range\n  const filteredData = getFilteredData();\n  const filteredChartData = useMemo(() => {\n    if (!filteredData.length) return { maxVolume: 0, minStrike: 0, maxStrike: 0, maxTotalVolume: 0, totalVolumeSum: 0 };\n    \n    let maxVolume = 0;\n    let maxTotalVolume = 0;\n    let minStrike = Infinity;\n    let maxStrike = -Infinity;\n    let totalVolumeSum = 0;\n    \n    for (let i = 0; i < filteredData.length; i++) {\n      const d = filteredData[i];\n      maxVolume = Math.max(maxVolume, Math.max(d.callVolume, d.putVolume));\n      maxTotalVolume = Math.max(maxTotalVolume, d.totalVolume);\n      minStrike = Math.min(minStrike, d.strike);\n      maxStrike = Math.max(maxStrike, d.strike);\n      totalVolumeSum += d.totalVolume;\n    }\n    \n    return { \n      maxVolume, \n      minStrike: minStrike === Infinity ? 0 : minStrike, \n      maxStrike: maxStrike === -Infinity ? 0 : maxStrike, \n      maxTotalVolume,\n      totalVolumeSum\n    };\n  }, [filteredData]);\n\n  const getStrikePosition = useCallback((strike: number) => {\n    if (!filteredData.length) return 50;\n    if (filteredChartData.maxStrike === filteredChartData.minStrike) return 50;\n    \n    // Calculate position based on index in filtered data for even spacing\n    const index = filteredData.findIndex(item => item.strike === strike);\n    if (index === -1) return 50;\n    \n    const totalItems = filteredData.length;\n    const spacing = 100 / (totalItems + 1); // Even spacing with padding\n    \n    // For Call/Put chart: reverse positioning (lowest at top)\n    // For Total Volume chart: normal positioning (lowest at left)\n    if (chartType === 'callput') {\n      const reversedIndex = totalItems - 1 - index;\n      return spacing * (reversedIndex + 1);\n    } else {\n      // Total Volume chart: prices go from low to high (left to right)\n      return spacing * (index + 1);\n    }\n  }, [filteredData, filteredChartData, chartType]);\n\n  // Get position for current price (interpolates between strikes)\n  const getCurrentPricePosition = useCallback((price: number) => {\n    if (!filteredData.length) return 50;\n    if (filteredChartData.maxStrike === filteredChartData.minStrike) return 50;\n    \n    const minStrike = filteredChartData.minStrike;\n    const maxStrike = filteredChartData.maxStrike;\n    \n    // Clamp price to be within strike range\n    const clampedPrice = Math.max(minStrike, Math.min(maxStrike, price));\n    \n    // Find the strikes immediately above and below the current price\n    let lowerStrike = minStrike;\n    let upperStrike = maxStrike;\n    let lowerIndex = 0;\n    let upperIndex = filteredData.length - 1;\n    \n    for (let i = 0; i < filteredData.length - 1; i++) {\n      const currentStrike = filteredData[i].strike;\n      const nextStrike = filteredData[i + 1].strike;\n      \n      if (currentStrike <= clampedPrice && clampedPrice <= nextStrike) {\n        lowerStrike = currentStrike;\n        upperStrike = nextStrike;\n        lowerIndex = i;\n        upperIndex = i + 1;\n        break;\n      }\n    }\n    \n    // Calculate positions for the bounding strikes using same logic as getStrikePosition\n    const totalItems = filteredData.length;\n    const spacing = 100 / (totalItems + 1);\n    \n    let lowerPos, upperPos;\n    if (chartType === 'callput') {\n      // Reversed positioning for call/put chart\n      const lowerReversed = totalItems - 1 - lowerIndex;\n      const upperReversed = totalItems - 1 - upperIndex;\n      lowerPos = spacing * (lowerReversed + 1);\n      upperPos = spacing * (upperReversed + 1);\n    } else {\n      lowerPos = spacing * (lowerIndex + 1);\n      upperPos = spacing * (upperIndex + 1);\n    }\n    \n    // Interpolate between the two strike positions\n    if (upperStrike === lowerStrike) {\n      return lowerPos;\n    }\n    \n    const priceRatio = (clampedPrice - lowerStrike) / (upperStrike - lowerStrike);\n    const interpolatedPosition = lowerPos + (upperPos - lowerPos) * priceRatio;\n    \n    if (import.meta.env.DEV) {\n      console.log('Price interpolation:', {\n        price: clampedPrice,\n        lowerStrike,\n        upperStrike,\n        lowerPos: lowerPos.toFixed(2),\n        upperPos: upperPos.toFixed(2),\n        priceRatio: priceRatio.toFixed(3),\n        finalPos: interpolatedPosition.toFixed(2)\n      });\n    }\n    \n    return interpolatedPosition;\n  }, [filteredData, filteredChartData, chartType]);\n\n  // Calculate dynamic height based on number of strike prices\n  const getChartHeight = useCallback(() => {\n    const rowHeight = 18; // Height of each strike row\n    const minHeight = 400; // Minimum chart height\n    const calculatedHeight = Math.max(minHeight, filteredData.length * rowHeight + 40); // 40px padding\n    return calculatedHeight;\n  }, [filteredData.length]);\n\n  if (!data.length) {\n    return (\n      <div className=\"volume-profile-chart\">\n        <div className=\"chart-header\">\n          <h3>{ticker} {chartType === 'callput' ? 'Call/Put Volume' : 'Total Volume'}</h3>\n          {expiry && <span className=\"expiry-date\">{expiry}</span>}\n        </div>\n        <div className=\"no-data\">\n          <p>No volume data available for this ticker{expiry ? ` and expiry date` : ''}</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (chartType === 'callput') {\n    return (\n      <>\n      <div className=\"volume-profile-chart modern-mirrored-chart\">\n        <div className=\"chart-header modern-header\">\n          <h3>{ticker} Call/Put Volume</h3>\n          <div className=\"header-info\">\n            {getCurrentPrice() && (\n              <span className=\"current-price-display\">\n                Current Price: <strong>${getCurrentPrice()}</strong>\n              </span>\n            )}\n            {expiry && <span className=\"expiry-date\">{expiry}</span>}\n          </div>\n        </div>\n        \n        <div className=\"chart-container modern-container\">\n          \n          {/* Main Chart Area */}\n          <div \n            className=\"chart-area modern-chart-area\"\n            style={{ height: `${getChartHeight()}px` }}\n          >\n            {/* Center Line */}\n            <div className=\"center-line\"></div>\n            \n            {/* Strike Price Lines */}\n            <div className=\"strike-axis modern-strike-axis\">\n              {filteredData.map((item) => (\n                <div \n                  key={item.strike} \n                  className=\"strike-line modern-strike-line\"\n                  style={{ \n                    top: `${getStrikePosition(item.strike)}%`\n                  }}\n                >\n                  <span \n                    className={`strike-label modern-strike-label ${isCurrentPrice(item.strike) ? 'current-price-label' : ''}`}\n                  >\n                    {item.strike}\n                  </span>\n                </div>\n              ))}\n            </div>\n            \n            {/* Call/Put Volume Bars */}\n            <div className=\"volume-bars modern-volume-bars\">\n              {filteredData.map((item) => (\n                <div \n                  key={item.strike} \n                  className=\"strike-row modern-strike-row\"\n                  style={{ top: `${getStrikePosition(item.strike)}%` }}\n                >\n                  {/* Call volume bar (left side, green) */}\n                  <div \n                    className=\"volume-bar call-bar modern-call-bar\"\n                    style={{ \n                      width: `${getBarWidth(item.callVolume, filteredChartData.maxVolume)}%`,\n                      right: '52%' /* Moved 2% away from center to add spacing */\n                    }}\n                    onMouseEnter={(e) => handleBarMouseEnter(e, item.strike, 'Call')}\n                    onMouseLeave={handleBarMouseLeave}\n                    onMouseMove={handleBarMouseMove}\n                  >\n                    {item.callVolume > 0 && (\n                      <span className=\"volume-text modern-volume-text\">\n                        {formatVolume(item.callVolume)}\n                      </span>\n                    )}\n                  </div>\n                  \n                  {/* Put volume bar (right side, red) */}\n                  <div \n                    className=\"volume-bar put-bar modern-put-bar\"\n                    style={{ \n                      width: `${getBarWidth(item.putVolume, filteredChartData.maxVolume)}%`,\n                      left: '52%' /* Moved 2% away from center to add spacing */\n                    }}\n                    onMouseEnter={(e) => handleBarMouseEnter(e, item.strike, 'Put')}\n                    onMouseLeave={handleBarMouseLeave}\n                    onMouseMove={handleBarMouseMove}\n                  >\n                    {item.putVolume > 0 && (\n                      <span className=\"volume-text modern-volume-text\">\n                        {formatVolume(item.putVolume)}\n                      </span>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n            \n            {/* Current Price Indicator Line */}\n            {getCurrentPrice() && (\n              <div \n                className=\"current-price-line\"\n                style={{ \n                  top: `${getCurrentPricePosition(getCurrentPrice()!)}%`\n                }}\n              >\n                <span className=\"current-price-label-inline\" style={{\n                  position: 'absolute',\n                  left: '105%',\n                  top: '50%',\n                  transform: 'translateY(-50%)',\n                  background: 'linear-gradient(135deg, rgba(255, 193, 7, 0.95), rgba(255, 152, 0, 0.95))',\n                  color: '#000000',\n                  padding: '0.25rem 0.5rem',\n                  borderRadius: '4px',\n                  fontSize: '0.8rem',\n                  fontWeight: '700',\n                  whiteSpace: 'nowrap',\n                  border: '2px solid rgba(255, 193, 7, 1)',\n                  boxShadow: '0 2px 8px rgba(255, 193, 7, 0.4)',\n                  zIndex: 15\n                }}>\n                  ${getCurrentPrice()!.toFixed(2)}\n                </span>\n              </div>\n            )}\n          </div>\n        </div>\n        \n        {/* Legend */}\n        {/* <div className=\"chart-legend modern-legend\">\n          <div className=\"legend-item\">\n            <div className=\"legend-color call modern-legend-call\"></div>\n            <span>Call Volume</span>\n          </div>\n          <div className=\"legend-item\">\n            <div className=\"legend-color put modern-legend-put\"></div>\n            <span>Put Volume</span>\n          </div>\n        </div> */}\n      </div>\n\n      {/* Modern Tooltip */}\n      {tooltip.visible && tooltip.content && (\n        <div \n          className=\"modern-tooltip\"\n          style={{\n            position: 'fixed',\n            left: `${tooltip.x + 15}px`,\n            top: `${tooltip.y}px`,\n            transform: 'translateY(-50%)',\n            pointerEvents: 'auto',\n            zIndex: 9999\n          }}\n          onMouseEnter={() => setTooltip(prev => ({ ...prev, visible: true }))}\n          onMouseLeave={handleBarMouseLeave}\n        >\n          <div className=\"tooltip-header\">\n            <span className=\"tooltip-strike\">${tooltip.content.strike}</span>\n            {tooltip.content.type && (\n              <span className={`tooltip-type ${tooltip.content.type.toLowerCase()}`}>\n                {tooltip.content.type}\n              </span>\n            )}\n          </div>\n          <div className=\"tooltip-body\">\n            {tooltip.content.tradeDetails.length > 0 && (\n              <div className=\"tooltip-trade-details-only\">\n                <div className=\"tooltip-trade-header\">Trade Details:</div>\n                <div className=\"tooltip-trade-list\">\n                  {tooltip.content.tradeDetails.map((trade, idx) => (\n                    <div key={idx} className=\"tooltip-trade-item\">\n                      <div className=\"trade-item-row\">\n                        <span className=\"trade-item-label\">Vol:</span>\n                        <span className=\"trade-item-value\">{trade.volume.toLocaleString()}</span>\n                      </div>\n                      <div className=\"trade-item-row\">\n                        <span className=\"trade-item-label\">Premium:</span>\n                        <span className=\"trade-item-value\">{trade.premium}</span>\n                      </div>\n                      {trade.expiry && (\n                        <div className=\"trade-item-row\">\n                          <span className=\"trade-item-label\">Expiry:</span>\n                          <span className=\"trade-item-value\">\n                            {new Date(trade.expiry).toLocaleDateString('en-US', { \n                              month: 'short', \n                              day: 'numeric',\n                              year: 'numeric'\n                            })}\n                          </span>\n                        </div>\n                      )}\n                      <div className=\"trade-item-row\">\n                        <span className=\"trade-item-label\">Time:</span>\n                        <span className=\"trade-item-value trade-item-time\">\n                          {(() => {\n                            try {\n                              if (!trade.timestamp) return 'N/A';\n                              \n                              // Try parsing the Discord format: \"Monday, October 13, 2025 at 10:07 AM\"\n                              const date = new Date(trade.timestamp);\n                              \n                              // Check if date is valid\n                              if (!isNaN(date.getTime())) {\n                                return `${date.toLocaleDateString('en-US', { \n                                  month: 'short', \n                                  day: 'numeric',\n                                  year: 'numeric'\n                                })} ${date.toLocaleTimeString('en-US', { \n                                  hour: 'numeric', \n                                  minute: '2-digit',\n                                  hour12: true \n                                })}`;\n                              }\n                              \n                              // If date parsing failed, return the original timestamp\n                              return trade.timestamp;\n                            } catch (e) {\n                              return trade.timestamp || 'N/A';\n                            }\n                          })()}\n                        </span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n      </>\n    );\n  }\n\n  // Total Volume Chart (Vertical orientation)\n  return (\n    <>\n    <div className=\"volume-profile-chart total-chart\">\n      <div className=\"chart-header\">\n        <h3>{ticker} Total Volume</h3>\n        <div className=\"header-info\">\n          {getCurrentPrice() && (\n            <span className=\"current-price-display\">\n              Current Price: <strong>${getCurrentPrice()}</strong>\n            </span>\n          )}\n          {expiry && <span className=\"expiry-date\">{expiry}</span>}\n        </div>\n      </div>\n      \n      {/* Chart Header with Price Info */}\n      {/* <div className=\"chart-header\">\n        <div className=\"chart-title\">\n          {ticker} Total Volume\n        </div>\n        <div className=\"price-info\">\n          <div className=\"current-price-box\">\n            Current Price: ${getCurrentPrice()?.toFixed(2) || 'N/A'}\n          </div>\n          <div className=\"price-range-box\">\n            Range: ${filteredData.length > 0 ? filteredData[0].strike.toFixed(0) : 'N/A'} - ${filteredData.length > 0 ? filteredData[filteredData.length - 1].strike.toFixed(0) : 'N/A'}\n          </div>\n        </div>\n      </div> */}\n\n      <div className=\"chart-container vertical\">\n        \n        {/* Main Chart Area */}\n        <div \n          className=\"chart-area vertical\"\n          style={{ height: `${getChartHeight()}px` }}\n        >\n          {/* Total Volume Bars (Vertical) */}\n          <div className=\"volume-bars vertical\">\n            {filteredData.map((item) => (\n              <div \n                key={item.strike} \n                className=\"strike-column\"\n                style={{ left: `${getStrikePosition(item.strike)}%` }}\n              >\n                <div \n                  className=\"volume-bar total-bar vertical\"\n                  style={{ \n                    height: `${getBarWidth(item.totalVolume, filteredChartData.maxTotalVolume)}%`\n                  }}\n                  onMouseEnter={(e) => handleBarMouseEnter(e, item.strike)}\n                  onMouseLeave={handleBarMouseLeave}\n                  onMouseMove={handleBarMouseMove}\n                >\n                  {item.totalVolume > 0 && (\n                    <span className=\"volume-text volume-text-top\">\n                      {formatVolume(item.totalVolume)}\n                      <span className=\"volume-percentage\">\n                        ({filteredChartData.totalVolumeSum > 0 ? ((item.totalVolume / filteredChartData.totalVolumeSum) * 100).toFixed(1) : '0.0'}%)\n                      </span>\n                    </span>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n          \n          {/* Current Price Indicator Line (Vertical) */}\n          {getCurrentPrice() && (\n            <div \n              className=\"current-price-line vertical\"\n              style={{ \n                left: `${getCurrentPricePosition(getCurrentPrice()!)}%`\n              }}\n            >\n              <span className=\"current-price-label-inline\" style={{\n                position: 'absolute',\n                left: '50%',\n                top: '-30px',\n                transform: 'translateX(-50%)',\n                background: 'linear-gradient(135deg, rgba(255, 193, 7, 0.95), rgba(255, 152, 0, 0.95))',\n                color: '#000000',\n                padding: '0.25rem 0.5rem',\n                borderRadius: '4px',\n                fontSize: '0.8rem',\n                fontWeight: '700',\n                whiteSpace: 'nowrap',\n                border: '2px solid rgba(255, 193, 7, 1)',\n                boxShadow: '0 2px 8px rgba(255, 193, 7, 0.4)',\n                zIndex: 15\n              }}>\n                ${getCurrentPrice()!.toFixed(2)}\n              </span>\n            </div>\n          )}\n        </div>\n        \n        {/* X-Axis Price Labels (Bottom) - Moved outside chart area */}\n        <div className=\"x-axis-labels\">\n          {filteredData.map((item) => (\n            <div \n              key={item.strike} \n              className=\"x-axis-label\"\n              style={{ \n                left: `${getStrikePosition(item.strike)}%`\n              }}\n            >\n              <span \n                className={`strike-label ${isCurrentPrice(item.strike) ? 'current-price-label' : ''}`}\n              >\n                {item.strike}\n              </span>\n            </div>\n          ))}\n        </div>\n      </div>\n      \n      {/* Legend */}\n      {/* <div className=\"chart-legend\">\n        <div className=\"legend-item\">\n          <div className=\"legend-color total\"></div>\n          <span>Total Volume</span>\n        </div>\n      </div> */}\n\n      {/* Modern Tooltip */}\n      {tooltip.visible && tooltip.content && (\n        <div \n          className=\"modern-tooltip\"\n          style={{\n            position: 'fixed',\n            left: `${tooltip.x + 15}px`,\n            top: `${tooltip.y}px`,\n            transform: 'translateY(-50%)',\n            pointerEvents: 'auto',\n            zIndex: 9999\n          }}\n          onMouseEnter={() => setTooltip(prev => ({ ...prev, visible: true }))}\n          onMouseLeave={handleBarMouseLeave}\n        >\n          <div className=\"tooltip-header\">\n            <span className=\"tooltip-strike\">${tooltip.content.strike}</span>\n            {tooltip.content.type && (\n              <span className={`tooltip-type ${tooltip.content.type.toLowerCase()}`}>\n                {tooltip.content.type}\n              </span>\n            )}\n          </div>\n          <div className=\"tooltip-body\">\n            {tooltip.content.tradeDetails.length > 0 && (\n              <div className=\"tooltip-trade-details-only\">\n                <div className=\"tooltip-trade-header\">Trade Details:</div>\n                <div className=\"tooltip-trade-list\">\n                  {tooltip.content.tradeDetails.map((trade, idx) => (\n                    <div key={idx} className=\"tooltip-trade-item\">\n                      <div className=\"trade-item-row\">\n                        <span className=\"trade-item-label\">Vol:</span>\n                        <span className=\"trade-item-value\">{trade.volume.toLocaleString()}</span>\n                      </div>\n                      <div className=\"trade-item-row\">\n                        <span className=\"trade-item-label\">Premium:</span>\n                        <span className=\"trade-item-value\">{trade.premium}</span>\n                      </div>\n                      {trade.expiry && (\n                        <div className=\"trade-item-row\">\n                          <span className=\"trade-item-label\">Expiry:</span>\n                          <span className=\"trade-item-value\">\n                            {new Date(trade.expiry).toLocaleDateString('en-US', { \n                              month: 'short', \n                              day: 'numeric',\n                              year: 'numeric'\n                            })}\n                          </span>\n                        </div>\n                      )}\n                      <div className=\"trade-item-row\">\n                        <span className=\"trade-item-label\">Time:</span>\n                        <span className=\"trade-item-value trade-item-time\">\n                          {(() => {\n                            try {\n                              if (!trade.timestamp) return 'N/A';\n                              \n                              // Try parsing the Discord format: \"Monday, October 13, 2025 at 10:07 AM\"\n                              const date = new Date(trade.timestamp);\n                              \n                              // Check if date is valid\n                              if (!isNaN(date.getTime())) {\n                                return `${date.toLocaleDateString('en-US', { \n                                  month: 'short', \n                                  day: 'numeric',\n                                  year: 'numeric'\n                                })} ${date.toLocaleTimeString('en-US', { \n                                  hour: 'numeric', \n                                  minute: '2-digit',\n                                  hour12: true \n                                })}`;\n                              }\n                              \n                              // If date parsing failed, return the original timestamp\n                              return trade.timestamp;\n                            } catch (e) {\n                              return trade.timestamp || 'N/A';\n                            }\n                          })()}\n                        </span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n    </>\n  );\n});\n\nVolumeProfileChart.displayName = 'VolumeProfileChart';\n\nexport default VolumeProfileChart;\n","import React, { memo, useMemo, useCallback, useState } from 'react';\nimport { ArrowUpDown } from 'lucide-react';\nimport { OptionData, formatVolume, parseTimestampFromData } from '../utils/dataParser';\n\ninterface TradeListProps {\n  trades: OptionData[];\n  ticker: string;\n  expiry?: string;\n}\n\ninterface TradeRowProps {\n  trade: OptionData;\n  index: number;\n}\n\nconst TradeRow: React.FC<TradeRowProps> = memo(({ trade }) => {\n  const formatExecutionDateTime = (timestamp: string): string => {\n    try {\n      // Parse the timestamp format from CSV data\n      // Expected format: \"Thursday, October 9, 2025 at 2:15 PM\"\n      const fullMatch = timestamp.match(/(\\w+),\\s+(\\w+)\\s+(\\d+),\\s+(\\d+)\\s+at\\s+(\\d+):(\\d+)\\s+(AM|PM)/i);\n      \n      if (fullMatch) {\n        const [, , monthName, day, , hour, minute, ampm] = fullMatch;\n        \n        // Convert to 24-hour format\n        let hour24 = parseInt(hour);\n        if (ampm.toUpperCase() === 'PM' && hour24 !== 12) {\n          hour24 += 12;\n        } else if (ampm.toUpperCase() === 'AM' && hour24 === 12) {\n          hour24 = 0;\n        }\n        \n        // Format date as MM/DD\n        const monthMap: { [key: string]: string } = {\n          'january': '01', 'february': '02', 'march': '03', 'april': '04',\n          'may': '05', 'june': '06', 'july': '07', 'august': '08',\n          'september': '09', 'october': '10', 'november': '11', 'december': '12'\n        };\n        \n        const month = monthMap[monthName.toLowerCase()] || '01';\n        const formattedDate = `${month}/${day.padStart(2, '0')}`;\n        const formattedTime = `${hour24.toString().padStart(2, '0')}:${minute}`;\n        \n        return `${formattedDate} ${formattedTime}`;\n      }\n      \n      // Fallback to standard date parsing\n      const date = new Date(timestamp);\n      if (isNaN(date.getTime())) return 'Unknown';\n      \n      return date.toLocaleDateString('en-US', { month: '2-digit', day: '2-digit' }) + ' ' + \n             date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: false });\n    } catch (error) {\n      return 'Unknown';\n    }\n  };\n\n  // Parse premium to check if over $1M\n  const parsePremiumValue = (premium: string): number => {\n    const cleanPremium = premium.replace(/[$,]/g, '');\n    const num = parseFloat(cleanPremium);\n    \n    if (premium.includes('M')) {\n      return num * 1000000;\n    } else if (premium.includes('K')) {\n      return num * 1000;\n    }\n    return num;\n  };\n\n  const premiumValue = parsePremiumValue(trade.premium);\n  const isHighValue = premiumValue >= 1000000;\n\n  return (\n    <div \n      className=\"trade-row-horizontal\"\n      style={{\n        backgroundColor: trade.optionType === 'Call' \n          ? (isHighValue ? 'rgba(0, 80, 0, 0.7)' : 'rgba(0, 100, 0, 0.5)') // Darker green for high value\n          : (isHighValue ? 'rgba(100, 0, 0, 0.7)' : 'rgba(139, 0, 0, 0.5)'), // Darker red for high value\n      }}\n    >\n      <div className=\"trade-cell-h symbol\">{trade.ticker}</div>\n      <div className=\"trade-cell-h strike\">{trade.strike}</div>\n      <div className=\"trade-cell-h expiry\">{new Date(trade.expiry).toLocaleDateString('en-US', { month: '2-digit', day: '2-digit', year: 'numeric' })}</div>\n      <div className=\"trade-cell-h type\">{trade.optionType}</div>\n      <div className=\"trade-cell-h side\">{trade.sweepType}</div>\n      <div className=\"trade-cell-h size\">{formatVolume(trade.volume)}</div>\n      <div className=\"trade-cell-h premium\">{trade.premium}</div>\n      <div className=\"trade-cell-h volume\">{formatVolume(trade.volume)}</div>\n      <div className=\"trade-cell-h oi\">{formatVolume(trade.openInterest)}</div>\n      <div className=\"trade-cell-h exec-time\">{formatExecutionDateTime(trade.timestamp)}</div>\n    </div>\n  );\n});\n\nTradeRow.displayName = 'TradeRow';\n\ntype SortOption = 'trade-date' | 'expiry-date' | 'size';\n\nconst TradeList: React.FC<TradeListProps> = memo(({ trades, ticker, expiry }) => {\n  const [sortBy, setSortBy] = useState<SortOption>('trade-date');\n  \n  const sortedTrades = useMemo(() => {\n    return [...trades].sort((a, b) => {\n      switch (sortBy) {\n        case 'trade-date': {\n          // Sort by timestamp (most recent first)\n          const dateA = parseTimestampFromData(a.timestamp);\n          const dateB = parseTimestampFromData(b.timestamp);\n          if (!dateA || !dateB) return 0;\n          return dateB.getTime() - dateA.getTime();\n        }\n        case 'expiry-date': {\n          // Sort by expiry date (earliest first)\n          const expiryA = new Date(a.expiry);\n          const expiryB = new Date(b.expiry);\n          return expiryA.getTime() - expiryB.getTime();\n        }\n        case 'size': {\n          // Sort by volume (largest first)\n          return b.volume - a.volume;\n        }\n        default:\n          return 0;\n      }\n    });\n  }, [trades, sortBy]);\n\n  const filteredTrades = useMemo(() => {\n    if (!expiry) return sortedTrades;\n    return sortedTrades.filter(trade => trade.expiry === expiry);\n  }, [sortedTrades, expiry]);\n\n  if (filteredTrades.length === 0) {\n    return (\n      <div className=\"trade-list\">\n        <div className=\"trade-list-header\">\n          <h3>{ticker} Trade History</h3>\n          {expiry && <span className=\"expiry-filter\">Filtered by: {new Date(expiry).toLocaleDateString()}</span>}\n        </div>\n        <div className=\"no-trades\">\n          <p>No trades found for {ticker}{expiry ? ` on ${new Date(expiry).toLocaleDateString()}` : ''}</p>\n        </div>\n      </div>\n    );\n  }\n\n  const getTradeKey = useCallback((trade: OptionData, index: number) => \n    `${trade.ticker}-${trade.strike}-${trade.expiry}-${trade.timestamp}-${index}`,\n    []\n  );\n\n  return (\n    <div className=\"trade-list\">\n      <div className=\"trade-list-header\">\n        <div className=\"header-left\">\n          <h3>{ticker} Trade History</h3>\n          {expiry && <span className=\"expiry-filter\">Filtered by: {new Date(expiry).toLocaleDateString()}</span>}\n        </div>\n        <div className=\"header-right\">\n          <div className=\"sort-controls\">\n            <ArrowUpDown className=\"sort-icon\" />\n            <select \n              className=\"sort-selector\"\n              value={sortBy}\n              onChange={(e) => setSortBy(e.target.value as SortOption)}\n            >\n              <option value=\"trade-date\">Sort by Trade Date (Recent First)</option>\n              <option value=\"expiry-date\">Sort by Expiry Date (Earliest First)</option>\n              <option value=\"size\">Sort by Size (Largest First)</option>\n            </select>\n          </div>\n          <div className=\"trade-count\">{filteredTrades.length} trades</div>\n        </div>\n      </div>\n      \n      <div className=\"trade-list-content\">\n        <div className=\"trade-list-table\">\n          <div className=\"trade-table-header\">\n            <div className=\"header-cell\">Symbol</div>\n            <div className=\"header-cell\">Strike</div>\n            <div className=\"header-cell\">Expiration</div>\n            <div className=\"header-cell\">Call/Put</div>\n            <div className=\"header-cell\">Side</div>\n            <div className=\"header-cell\">Size</div>\n            <div className=\"header-cell\">Premium</div>\n            <div className=\"header-cell\">Volume</div>\n            <div className=\"header-cell\">OI</div>\n            <div className=\"header-cell\">Exec Time</div>\n          </div>\n          \n          <div className=\"trade-table-body\">\n            {filteredTrades.map((trade, index) => (\n              <TradeRow key={getTradeKey(trade, index)} trade={trade} index={index} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nTradeList.displayName = 'TradeList';\n\nexport default TradeList;\n","import React, { useMemo } from 'react';\nimport { OptionData } from '../utils/dataParser';\n\n// Import the parsePremium function from dataParser\nfunction parsePremium(premium: string): number {\n  const hasK = premium.includes('K');\n  const hasM = premium.includes('M');\n  \n  const cleanPremium = premium.replace(/[$,]/g, '');\n  const num = parseFloat(cleanPremium);\n  \n  if (hasM) {\n    return num * 1000000;\n  } else if (hasK) {\n    return num * 1000;\n  }\n  \n  return num;\n}\n\ninterface StrikeExpiryHeatmapProps {\n  trades: OptionData[];\n  currentPrice?: number;\n}\n\ninterface HeatmapCell {\n  value: number;\n  volume: number;\n  callVolume: number;\n  putVolume: number;\n  trades: number;\n}\n\nconst StrikeExpiryHeatmap: React.FC<StrikeExpiryHeatmapProps> = ({ trades, currentPrice }) => {\n  const { heatmapData, strikes, expiries, maxAbsValue } = useMemo(() => {\n    // Group trades by strike and expiry\n    const dataMap = new Map<string, HeatmapCell>();\n    const strikeSet = new Set<number>();\n    const expirySet = new Set<string>();\n\n    trades.forEach(trade => {\n      const key = `${trade.strike}_${trade.expiry}`;\n      strikeSet.add(trade.strike);\n      expirySet.add(trade.expiry);\n\n      if (!dataMap.has(key)) {\n        dataMap.set(key, {\n          value: 0,\n          volume: 0,\n          callVolume: 0,\n          putVolume: 0,\n          trades: 0\n        });\n      }\n\n      const cell = dataMap.get(key)!;\n      const totalValue = parsePremium(trade.premium);\n\n      // Debug logging for small values\n      if (Math.abs(totalValue) < 10 && trade.ticker === 'TSLA') {\n        console.log(`Small premium detected: ${trade.ticker} ${trade.strike} ${trade.expiry} ${trade.optionType} - Premium: \"${trade.premium}\" -> Parsed: ${totalValue}`);\n      }\n\n      // Aggregate based on option type\n      if (trade.optionType === 'Call') {\n        cell.value += totalValue;\n        cell.callVolume += trade.volume;\n      } else {\n        cell.value -= totalValue; // Puts are negative\n        cell.putVolume += trade.volume;\n      }\n\n      cell.volume += trade.volume;\n      cell.trades += 1;\n    });\n\n    // Sort strikes and expiries\n    const sortedStrikes = Array.from(strikeSet).sort((a, b) => b - a); // Descending\n    const sortedExpiries = Array.from(expirySet).sort((a, b) => {\n      const dateA = new Date(a);\n      const dateB = new Date(b);\n      return dateA.getTime() - dateB.getTime();\n    });\n\n    // Find max absolute value for color scaling\n    let maxAbs = 0;\n    dataMap.forEach(cell => {\n      const absValue = Math.abs(cell.value);\n      if (absValue > maxAbs) maxAbs = absValue;\n    });\n\n    return {\n      heatmapData: dataMap,\n      strikes: sortedStrikes,\n      expiries: sortedExpiries,\n      maxAbsValue: maxAbs\n    };\n  }, [trades]);\n\n  const getColor = (value: number, volume: number) => {\n    if (volume === 0) return 'rgba(255, 255, 255, 0.03)';\n    \n    const intensity = Math.abs(value) / maxAbsValue;\n    const alpha = 0.2 + (intensity * 0.6); // Range from 0.2 to 0.8\n\n    if (value > 0) {\n      // Positive (Calls) - Green\n      return `rgba(76, 175, 80, ${alpha})`;\n    } else {\n      // Negative (Puts) - Red\n      return `rgba(244, 67, 54, ${alpha})`;\n    }\n  };\n\n  const formatValue = (value: number): string => {\n    const absValue = Math.abs(value);\n    if (absValue >= 1000000) {\n      return `${value >= 0 ? '' : '-'}$${(absValue / 1000000).toFixed(1)}M`;\n    } else if (absValue >= 1000) {\n      return `${value >= 0 ? '' : '-'}$${(absValue / 1000).toFixed(1)}K`;\n    } else if (absValue >= 1) {\n      return `${value >= 0 ? '' : '-'}$${absValue.toFixed(0)}`;\n    } else {\n      // For very small values, show more precision\n      return `${value >= 0 ? '' : '-'}$${absValue.toFixed(2)}`;\n    }\n  };\n\n  const isCurrentPriceStrike = (strike: number): boolean => {\n    if (!currentPrice) return false;\n    return Math.abs(strike - currentPrice) < 2; // Within $2\n  };\n\n  const getCellKey = (strike: number, expiry: string) => `${strike}_${expiry}`;\n\n  // Check if we have any data to display\n  const hasData = strikes.length > 0 && expiries.length > 0;\n\n  return (\n    <div className=\"strike-expiry-heatmap\">\n      <div className=\"heatmap-header\">\n        <h3>Strike × Expiry Premium Heatmap</h3>\n        <div className=\"heatmap-legend\">\n          <div className=\"legend-item\">\n            <div className=\"legend-color\" style={{ background: 'rgba(76, 175, 80, 0.6)' }}></div>\n            <span>Call Premium</span>\n          </div>\n          <div className=\"legend-item\">\n            <div className=\"legend-color\" style={{ background: 'rgba(244, 67, 54, 0.6)' }}></div>\n            <span>Put Premium</span>\n          </div>\n          {currentPrice && (\n            <div className=\"legend-item\">\n              <div className=\"legend-color\" style={{ background: 'rgba(255, 193, 7, 0.4)', border: '2px solid #ffc107' }}></div>\n              <span>Current Price (~${currentPrice.toFixed(2)})</span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"heatmap-scroll-container\">\n        {hasData ? (\n          <table className=\"heatmap-table\">\n            <thead>\n              <tr>\n                <th className=\"heatmap-corner\">Strike</th>\n                {expiries.map(expiry => (\n                  <th key={expiry} className=\"heatmap-expiry\">\n                    {new Date(expiry).toLocaleDateString('en-US', { \n                      month: '2-digit', \n                      day: '2-digit',\n                      year: '2-digit'\n                    })}\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {strikes.map(strike => {\n                const isAtMoney = isCurrentPriceStrike(strike);\n                return (\n                  <tr key={strike} className={isAtMoney ? 'current-price-row' : ''}>\n                    <td className={`heatmap-strike ${isAtMoney ? 'at-money' : ''}`}>\n                      {strike.toFixed(1)}\n                      {isAtMoney && <span className=\"atm-indicator\">▶</span>}\n                    </td>\n                    {expiries.map(expiry => {\n                      const cell = heatmapData.get(getCellKey(strike, expiry));\n                      const hasData = cell && cell.volume > 0;\n                      \n                      return (\n                        <td\n                          key={`${strike}_${expiry}`}\n                          className={`heatmap-cell ${hasData ? 'has-data' : ''} ${isAtMoney ? 'at-money-cell' : ''}`}\n                          style={{\n                            background: hasData ? getColor(cell!.value, cell!.volume) : undefined\n                          }}\n                          title={hasData ? \n                            `Strike: $${strike}\\nExpiry: ${expiry}\\nNet Premium: ${formatValue(cell!.value)}\\nVolume: ${cell!.volume}\\nCalls: ${cell!.callVolume}\\nPuts: ${cell!.putVolume}\\nTrades: ${cell!.trades}` \n                            : undefined\n                          }\n                        >\n                          {hasData && (\n                            <div className=\"cell-content\">\n                              <span className=\"cell-value\">{formatValue(cell!.value)}</span>\n                            </div>\n                          )}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        ) : (\n          <div className=\"heatmap-no-data\">\n            <p>No heatmap data available</p>\n            <p>Select a ticker with options data to view the heatmap</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default StrikeExpiryHeatmap;\n\n","/**\n * File loading utilities for handling multiple CSV files\n */\n\nexport interface FileInfo {\n  filename: string;\n  timestamp: Date;\n  size: number;\n}\n\nexport interface LoadedFileData {\n  filename: string;\n  timestamp: Date;\n  data: string;\n  error?: string;\n}\n\n/**\n * Parse timestamp from filename\n * Expected format: options_data_YYYY-MM-DD_HH-MM.csv or darkpool_data_YYYY-MM-DD_HH-MM.csv\n */\nexport function parseTimestampFromFilename(filename: string): Date | null {\n  try {\n    // Extract timestamp from filename: options_data_2024-01-15_10-00.csv, option_data_2025-10-17_15-45.csv, or darkpool_data_2025-10-17_15-00.csv\n    const match = filename.match(/(?:options_data|option_data|darkpool_data)_(\\d{4}-\\d{2}-\\d{2})_(\\d{2}-\\d{2})\\.csv/);\n    if (!match) return null;\n    \n    const [, dateStr, timeStr] = match;\n    const [year, month, day] = dateStr.split('-').map(Number);\n    const [hour, minute] = timeStr.split('-').map(Number);\n    \n    return new Date(year, month - 1, day, hour, minute);\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.warn(`Failed to parse timestamp from filename: ${filename}`, error);\n    }\n    return null;\n  }\n}\n\n/**\n * Get all CSV files from the data directory\n */\nexport async function getDataFiles(): Promise<FileInfo[]> {\n  // Use hardcoded list of available files for now\n  const knownFiles = [\n    'options_data_2025-10-20_16-00.csv',\n    'options_data_2025-10-17_15-45.csv',\n    'options_data_2025-10-15_TSLA.csv',\n    'options_data_2025-10-16_16-00.csv',\n    'options_data_2025-10-16_15-00.csv',\n    'options_data_2025-10-16_12-00.csv',\n    'options_data_2025-10-16_10-30.csv',\n    'options_data_2025-10-15_16-00.csv',\n    'options_data_2025-10-15_14-00.csv',\n    'options_data_2025-10-15_11-30.csv',\n    'options_data_2025-10-15_10-00.csv',\n    'options_data_2025-10-14_16-00.csv',\n    'options_data_2025-10-14_15-00.csv',\n    'options_data_2025-10-14_11-00.csv',\n    'options_data_2025-10-14_01-00.csv',\n    'options_data_2025-10-13_13-20.csv',\n    'options_data_2025-10-13_13-00.csv',\n    'options_data_2025-10-13_10-50.csv',\n    'options_data_2025-10-13_10-00.csv',\n    'options_data_2025-10-13_05-30.csv',\n    'options_data_2024-01-15_16-00.csv',\n    'options_data_2024-01-15_11-30.csv',\n    'options_data_2024-01-15_11-00.csv',\n    'options_data_2024-01-15_10-00.csv',\n    'options_data_2024-01-15_02-30.csv'\n  ];\n\n  return knownFiles.map(filename => ({\n    filename,\n    timestamp: parseTimestampFromFilename(filename) || new Date(),\n    size: 0 // Will be updated when file is loaded\n  })).sort((a: FileInfo, b: FileInfo) => \n    b.timestamp.getTime() - a.timestamp.getTime() // Most recent first\n  );\n}\n\n/**\n * Get all dark pool CSV files from the data directory\n */\nexport async function getDarkPoolDataFiles(): Promise<FileInfo[]> {\n  // Use hardcoded list of available dark pool files for now\n  const knownDarkPoolFiles = [\n    'darkpool_data_2025-10-17_15-00.csv'\n  ];\n\n  return knownDarkPoolFiles.map(filename => ({\n    filename,\n    timestamp: parseTimestampFromFilename(filename) || new Date(),\n    size: 0 // Will be updated when file is loaded\n  })).sort((a: FileInfo, b: FileInfo) => \n    b.timestamp.getTime() - a.timestamp.getTime() // Most recent first\n  );\n}\n\n/**\n * Load a single CSV file with cache busting\n */\nexport async function loadCSVFile(filename: string, bustCache: boolean = false): Promise<LoadedFileData> {\n  try {\n    // Add cache-busting query parameter to force fresh load\n    const cacheBuster = bustCache ? `?t=${Date.now()}` : '';\n    const baseUrl = import.meta.env.BASE_URL;\n    const response = await fetch(`${baseUrl}data/${filename}${cacheBuster}`, {\n      cache: bustCache ? 'no-store' : 'default',\n      headers: {\n        'Cache-Control': bustCache ? 'no-cache, no-store, must-revalidate' : 'default',\n        'Pragma': bustCache ? 'no-cache' : 'default'\n      }\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Failed to load ${filename}: ${response.status} ${response.statusText}`);\n    }\n    \n    const data = await response.text();\n    const timestamp = parseTimestampFromFilename(filename);\n    \n    return {\n      filename,\n      timestamp: timestamp || new Date(),\n      data\n    };\n  } catch (error) {\n    return {\n      filename,\n      timestamp: new Date(),\n      data: '',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    };\n  }\n}\n\n// Cache for loaded files to avoid re-fetching\nconst fileCache = new Map<string, { data: LoadedFileData; timestamp: number }>();\nconst darkPoolFileCache = new Map<string, { data: LoadedFileData; timestamp: number }>();\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\n/**\n * Load all CSV files from the data directory with caching\n */\nexport async function loadAllDataFiles(bustCache: boolean = false): Promise<LoadedFileData[]> {\n  try {\n    const files = await getDataFiles();\n    const now = Date.now();\n    \n    // If busting cache, skip cache check and load all files fresh\n    if (bustCache) {\n      if (import.meta.env.DEV) {\n        console.log('🔄 Cache busting enabled - loading all files fresh...');\n      }\n      const loadPromises = files.map(file => loadCSVFile(file.filename, true));\n      const results = await Promise.all(loadPromises);\n      \n      // Update cache with fresh data\n      results.forEach(result => {\n        if (!result.error) {\n          fileCache.set(result.filename, { data: result, timestamp: now });\n        }\n      });\n      \n      const successful = results.filter(result => !result.error);\n      if (import.meta.env.DEV) {\n        console.log(`✓ Loaded ${successful.length} files fresh (cache bypassed)`);\n      }\n      return successful;\n    }\n    \n    // Normal caching behavior\n    const cachedResults: LoadedFileData[] = [];\n    const filesToLoad: string[] = [];\n    \n    files.forEach(file => {\n      const cached = fileCache.get(file.filename);\n      if (cached && (now - cached.timestamp) < CACHE_DURATION) {\n        cachedResults.push(cached.data);\n      } else {\n        filesToLoad.push(file.filename);\n      }\n    });\n    \n    // Load only uncached files\n    let newResults: LoadedFileData[] = [];\n    if (filesToLoad.length > 0) {\n      const loadPromises = filesToLoad.map(filename => loadCSVFile(filename, false));\n      newResults = await Promise.all(loadPromises);\n      \n      // Update cache\n      newResults.forEach(result => {\n        if (!result.error) {\n          fileCache.set(result.filename, { data: result, timestamp: now });\n        }\n      });\n    }\n    \n    const allResults = [...cachedResults, ...newResults];\n    \n    // Filter out files with errors and log them\n    const successful = allResults.filter(result => !result.error);\n    const failed = allResults.filter(result => result.error);\n    \n    if (import.meta.env.DEV && failed.length > 0) {\n      console.warn('Failed to load some data files:', failed);\n    }\n    \n    if (import.meta.env.DEV) {\n      console.log(`Successfully loaded ${successful.length} data files (${cachedResults.length} cached, ${newResults.filter(r => !r.error).length} new)`);\n    }\n    return successful;\n  } catch (error) {\n    console.error('Failed to load data files:', error);\n    return [];\n  }\n}\n\n/**\n * Load all dark pool CSV files from the data directory with caching\n */\nexport async function loadAllDarkPoolDataFiles(bustCache: boolean = false): Promise<LoadedFileData[]> {\n  try {\n    const files = await getDarkPoolDataFiles();\n    const now = Date.now();\n    \n    // If busting cache, skip cache check and load all files fresh\n    if (bustCache) {\n      if (import.meta.env.DEV) {\n        console.log('🔄 Cache busting enabled - loading all dark pool files fresh...');\n      }\n      const loadPromises = files.map(file => loadCSVFile(file.filename, true));\n      const results = await Promise.all(loadPromises);\n      \n      // Update dark pool cache with fresh data\n      results.forEach(result => {\n        if (!result.error) {\n          darkPoolFileCache.set(result.filename, { data: result, timestamp: now });\n        }\n      });\n      \n      const successful = results.filter(result => !result.error);\n      if (import.meta.env.DEV) {\n        console.log(`✓ Loaded ${successful.length} dark pool files fresh (cache bypassed)`);\n      }\n      return successful;\n    }\n    \n    // Normal caching behavior\n    const cachedResults: LoadedFileData[] = [];\n    const filesToLoad: string[] = [];\n    \n    files.forEach(file => {\n      const cached = darkPoolFileCache.get(file.filename);\n      if (cached && (now - cached.timestamp) < CACHE_DURATION) {\n        cachedResults.push(cached.data);\n      } else {\n        filesToLoad.push(file.filename);\n      }\n    });\n    \n    // Load only uncached files\n    let newResults: LoadedFileData[] = [];\n    if (filesToLoad.length > 0) {\n      const loadPromises = filesToLoad.map(filename => loadCSVFile(filename, false));\n      newResults = await Promise.all(loadPromises);\n      \n      // Update dark pool cache\n      newResults.forEach(result => {\n        if (!result.error) {\n          darkPoolFileCache.set(result.filename, { data: result, timestamp: now });\n        }\n      });\n    }\n    \n    const allResults = [...cachedResults, ...newResults];\n    \n    // Filter out files with errors and log them\n    const successful = allResults.filter(result => !result.error);\n    const failed = allResults.filter(result => result.error);\n    \n    if (import.meta.env.DEV && failed.length > 0) {\n      console.warn('Failed to load some dark pool data files:', failed);\n    }\n    \n    if (import.meta.env.DEV) {\n      console.log(`Successfully loaded ${successful.length} dark pool data files (${cachedResults.length} cached, ${newResults.filter(r => !r.error).length} new)`);\n    }\n    return successful;\n  } catch (error) {\n    console.error('Failed to load dark pool data files:', error);\n    return [];\n  }\n}\n\n/**\n * Clear the file cache\n */\nexport function clearFileCache(): void {\n  fileCache.clear();\n}\n\n/**\n * Clear the dark pool file cache\n */\nexport function clearDarkPoolFileCache(): void {\n  darkPoolFileCache.clear();\n}\n\n/**\n * Preload data files in the background\n */\nexport function preloadDataFiles(): Promise<LoadedFileData[]> {\n  return loadAllDataFiles();\n}\n\n/**\n * Generate filename for new data file based on current timestamp\n */\nexport function generateDataFilename(date: Date = new Date()): string {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  const hour = String(date.getHours()).padStart(2, '0');\n  const minute = String(date.getMinutes()).padStart(2, '0');\n  \n  return `options_data_${year}-${month}-${day}_${hour}-${minute}.csv`;\n}\n\n/**\n * Get the most recent data file timestamp\n */\nexport function getMostRecentTimestamp(files: FileInfo[]): Date | null {\n  if (files.length === 0) return null;\n  \n  return files.reduce((latest, file) => \n    file.timestamp > latest ? file.timestamp : latest, \n    files[0].timestamp\n  );\n}\n\n/**\n * Get files from the last N hours\n */\nexport function getRecentFiles(files: FileInfo[], hours: number = 24): FileInfo[] {\n  const cutoff = new Date(Date.now() - hours * 60 * 60 * 1000);\n  return files.filter(file => file.timestamp >= cutoff);\n}\n","\n/**\n * Fetch current stock price using multiple data sources\n * Priority: Finnhub (real-time NASDAQ) → Yahoo Finance (fallback)\n * \n * To use Finnhub API (optional, for better NASDAQ data):\n * 1. Get free API key from https://finnhub.io/\n * 2. Create .env file: VITE_FINNHUB_API_KEY=your_key_here\n */\nexport async function fetchStockPrice(ticker: string): Promise<number | null> {\n  // Try Finnhub API first if API key is available (best for NASDAQ real-time data)\n  const finnhubApiKey = import.meta.env.VITE_FINNHUB_API_KEY;\n  \n  if (finnhubApiKey) {\n    try {\n      const finnhubUrl = `https://finnhub.io/api/v1/quote?symbol=${ticker}&token=${finnhubApiKey}`;\n      \n      const response = await fetch(finnhubUrl);\n      \n      if (response.ok) {\n        const data = await response.json();\n        const currentPrice = data?.c; // 'c' is current price in Finnhub API\n        \n        if (currentPrice && typeof currentPrice === 'number' && currentPrice > 0) {\n          if (import.meta.env.DEV) {\n            console.log(`✓ Fetched price from Finnhub (NASDAQ) for ${ticker}: $${currentPrice}`);\n          }\n          return currentPrice;\n        }\n      }\n    } catch (error) {\n      if (import.meta.env.DEV) {\n        console.warn(`Finnhub API failed for ${ticker}, trying fallback:`, error);\n      }\n    }\n  }\n\n  // Fallback to Yahoo Finance API with CORS proxy\n  try {\n    // Try direct Yahoo Finance API first\n    let yahooUrl = `https://query1.finance.yahoo.com/v8/finance/chart/${ticker}?interval=1d&range=1d`;\n    let response = await fetch(yahooUrl, { \n      mode: 'cors',\n      headers: {\n        'Accept': 'application/json',\n      }\n    });\n    \n    // If CORS fails, try with CORS proxy\n    if (!response.ok || response.status === 0) {\n      if (import.meta.env.DEV) {\n        console.log(`Yahoo Finance direct access failed, trying CORS proxy...`);\n      }\n      \n      // Use allorigins.win as CORS proxy (free, no auth)\n      const proxyUrl = `https://api.allorigins.win/raw?url=${encodeURIComponent(yahooUrl)}`;\n      response = await fetch(proxyUrl);\n    }\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    // Extract current price from the response\n    const currentPrice = data?.chart?.result?.[0]?.meta?.regularMarketPrice;\n    \n    if (currentPrice && typeof currentPrice === 'number') {\n      if (import.meta.env.DEV) {\n        console.log(`✓ Fetched price from Yahoo Finance for ${ticker}: $${currentPrice}`);\n      }\n      return currentPrice;\n    }\n    \n    return null;\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.error(`❌ All APIs failed to fetch stock price for ${ticker}:`, error);\n      console.log(`💡 Solution: Add Finnhub API key to .env file (see README.md)`);\n    }\n    return null;\n  }\n}\n\n/**\n * Cache for stock prices to avoid excessive API calls\n */\nconst priceCache = new Map<string, { price: number; timestamp: number }>();\nconst CACHE_DURATION = 900000; // 15 minutes cache (15 * 60 * 1000)\n\n/**\n * Get real-time stock price with intelligent caching\n * Only fetches from API if price wasn't checked in the last 15 minutes\n */\nexport async function getCurrentPrice(\n  ticker: string\n): Promise<{\n  price: number | null;\n  source: 'api' | 'none';\n  cached: boolean;\n}> {\n  const cached = priceCache.get(ticker);\n  const now = Date.now();\n  \n  // Return cached price if it's less than 15 minutes old\n  if (cached && (now - cached.timestamp) < CACHE_DURATION) {\n    if (import.meta.env.DEV) {\n      const minutesAgo = Math.floor((now - cached.timestamp) / 60000);\n      console.log(`Using cached price for ${ticker} (${minutesAgo} min old): $${cached.price}`);\n    }\n    return { price: cached.price, source: 'api', cached: true };\n  }\n  \n  // Fetch new price from API\n  const apiPrice = await fetchStockPrice(ticker);\n  \n  if (apiPrice !== null) {\n    priceCache.set(ticker, { price: apiPrice, timestamp: now });\n    if (import.meta.env.DEV) {\n      console.log(`Fetched fresh price for ${ticker}: $${apiPrice}`);\n    }\n    return { price: apiPrice, source: 'api', cached: false };\n  }\n\n  return { price: null, source: 'none', cached: false };\n}\n\nexport async function getCachedStockPrice(ticker: string): Promise<number | null> {\n  const result = await getCurrentPrice(ticker);\n  return result.price;\n}\n\n/**\n * Clear the price cache\n */\nexport function clearPriceCache(): void {\n  priceCache.clear();\n}\n\n","import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { ArrowLeft, Calendar, RefreshCw, Search } from 'lucide-react';\nimport TickerList from './TickerList';\nimport VolumeProfileChart from './VolumeProfileChart';\nimport TradeList from './TradeList';\nimport StrikeExpiryHeatmap from './StrikeExpiryHeatmap';\nimport { \n  mergeDataFromFiles,\n  getTickerSummaries, \n  getVolumeProfileForTicker, \n  getExpiryDatesForTicker,\n  getHighestVolumeData,\n  clearDataCache,\n  OptionData,\n  MergedDataInfo\n} from '../utils/dataParser';\nimport { loadAllDataFiles, clearFileCache } from '../utils/fileLoader';\nimport { getCurrentPrice, clearPriceCache } from '../utils/stockPrice';\n\n// We'll load the CSV data via fetch instead of import\n\nexport interface OptionsDashboardProps {\n  activeDashboard: 'options' | 'darkpool';\n  setActiveDashboard: (dashboard: 'options' | 'darkpool') => void;\n}\n\nconst OptionsDashboard: React.FC<OptionsDashboardProps> = ({ activeDashboard, setActiveDashboard }) => {\n  const [selectedTicker, setSelectedTicker] = useState<string | null>(null);\n  const [selectedExpiry, setSelectedExpiry] = useState<string | null>(null);\n  const [optionData, setOptionData] = useState<OptionData[]>([]);\n  const [dataInfo, setDataInfo] = useState<MergedDataInfo | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [currentPrice, setCurrentPrice] = useState<number | null>(null);\n  const [priceSource, setPriceSource] = useState<'api' | 'none'>('none');\n  const [isPriceCached, setIsPriceCached] = useState(false);\n  const [searchTerm, setSearchTerm] = useState<string>('');\n\n  useEffect(() => {\n    const loadAllData = async (bustCache: boolean = false) => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        // Load all CSV files from the data directory\n        const loadedFiles = await loadAllDataFiles(bustCache);\n        \n        if (loadedFiles.length === 0) {\n          throw new Error('No data files found in the data directory');\n        }\n        \n        // Merge data from all files\n        const { mergedData, info } = mergeDataFromFiles(\n          loadedFiles.map(file => ({\n            filename: file.filename,\n            data: file.data,\n            timestamp: file.timestamp\n          }))\n        );\n        \n        setOptionData(mergedData);\n        setDataInfo(info);\n        setLoading(false);\n        \n        if (import.meta.env.DEV) {\n          console.log(`Loaded ${info.totalFiles} files with ${info.totalRecords} total records`);\n        }\n      } catch (error) {\n        console.error('Error loading data files:', error);\n        setError(error instanceof Error ? error.message : 'Failed to load data');\n        setLoading(false);\n      }\n    };\n\n    loadAllData(false); // Normal load on mount\n  }, []);\n\n  const tickerSummaries = useMemo(() => {\n    return getTickerSummaries(optionData);\n  }, [optionData]);\n\n  const filteredTickerSummaries = useMemo(() => {\n    if (!searchTerm.trim()) {\n      return tickerSummaries;\n    }\n    \n    const searchLower = searchTerm.toLowerCase();\n    return tickerSummaries.filter(ticker => \n      ticker.ticker.toLowerCase().includes(searchLower)\n    );\n  }, [tickerSummaries, searchTerm]);\n\n\n  const expiryDates = useMemo(() => {\n    if (!selectedTicker) return [];\n    return getExpiryDatesForTicker(optionData, selectedTicker);\n  }, [optionData, selectedTicker]);\n\n  const volumeProfileData = useMemo(() => {\n    if (!selectedTicker) return [];\n    return getVolumeProfileForTicker(optionData, selectedTicker, selectedExpiry || undefined);\n  }, [optionData, selectedTicker, selectedExpiry]);\n\n  // Get filtered trades for the selected ticker and expiry\n  const filteredTrades = useMemo(() => {\n    if (!selectedTicker) return [];\n    return optionData.filter(trade => {\n      const matchesTicker = trade.ticker === selectedTicker;\n      const matchesExpiry = !selectedExpiry || trade.expiry === selectedExpiry;\n      return matchesTicker && matchesExpiry;\n    });\n  }, [optionData, selectedTicker, selectedExpiry]);\n\n  const highestVolumeData = useMemo(() => {\n    if (!selectedTicker) return null;\n    return getHighestVolumeData(optionData, selectedTicker, selectedExpiry || undefined);\n  }, [optionData, selectedTicker, selectedExpiry]);\n\n  const tickerTrades = useMemo(() => {\n    if (!selectedTicker) return [];\n    return optionData.filter(option => \n      option.ticker === selectedTicker && \n      (!selectedExpiry || option.expiry === selectedExpiry)\n    );\n  }, [optionData, selectedTicker, selectedExpiry]);\n\n  const handleTickerSelect = useCallback((ticker: string) => {\n    setSelectedTicker(ticker);\n    setSelectedExpiry(null); // Reset expiry selection when changing ticker\n  }, []);\n\n  const handleBackToList = useCallback(() => {\n    setSelectedTicker(null);\n    setSelectedExpiry(null);\n  }, []);\n\n  const handleExpirySelect = useCallback((expiry: string) => {\n    setSelectedExpiry(expiry === selectedExpiry ? null : expiry);\n  }, [selectedExpiry]);\n\n  const handleRefreshData = useCallback(async () => {\n    try {\n      console.log('🔄 Performing hard refresh for options data...');\n      \n      // Clear only options related caches\n      clearDataCache();      // Clear options parsed data cache\n      clearFileCache();      // Clear options file loading cache\n      clearPriceCache();     // Clear stock price cache (shared)\n      \n      console.log('✓ Options caches cleared');\n      console.log('🔄 Reloading options data with cache bypass...');\n      \n      setLoading(true);\n      setError(null);\n      \n      // Load all CSV files with cache busting enabled\n      const loadedFiles = await loadAllDataFiles(true);\n      \n      if (loadedFiles.length === 0) {\n        throw new Error('No data files found in the data directory');\n      }\n      \n      // Merge data from all files\n      const { mergedData, info } = mergeDataFromFiles(\n        loadedFiles.map(file => ({\n          filename: file.filename,\n          data: file.data,\n          timestamp: file.timestamp\n        }))\n      );\n      \n      setOptionData(mergedData);\n      setDataInfo(info);\n      \n      // Reset current price and reload it\n      setCurrentPrice(null);\n      setPriceSource('none');\n      setIsPriceCached(false);\n      \n      // Reload price if a ticker is selected\n      if (selectedTicker) {\n        const { price, source, cached } = await getCurrentPrice(selectedTicker);\n        setCurrentPrice(price);\n        setPriceSource(source);\n        setIsPriceCached(cached);\n      }\n      \n      setLoading(false);\n      \n      console.log('✓ Data reloaded successfully:', {\n        files: info.totalFiles,\n        records: info.totalRecords,\n        latestData: info.dateRange.latest\n      });\n    } catch (error) {\n      console.error('Error during hard refresh:', error);\n      setError(error instanceof Error ? error.message : 'Failed to refresh data');\n      setLoading(false);\n    }\n  }, [selectedTicker]);\n\n  // Fetch current stock price when ticker is selected (real-time API with 15min cache)\n  useEffect(() => {\n    if (!selectedTicker) {\n      setCurrentPrice(null);\n      setPriceSource('none');\n      setIsPriceCached(false);\n      return;\n    }\n\n    const fetchPrice = async () => {\n      const result = await getCurrentPrice(selectedTicker);\n      setCurrentPrice(result.price);\n      setPriceSource(result.source);\n      setIsPriceCached(result.cached);\n      \n      if (import.meta.env.DEV) {\n        console.log(`Stock price for ${selectedTicker}:`, result.price, `(source: ${result.source}, cached: ${result.cached})`);\n      }\n    };\n\n    fetchPrice();\n  }, [selectedTicker]);\n\n  if (loading) {\n    return (\n      <div className=\"dashboard-loading\">\n        <div className=\"loading-spinner\"></div>\n        <p>Loading options data from multiple files...</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"dashboard-error\">\n        <div className=\"error-icon\">⚠️</div>\n        <h3>Error Loading Data</h3>\n        <p>{error}</p>\n        <button \n          className=\"retry-button\" \n          onClick={() => window.location.reload()}\n        >\n          Retry\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"options-dashboard\">\n      {/* Compact Header with Data Summary */}\n      <header className=\"dashboard-header\">\n        <div className=\"header-left\">\n          <h1>Market Analysis Dashboard</h1>\n          {dataInfo && (\n            <div className=\"header-stats\">\n              <span className=\"header-stat\">{dataInfo.totalFiles} files</span>\n              <span className=\"stat-separator\">•</span>\n              <span className=\"header-stat\">{dataInfo.totalRecords.toLocaleString()} records</span>\n              <span className=\"stat-separator\">•</span>\n              <span className=\"header-stat\">{dataInfo.dateRange.latest?.toLocaleString() || ''}</span>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"header-right\">\n          {!selectedTicker && (\n            <div className=\"search-container-header\">\n              <Search className=\"search-icon\" />\n              <input\n                type=\"text\"\n                className=\"search-input\"\n                placeholder=\"Search tickers...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n              />\n              {searchTerm && (\n                <button \n                  className=\"clear-search\"\n                  onClick={() => setSearchTerm('')}\n                  title=\"Clear search\"\n                >\n                  ×\n                </button>\n              )}\n            </div>\n          )}\n          \n          <div className=\"nav-buttons\">\n            <button \n              className={`nav-button ${activeDashboard === 'options' ? 'active' : ''}`}\n              onClick={() => setActiveDashboard('options')}\n            >\n              Options Analysis\n            </button>\n            <button \n              className={`nav-button ${activeDashboard === 'darkpool' ? 'active' : ''}`}\n              onClick={() => setActiveDashboard('darkpool')}\n            >\n              Dark Pool Analysis\n            </button>\n          </div>\n          \n          <button \n            className=\"refresh-button-compact\" \n            onClick={handleRefreshData}\n            title=\"Hard Refresh - Clears all caches and reloads data from files\"\n          >\n            <RefreshCw className=\"refresh-icon\" />\n            Hard Refresh\n          </button>\n        </div>\n      </header>\n\n      {!selectedTicker ? (\n        <TickerList \n          tickers={filteredTickerSummaries} \n          onTickerSelect={handleTickerSelect}\n          allData={optionData}\n        />\n      ) : (\n        <div className=\"ticker-detail-view\">\n          <div className=\"detail-header\">\n            <button className=\"back-button\" onClick={handleBackToList}>\n              <ArrowLeft className=\"back-icon\" />\n              Back to Ticker List\n            </button>\n            <h2>{selectedTicker} Options Analysis</h2>\n            {currentPrice && priceSource === 'api' ? (\n              <span className=\"current-price-badge\">\n                <span className=\"price-indicator\"></span>\n                Current Price: ${currentPrice.toFixed(2)}\n                <span className=\"price-status\">\n                  ({isPriceCached ? 'Cached' : 'Live'})\n                </span>\n              </span>\n            ) : (\n              <span className=\"price-unavailable\">\n                Price unavailable\n              </span>\n            )}\n          </div>\n\n          {/* Expiry Date Filter */}\n          <div className=\"expiry-filter\">\n            <div className=\"filter-header\">\n              <Calendar className=\"filter-icon\" />\n              <span>Filter by Expiry Date:</span>\n            </div>\n            <div className=\"expiry-buttons\">\n              <button \n                className={`expiry-button ${!selectedExpiry ? 'active' : ''}`}\n                onClick={() => setSelectedExpiry(null)}\n              >\n                All Expiries\n              </button>\n              {expiryDates.map((expiry) => (\n                <button\n                  key={expiry}\n                  className={`expiry-button ${selectedExpiry === expiry ? 'active' : ''}`}\n                  onClick={() => handleExpirySelect(expiry)}\n                >\n                  {new Date(expiry).toLocaleDateString()}\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* Charts Section - Two Column Layout */}\n          <div className=\"charts-section\">\n            {/* Left Column - Call/Put Volume Chart */}\n            <div className=\"chart-column\">\n              <VolumeProfileChart \n                data={volumeProfileData}\n                highestVolumeData={highestVolumeData}\n                ticker={selectedTicker}\n                expiry={selectedExpiry || undefined}\n                chartType=\"callput\"\n                currentPrice={currentPrice || undefined}\n                trades={filteredTrades}\n              />\n            </div>\n            \n            {/* Right Column - Total Volume Chart */}\n            <div className=\"chart-column\">\n              <VolumeProfileChart \n                data={volumeProfileData}\n                highestVolumeData={highestVolumeData}\n                ticker={selectedTicker}\n                expiry={selectedExpiry || undefined}\n                chartType=\"total\"\n                currentPrice={currentPrice || undefined}\n                trades={filteredTrades}\n              />\n            </div>\n          </div>\n\n          {/* Summary Statistics */}\n          <div className=\"summary-stats\">\n            <div className=\"stat-card\">\n              <h4>Total Volume</h4>\n              <p>{volumeProfileData.reduce((sum, item) => sum + item.totalVolume, 0).toLocaleString()}</p>\n            </div>\n            <div className=\"stat-card\">\n              <h4>Call Volume</h4>\n              <p>{volumeProfileData.reduce((sum, item) => sum + item.callVolume, 0).toLocaleString()}</p>\n            </div>\n            <div className=\"stat-card\">\n              <h4>Put Volume</h4>\n              <p>{volumeProfileData.reduce((sum, item) => sum + item.putVolume, 0).toLocaleString()}</p>\n            </div>\n            <div className=\"stat-card\">\n              <h4>Open Interest</h4>\n              <p>{volumeProfileData.reduce((sum, item) => sum + item.openInterest, 0).toLocaleString()}</p>\n            </div>\n          </div>\n\n          {/* Heatmap & Trade History - Two Column Layout */}\n          <div className=\"heatmap-trades-section\">\n            {/* Left Column - Strike × Expiry Heatmap */}\n            <div className=\"heatmap-column\">\n              <StrikeExpiryHeatmap \n                trades={tickerTrades}\n                currentPrice={currentPrice || undefined}\n              />\n            </div>\n\n            {/* Right Column - Trade List */}\n            <div className=\"trades-column\">\n              <div className=\"trade-list-section\">\n                <h3>Trade History for {selectedTicker}</h3>\n                <p>Found {tickerTrades.length} trades</p>\n                <TradeList \n                  trades={tickerTrades}\n                  ticker={selectedTicker}\n                  expiry={selectedExpiry || undefined}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default OptionsDashboard;\n","import React, { memo, useState, useMemo } from 'react';\nimport { DarkPoolData } from '../utils/dataParser';\n\ninterface DarkPoolListProps {\n  trades: DarkPoolData[];\n  ticker?: string;\n}\n\ninterface DarkPoolRowProps {\n  trade: DarkPoolData;\n  volumeStats: {\n    mean: number;\n    stdDev: number;\n    q75: number;\n    q90: number;\n    q95: number;\n  };\n  valueStats: {\n    mean: number;\n    stdDev: number;\n    q75: number;\n    q90: number;\n    q95: number;\n  };\n}\n\nconst DarkPoolRow: React.FC<DarkPoolRowProps> = memo(({ trade, volumeStats, valueStats }) => {\n  const formatExecutionDateTime = (timestamp: string): string => {\n    try {\n      const date = new Date(timestamp);\n      return date.toLocaleString('en-US', {\n        month: '2-digit',\n        day: '2-digit',\n        year: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: true\n      });\n    } catch (error) {\n      return 'Unknown';\n    }\n  };\n\n  const formatQuantity = (quantity: number): string => {\n    if (quantity >= 1000000) {\n      return `${(quantity / 1000000).toFixed(1)}M`;\n    } else if (quantity >= 1000) {\n      return `${(quantity / 1000).toFixed(1)}K`;\n    }\n    return quantity.toLocaleString();\n  };\n\n  // Parse total value to check if it's a high-value trade\n  const parseTotalValue = (totalValue: string): number => {\n    const cleanValue = totalValue.replace(/[$,]/g, '');\n    const num = parseFloat(cleanValue);\n    \n    if (totalValue.includes('M')) {\n      return num * 1000000;\n    } else if (totalValue.includes('K')) {\n      return num * 1000;\n    }\n    return num;\n  };\n\n  const totalValue = parseTotalValue(trade.totalValue);\n  \n  // Determine color based on statistical analysis\n  const getRowColor = () => {\n    \n    // Unusual trades (top 10% in volume or value)\n    if (trade.quantity >= volumeStats.q90 || totalValue >= valueStats.q90) {\n      return 'rgba(0, 200, 0, 0.6)'; // Green for unusual trades\n    }\n    \n    // Default: White for all other trades\n    return 'rgba(255, 255, 255, 0.1)'; // White for normal trades\n  };\n\n  return (\n    <div \n      className=\"darkpool-row-horizontal\"\n      style={{\n        backgroundColor: getRowColor(),\n        borderLeft: trade.quantity >= volumeStats.q90 || totalValue >= valueStats.q90\n          ? '4px solid #00c800'\n          : 'none'\n      }}\n    >\n      <div className=\"darkpool-cell-h symbol\">{trade.ticker}</div>\n      <div className=\"darkpool-cell-h quantity\">{formatQuantity(trade.quantity)}</div>\n      <div className=\"darkpool-cell-h price\">${trade.price.toFixed(2)}</div>\n      <div className=\"darkpool-cell-h total-value\">{trade.totalValue}</div>\n      <div className=\"darkpool-cell-h exec-time\">{formatExecutionDateTime(trade.timestamp)}</div>\n    </div>\n  );\n});\n\nDarkPoolRow.displayName = 'DarkPoolRow';\n\ntype SortOption = 'timestamp' | 'quantity' | 'total-value' | 'price';\n\n// Helper function to calculate statistics\nconst calculateStats = (values: number[]) => {\n  const sorted = [...values].sort((a, b) => a - b);\n  const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n  const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length;\n  const stdDev = Math.sqrt(variance);\n  \n  const q75Index = Math.floor(sorted.length * 0.75);\n  const q90Index = Math.floor(sorted.length * 0.90);\n  const q95Index = Math.floor(sorted.length * 0.95);\n  \n  return {\n    mean,\n    stdDev,\n    q75: sorted[q75Index] || 0,\n    q90: sorted[q90Index] || 0,\n    q95: sorted[q95Index] || 0\n  };\n};\n\nconst DarkPoolList: React.FC<DarkPoolListProps> = memo(({ trades, ticker }) => {\n  const [sortBy, setSortBy] = useState<SortOption>('timestamp');\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');\n\n  // Calculate statistics for volume and value\n  const { volumeStats, valueStats } = useMemo(() => {\n    if (trades.length === 0) {\n      return {\n        volumeStats: { mean: 0, stdDev: 0, q75: 0, q90: 0, q95: 0 },\n        valueStats: { mean: 0, stdDev: 0, q75: 0, q90: 0, q95: 0 }\n      };\n    }\n\n    const volumes = trades.map(trade => trade.quantity);\n    const values = trades.map(trade => {\n      const cleanValue = trade.totalValue.replace(/[$,]/g, '');\n      const num = parseFloat(cleanValue);\n      \n      if (trade.totalValue.includes('M')) {\n        return num * 1000000;\n      } else if (trade.totalValue.includes('K')) {\n        return num * 1000;\n      }\n      return num;\n    });\n\n    return {\n      volumeStats: calculateStats(volumes),\n      valueStats: calculateStats(values)\n    };\n  }, [trades]);\n\n  const sortedTrades = useMemo(() => {\n    const sorted = [...trades].sort((a, b) => {\n      let comparison = 0;\n      \n      switch (sortBy) {\n        case 'timestamp':\n          comparison = new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime();\n          break;\n        case 'quantity':\n          comparison = a.quantity - b.quantity;\n          break;\n        case 'price':\n          comparison = a.price - b.price;\n          break;\n        case 'total-value':\n          const aValue = parseFloat(a.totalValue.replace(/[$,]/g, ''));\n          const bValue = parseFloat(b.totalValue.replace(/[$,]/g, ''));\n          comparison = aValue - bValue;\n          break;\n        default:\n          comparison = 0;\n      }\n      \n      return sortOrder === 'asc' ? comparison : -comparison;\n    });\n    \n    return sorted;\n  }, [trades, sortBy, sortOrder]);\n\n  const handleSort = (newSortBy: SortOption) => {\n    if (sortBy === newSortBy) {\n      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortBy(newSortBy);\n      setSortOrder('desc');\n    }\n  };\n\n  const getSortIcon = (column: SortOption) => {\n    if (sortBy !== column) return '↕️';\n    return sortOrder === 'asc' ? '↑' : '↓';\n  };\n\n  const totalValue = trades.reduce((sum, trade) => {\n    const value = parseFloat(trade.totalValue.replace(/[$,]/g, ''));\n    return sum + value;\n  }, 0);\n\n  const formatTotalValue = (value: number): string => {\n    if (value >= 1000000000) {\n      return `$${(value / 1000000000).toFixed(1)}B`;\n    } else if (value >= 1000000) {\n      return `$${(value / 1000000).toFixed(1)}M`;\n    } else if (value >= 1000) {\n      return `$${(value / 1000).toFixed(1)}K`;\n    }\n    return `$${value.toFixed(0)}`;\n  };\n\n  return (\n    <div className=\"darkpool-list-container\">\n      <div className=\"darkpool-list-header\">\n        <h3>Dark Pool Trades{ticker ? ` for ${ticker}` : ''}</h3>\n        <div className=\"darkpool-stats\">\n          <span className=\"stat-item\">\n            <strong>{trades.length}</strong> trades\n          </span>\n          <span className=\"stat-item\">\n            <strong>{formatTotalValue(totalValue)}</strong> total value\n          </span>\n        </div>\n      </div>\n      \n      {/* Color Legend */}\n      <div className=\"darkpool-legend\">\n        <div className=\"legend-title\">Trade Volume/Value Indicators:</div>\n        <div className=\"legend-items\">\n          <div className=\"legend-item\">\n            <div className=\"legend-color unusual\"></div>\n            <span>Unusual (Top 10%)</span>\n          </div>\n          <div className=\"legend-item\">\n            <div className=\"legend-color normal\"></div>\n            <span>Normal</span>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"darkpool-list-table\">\n        <div className=\"darkpool-header-row\">\n          <div \n            className=\"darkpool-header-cell symbol\"\n            onClick={() => handleSort('timestamp')}\n          >\n            Symbol {getSortIcon('timestamp')}\n          </div>\n          <div \n            className=\"darkpool-header-cell quantity\"\n            onClick={() => handleSort('quantity')}\n          >\n            Quantity {getSortIcon('quantity')}\n          </div>\n          <div \n            className=\"darkpool-header-cell price\"\n            onClick={() => handleSort('price')}\n          >\n            Price {getSortIcon('price')}\n          </div>\n          <div \n            className=\"darkpool-header-cell total-value\"\n            onClick={() => handleSort('total-value')}\n          >\n            Total Value {getSortIcon('total-value')}\n          </div>\n          <div \n            className=\"darkpool-header-cell exec-time\"\n            onClick={() => handleSort('timestamp')}\n          >\n            Execution Time {getSortIcon('timestamp')}\n          </div>\n        </div>\n        \n        <div className=\"darkpool-trades-container\">\n          {sortedTrades.map((trade, index) => (\n            <DarkPoolRow \n              key={`${trade.ticker}-${trade.timestamp}-${index}`} \n              trade={trade}\n              volumeStats={volumeStats}\n              valueStats={valueStats}\n            />\n          ))}\n        </div>\n      </div>\n      \n      {trades.length === 0 && (\n        <div className=\"no-trades-message\">\n          <p>No dark pool trades found{ticker ? ` for ${ticker}` : ''}.</p>\n        </div>\n      )}\n    </div>\n  );\n});\n\nDarkPoolList.displayName = 'DarkPoolList';\n\nexport default DarkPoolList;\n","import React, { memo, useMemo, useState } from 'react';\nimport { TrendingUp, TrendingDown, Calendar, Clock, ArrowUpDown, Target } from 'lucide-react';\nimport { DarkPoolData } from '../utils/dataParser';\n\ninterface DarkPoolTickerSummary {\n  ticker: string;\n  totalValue: number;\n  totalQuantity: number;\n  tradeCount: number;\n  averagePrice: number;\n  lastActivity: string;\n  maxTradeValue: number;\n  minTradeValue: number;\n  maxQuantity: number;\n  minQuantity: number;\n  avgTradeSize: number;\n  priceVolatility: number;\n  highestVolumePrice: number;\n  highestVolumeTime: string;\n  highestVolumeQuantity: number;\n}\n\ninterface DarkPoolTickerListProps {\n  tickers: DarkPoolTickerSummary[];\n  onTickerSelect: (ticker: string) => void;\n  allData: DarkPoolData[];\n}\n\ntype SortOption = 'recent' | 'oldest' | 'value-high' | 'value-low' | 'quantity-high' | 'quantity-low' | 'trades-high' | 'trades-low' | 'volume-high' | 'volume-low';\n\nconst formatDateTime = (timestamp: string): string => {\n  try {\n    const time = new Date(timestamp);\n    \n    // Check if the date is valid\n    if (isNaN(time.getTime())) {\n      return '';\n    }\n    \n    // Format as \"Oct 8, 2025 3:02 PM\"\n    return time.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric'\n    }) + ' ' + time.toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true\n    });\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.warn('Error parsing timestamp:', timestamp, error);\n    }\n    return '';\n  }\n};\n\nconst formatVolume = (volume: number): string => {\n  if (volume >= 1000000) {\n    return `${(volume / 1000000).toFixed(1)}M`;\n  } else if (volume >= 1000) {\n    return `${(volume / 1000).toFixed(1)}K`;\n  }\n  return volume.toString();\n};\n\nconst formatValue = (value: number): string => {\n  if (value >= 1000000000) {\n    return `$${(value / 1000000000).toFixed(1)}B`;\n  } else if (value >= 1000000) {\n    return `$${(value / 1000000).toFixed(1)}M`;\n  } else if (value >= 1000) {\n    return `$${(value / 1000).toFixed(1)}K`;\n  }\n  return `$${value.toFixed(2)}`;\n};\n\nconst DarkPoolTickerList: React.FC<DarkPoolTickerListProps> = memo(({ tickers, onTickerSelect, allData }) => {\n  const [sortBy, setSortBy] = useState<SortOption>('recent');\n\n  const sortedTickers = useMemo(() => {\n    const sorted = [...tickers];\n    \n    switch (sortBy) {\n      case 'recent':\n        return sorted.sort((a, b) => new Date(b.lastActivity).getTime() - new Date(a.lastActivity).getTime());\n      case 'oldest':\n        return sorted.sort((a, b) => new Date(a.lastActivity).getTime() - new Date(b.lastActivity).getTime());\n      case 'value-high':\n        return sorted.sort((a, b) => b.totalValue - a.totalValue);\n      case 'value-low':\n        return sorted.sort((a, b) => a.totalValue - b.totalValue);\n      case 'quantity-high':\n        return sorted.sort((a, b) => b.totalQuantity - a.totalQuantity);\n      case 'quantity-low':\n        return sorted.sort((a, b) => a.totalQuantity - b.totalQuantity);\n      case 'trades-high':\n        return sorted.sort((a, b) => b.tradeCount - a.tradeCount);\n      case 'trades-low':\n        return sorted.sort((a, b) => a.tradeCount - b.tradeCount);\n      case 'volume-high':\n        return sorted.sort((a, b) => b.highestVolumeQuantity - a.highestVolumeQuantity);\n      case 'volume-low':\n        return sorted.sort((a, b) => a.highestVolumeQuantity - b.highestVolumeQuantity);\n      default:\n        return sorted;\n    }\n  }, [tickers, sortBy]);\n\n  return (\n    <div className=\"ticker-list-container\">\n      <div className=\"ticker-list-header\">\n        <h2>Dark Pool Tickers</h2>\n        <p>Select a ticker to view detailed dark pool activity</p>\n        <div className=\"sort-controls\">\n          <ArrowUpDown className=\"sort-icon\" />\n          <select \n            className=\"sort-selector\"\n            value={sortBy}\n            onChange={(e) => setSortBy(e.target.value as SortOption)}\n          >\n            <option value=\"recent\">Most Recent</option>\n            <option value=\"oldest\">Oldest First</option>\n            <option value=\"value-high\">Value (High to Low)</option>\n            <option value=\"value-low\">Value (Low to High)</option>\n            <option value=\"quantity-high\">Quantity (High to Low)</option>\n            <option value=\"quantity-low\">Quantity (Low to High)</option>\n            <option value=\"trades-high\">Trades (High to Low)</option>\n            <option value=\"trades-low\">Trades (Low to High)</option>\n            <option value=\"volume-high\">High Volume (High to Low)</option>\n            <option value=\"volume-low\">High Volume (Low to High)</option>\n          </select>\n        </div>\n      </div>\n      \n      <div className=\"ticker-grid\">\n        {sortedTickers.map((ticker) => {\n          // Get the last trade for this ticker\n          const lastTrade = allData\n            .filter(trade => trade.ticker === ticker.ticker)\n            .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())[0];\n          \n          return (\n            <div \n              key={ticker.ticker} \n              className=\"ticker-card darkpool-card\"\n              onClick={() => onTickerSelect(ticker.ticker)}\n            >\n              <div className=\"ticker-header\">\n                <h3 className=\"ticker-symbol\">\n                  {ticker.ticker}\n                </h3>\n                <div className=\"ticker-metrics\">\n                  <div className=\"metric\">\n                    <TrendingUp className=\"metric-icon value\" />\n                    <span className=\"metric-label\">Total Value</span>\n                    <span className=\"metric-value\">{formatValue(ticker.totalValue)}</span>\n                  </div>\n                  <div className=\"metric\">\n                    <TrendingDown className=\"metric-icon quantity\" />\n                    <span className=\"metric-label\">Quantity</span>\n                    <span className=\"metric-value\">{formatVolume(ticker.totalQuantity)}</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"ticker-details\">\n                <div className=\"detail-row\">\n                  <span className=\"detail-label\">Total Trades:</span>\n                  <span className=\"detail-value\">{ticker.tradeCount}</span>\n                </div>\n                <div className=\"detail-row\">\n                  <span className=\"detail-label\">Avg Price:</span>\n                  <span className=\"detail-value\">${ticker.averagePrice.toFixed(2)}</span>\n                </div>\n                <div className=\"detail-row\">\n                  <Calendar className=\"detail-icon\" />\n                  <span className=\"detail-label\">Max Trade:</span>\n                  <span className=\"detail-value\">{formatValue(ticker.maxTradeValue)}</span>\n                </div>\n                {lastTrade && (\n                  <div className=\"detail-row last-trade-row\">\n                    <span className=\"detail-label\">Last Trade:</span>\n                    <span className=\"detail-value last-trade\">\n                      {formatValue(lastTrade.price * lastTrade.quantity)} \n                      <span className=\"trade-side\">\n                        {formatVolume(lastTrade.quantity)} @ ${lastTrade.price.toFixed(2)}\n                      </span>\n                    </span>\n                  </div>\n                )}\n              </div>\n              \n              {/* Analytics Section */}\n              <div className=\"ticker-analytics\">\n                <div className=\"analytics-badge key-levels-badge\">\n                  <Target size={12} />\n                  <span className=\"badge-label\">High Volume:</span>\n                  <span className=\"badge-strikes\">\n                    {formatVolume(ticker.highestVolumeQuantity)} @ ${ticker.highestVolumePrice.toFixed(2)}\n                  </span>\n                </div>\n                <div className=\"analytics-badge max-pain-badge\">\n                  <Clock size={12} />\n                  <span className=\"badge-label\">Peak Time:</span>\n                  <span className=\"badge-strikes\">\n                    {formatDateTime(ticker.highestVolumeTime)}\n                  </span>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n      \n      {sortedTickers.length === 0 && (\n        <div className=\"no-tickers\">\n          <p>No dark pool tickers found</p>\n        </div>\n      )}\n    </div>\n  );\n});\n\nDarkPoolTickerList.displayName = 'DarkPoolTickerList';\n\nexport default DarkPoolTickerList;\n","import React, { useMemo } from 'react';\nimport { DarkPoolData } from '../utils/dataParser';\n\ninterface DarkPoolTradeChartProps {\n  trades: DarkPoolData[];\n  ticker: string;\n}\n\ninterface ChartDataPoint {\n  price: number;\n  volume: number;\n  timestamp: string;\n  value: number;\n}\n\nconst DarkPoolTradeChart: React.FC<DarkPoolTradeChartProps> = ({ trades }) => {\n  const chartData = useMemo(() => {\n    if (!trades || trades.length === 0) return [];\n\n    // Sort trades by price for better visualization\n    const sortedTrades = [...trades].sort((a, b) => a.price - b.price);\n    \n    // Group trades by price ranges for better visualization\n    const priceGroups = new Map<number, ChartDataPoint>();\n    \n    sortedTrades.forEach(trade => {\n      const roundedPrice = Math.round(trade.price * 100) / 100; // Round to 2 decimal places\n      \n      if (priceGroups.has(roundedPrice)) {\n        const existing = priceGroups.get(roundedPrice)!;\n        existing.volume += trade.quantity;\n        existing.value += trade.price * trade.quantity;\n        // Keep the most recent timestamp for this price level\n        if (new Date(trade.timestamp) > new Date(existing.timestamp)) {\n          existing.timestamp = trade.timestamp;\n        }\n      } else {\n        priceGroups.set(roundedPrice, {\n          price: roundedPrice,\n          volume: trade.quantity,\n          timestamp: trade.timestamp,\n          value: trade.price * trade.quantity\n        });\n      }\n    });\n\n    return Array.from(priceGroups.values()).sort((a, b) => a.price - b.price);\n  }, [trades]);\n\n  const maxVolume = useMemo(() => {\n    return Math.max(...chartData.map(d => d.volume), 1);\n  }, [chartData]);\n\n\n  const formatVolume = (volume: number): string => {\n    if (volume >= 1000000) {\n      return `${(volume / 1000000).toFixed(1)}M`;\n    } else if (volume >= 1000) {\n      return `${(volume / 1000).toFixed(1)}K`;\n    }\n    return volume.toString();\n  };\n\n  const formatValue = (value: number): string => {\n    if (value >= 1000000000) {\n      return `$${(value / 1000000000).toFixed(1)}B`;\n    } else if (value >= 1000000) {\n      return `$${(value / 1000000).toFixed(1)}M`;\n    } else if (value >= 1000) {\n      return `$${(value / 1000).toFixed(1)}K`;\n    }\n    return `$${value.toFixed(2)}`;\n  };\n\n  const formatDateTime = (timestamp: string): string => {\n    try {\n      const time = new Date(timestamp);\n      if (isNaN(time.getTime())) return '';\n      \n      return time.toLocaleDateString('en-US', {\n        month: 'short',\n        day: 'numeric',\n        hour: 'numeric',\n        minute: '2-digit',\n        hour12: true\n      });\n    } catch (error) {\n      return '';\n    }\n  };\n\n  if (chartData.length === 0) {\n    return (\n      <div className=\"chart-container\">\n        <h3>Trade Distribution Chart</h3>\n        <div className=\"no-data\">No trade data available for charting</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"chart-container\">\n      \n      <div className=\"chart-content\">\n        <div className=\"chart-y-axis\">\n          <div className=\"y-label\">Volume</div>\n          <div className=\"y-scale\">\n            <div className=\"scale-value\">{formatVolume(maxVolume)}</div>\n            <div className=\"scale-value\">{formatVolume(maxVolume * 0.75)}</div>\n            <div className=\"scale-value\">{formatVolume(maxVolume * 0.5)}</div>\n            <div className=\"scale-value\">{formatVolume(maxVolume * 0.25)}</div>\n            <div className=\"scale-value\">0</div>\n          </div>\n        </div>\n        \n        <div className=\"chart-main\">\n          <div className=\"chart-bars\">\n            {chartData.map((dataPoint, index) => {\n              const height = (dataPoint.volume / maxVolume) * 100;\n              const isHighVolume = dataPoint.volume > maxVolume * 0.8;\n              \n              return (\n                <div\n                  key={`${dataPoint.price}-${index}`}\n                  className={`chart-bar ${isHighVolume ? 'high-volume' : ''}`}\n                  style={{ height: `${height}%` }}\n                  title={`Price: $${dataPoint.price.toFixed(2)}\nVolume: ${formatVolume(dataPoint.volume)}\nValue: ${formatValue(dataPoint.value)}\nTime: ${formatDateTime(dataPoint.timestamp)}`}\n                >\n                  <div className=\"bar-value\">{formatVolume(dataPoint.volume)}</div>\n                </div>\n              );\n            })}\n          </div>\n          \n          <div className=\"chart-x-axis\">\n            <div className=\"x-label\">Price ($)</div>\n            <div className=\"x-scale\">\n              {chartData.map((dataPoint, index) => {\n                return (\n                  <div key={`price-${index}`} className=\"x-tick\">\n                    <span className=\"price-label\">${dataPoint.price.toFixed(2)}</span>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DarkPoolTradeChart;\n","import React, { useMemo } from 'react';\nimport { DarkPoolData } from '../utils/dataParser';\n\ninterface DarkPoolTimeChartProps {\n  trades: DarkPoolData[];\n  ticker: string;\n}\n\ninterface TimeDataPoint {\n  time: string;\n  volume: number;\n  tradeCount: number;\n  avgPrice: number;\n  totalValue: number;\n}\n\nconst DarkPoolTimeChart: React.FC<DarkPoolTimeChartProps> = ({ trades }) => {\n  const chartData = useMemo(() => {\n    if (!trades || trades.length === 0) return [];\n\n    // Group trades by time periods (hourly)\n    const timeGroups = new Map<string, TimeDataPoint>();\n    \n    trades.forEach(trade => {\n      const date = new Date(trade.timestamp);\n      const timeKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')} ${String(date.getHours()).padStart(2, '0')}:00`;\n      \n      if (timeGroups.has(timeKey)) {\n        const existing = timeGroups.get(timeKey)!;\n        existing.volume += trade.quantity;\n        existing.tradeCount += 1;\n        existing.totalValue += trade.price * trade.quantity;\n        existing.avgPrice = existing.totalValue / existing.volume;\n      } else {\n        timeGroups.set(timeKey, {\n          time: timeKey,\n          volume: trade.quantity,\n          tradeCount: 1,\n          avgPrice: trade.price,\n          totalValue: trade.price * trade.quantity\n        });\n      }\n    });\n\n    return Array.from(timeGroups.values()).sort((a, b) => new Date(a.time).getTime() - new Date(b.time).getTime());\n  }, [trades]);\n\n  const maxVolume = useMemo(() => {\n    return Math.max(...chartData.map(d => d.volume), 1);\n  }, [chartData]);\n\n  const formatVolume = (volume: number): string => {\n    if (volume >= 1000000) {\n      return `${(volume / 1000000).toFixed(1)}M`;\n    } else if (volume >= 1000) {\n      return `${(volume / 1000).toFixed(1)}K`;\n    }\n    return volume.toString();\n  };\n\n  const formatValue = (value: number): string => {\n    if (value >= 1000000000) {\n      return `$${(value / 1000000000).toFixed(1)}B`;\n    } else if (value >= 1000000) {\n      return `$${(value / 1000000).toFixed(1)}M`;\n    } else if (value >= 1000) {\n      return `$${(value / 1000).toFixed(1)}K`;\n    }\n    return `$${value.toFixed(2)}`;\n  };\n\n  const formatDateTime = (timestamp: string): string => {\n    try {\n      const time = new Date(timestamp);\n      if (isNaN(time.getTime())) return '';\n      \n      const month = String(time.getMonth() + 1).padStart(2, '0');\n      const day = String(time.getDate()).padStart(2, '0');\n      const hour = String(time.getHours()).padStart(2, '0');\n      const minute = String(time.getMinutes()).padStart(2, '0');\n      \n      return `${month}/${day}-${hour}:${minute}`;\n    } catch (error) {\n      return '';\n    }\n  };\n\n  if (chartData.length === 0) {\n    return (\n      <div className=\"chart-container\">\n        <h3>Volume Over Time</h3>\n        <div className=\"no-data\">No trade data available for time analysis</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"chart-container\">\n      \n      <div className=\"chart-content\">\n        <div className=\"chart-y-axis\">\n          <div className=\"y-label\">Volume</div>\n          <div className=\"y-scale\">\n            <div className=\"scale-value\">{formatVolume(maxVolume)}</div>\n            <div className=\"scale-value\">{formatVolume(maxVolume * 0.75)}</div>\n            <div className=\"scale-value\">{formatVolume(maxVolume * 0.5)}</div>\n            <div className=\"scale-value\">{formatVolume(maxVolume * 0.25)}</div>\n            <div className=\"scale-value\">0</div>\n          </div>\n        </div>\n        \n        <div className=\"chart-main\">\n          <div className=\"chart-bars\">\n            {chartData.map((dataPoint, index) => {\n              const height = (dataPoint.volume / maxVolume) * 100;\n              const isHighVolume = dataPoint.volume > maxVolume * 0.8;\n              \n              return (\n                <div\n                  key={`${dataPoint.time}-${index}`}\n                  className={`chart-bar ${isHighVolume ? 'high-volume' : ''}`}\n                  style={{ height: `${height}%` }}\n                  title={`Time: ${formatDateTime(dataPoint.time)}\nVolume: ${formatVolume(dataPoint.volume)}\nTrades: ${dataPoint.tradeCount}\nAvg Price: $${dataPoint.avgPrice.toFixed(2)}\nTotal Value: ${formatValue(dataPoint.totalValue)}`}\n                >\n                  <div className=\"bar-value\">{formatVolume(dataPoint.volume)}</div>\n                </div>\n              );\n            })}\n          </div>\n          \n          <div className=\"chart-x-axis\">\n            <div className=\"x-label\">Time</div>\n            <div className=\"x-scale\">\n              {chartData.map((dataPoint, index) => {\n                return (\n                  <div key={`time-${index}`} className=\"x-tick\">\n                    <span className=\"time-label\">{formatDateTime(dataPoint.time)}</span>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DarkPoolTimeChart;\n","import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { ArrowLeft, RefreshCw, Search } from 'lucide-react';\nimport DarkPoolList from './DarkPoolList';\nimport DarkPoolTickerList from './DarkPoolTickerList';\nimport DarkPoolTradeChart from './DarkPoolTradeChart';\nimport DarkPoolTimeChart from './DarkPoolTimeChart';\nimport { \n  mergeDarkPoolDataFromFiles,\n  getDarkPoolTickerSummaries, \n  clearDarkPoolDataCache,\n  DarkPoolData,\n  MergedDataInfo\n} from '../utils/dataParser';\nimport { loadAllDarkPoolDataFiles, clearDarkPoolFileCache } from '../utils/fileLoader';\nimport { getCurrentPrice, clearPriceCache } from '../utils/stockPrice';\n\nexport interface DarkPoolDashboardProps {\n  activeDashboard: 'options' | 'darkpool';\n  setActiveDashboard: (dashboard: 'options' | 'darkpool') => void;\n}\n\nconst DarkPoolDashboard: React.FC<DarkPoolDashboardProps> = ({ activeDashboard, setActiveDashboard }) => {\n  const [selectedTicker, setSelectedTicker] = useState<string | null>(null);\n  const [darkPoolData, setDarkPoolData] = useState<DarkPoolData[]>([]);\n  const [dataInfo, setDataInfo] = useState<MergedDataInfo | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [currentPrice, setCurrentPrice] = useState<number | null>(null);\n  const [priceSource, setPriceSource] = useState<'api' | 'none'>('none');\n  const [isPriceCached, setIsPriceCached] = useState(false);\n  const [searchTerm, setSearchTerm] = useState<string>('');\n\n  useEffect(() => {\n    const loadAllData = async (bustCache: boolean = false) => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        // Load all dark pool CSV files from the data directory\n        const loadedFiles = await loadAllDarkPoolDataFiles(bustCache);\n        \n        if (loadedFiles.length === 0) {\n          throw new Error('No dark pool data files found in the data directory');\n        }\n        \n        // Merge data from all files\n        const { mergedData, info } = mergeDarkPoolDataFromFiles(\n          loadedFiles.map(file => ({\n            filename: file.filename,\n            data: file.data,\n            timestamp: file.timestamp\n          }))\n        );\n        \n        setDarkPoolData(mergedData);\n        setDataInfo(info);\n        setLoading(false);\n        \n        if (import.meta.env.DEV) {\n          console.log(`Loaded ${info.totalFiles} dark pool files with ${info.totalRecords} total records`);\n        }\n      } catch (error) {\n        console.error('Error loading dark pool data files:', error);\n        setError(error instanceof Error ? error.message : 'Failed to load dark pool data');\n        setLoading(false);\n      }\n    };\n\n    loadAllData(false); // Normal load on mount\n  }, []);\n\n  const tickerSummaries = useMemo(() => {\n    const summaries = getDarkPoolTickerSummaries(darkPoolData);\n    \n    // Transform to match the new structure\n    return summaries.map(summary => {\n      const tickerTrades = darkPoolData.filter(trade => trade.ticker === summary.ticker);\n      const quantities = tickerTrades.map(trade => trade.quantity);\n      const values = tickerTrades.map(trade => trade.price * trade.quantity);\n      const prices = tickerTrades.map(trade => trade.price);\n      \n      // Find the highest volume trade\n      const highestVolumeTrade = tickerTrades.reduce((max, trade) => \n        trade.quantity > max.quantity ? trade : max, tickerTrades[0]);\n      \n      // Calculate additional metrics\n      const avgTradeSize = summary.totalValue / summary.tradeCount;\n      const priceVolatility = prices.length > 1 ? \n        Math.sqrt(prices.reduce((acc, price) => acc + Math.pow(price - summary.averagePrice, 2), 0) / prices.length) : 0;\n      \n      return {\n        ticker: summary.ticker,\n        totalValue: summary.totalValue,\n        totalQuantity: summary.totalQuantity,\n        tradeCount: summary.tradeCount,\n        averagePrice: summary.averagePrice,\n        lastActivity: summary.lastActivity,\n        maxTradeValue: Math.max(...values),\n        minTradeValue: Math.min(...values),\n        maxQuantity: Math.max(...quantities),\n        minQuantity: Math.min(...quantities),\n        avgTradeSize: avgTradeSize,\n        priceVolatility: priceVolatility,\n        highestVolumePrice: highestVolumeTrade?.price || 0,\n        highestVolumeTime: highestVolumeTrade?.timestamp || '',\n        highestVolumeQuantity: highestVolumeTrade?.quantity || 0\n      };\n    });\n  }, [darkPoolData]);\n\n  const filteredTickerSummaries = useMemo(() => {\n    if (!searchTerm.trim()) {\n      return tickerSummaries;\n    }\n    \n    const searchLower = searchTerm.toLowerCase();\n    return tickerSummaries.filter(ticker => \n      ticker.ticker.toLowerCase().includes(searchLower)\n    );\n  }, [tickerSummaries, searchTerm]);\n\n  // Get filtered trades for the selected ticker\n  const filteredTrades = useMemo(() => {\n    if (!selectedTicker) return [];\n    return darkPoolData.filter(trade => trade.ticker === selectedTicker);\n  }, [darkPoolData, selectedTicker]);\n\n  const handleTickerSelect = useCallback((ticker: string) => {\n    setSelectedTicker(ticker);\n  }, []);\n\n  const handleBackToList = useCallback(() => {\n    setSelectedTicker(null);\n  }, []);\n\n  const handleRefreshData = useCallback(async () => {\n    try {\n      console.log('🔄 Performing hard refresh for dark pool data...');\n      \n      // Clear only dark pool related caches\n      clearDarkPoolDataCache();      // Clear dark pool parsed data cache\n      clearDarkPoolFileCache();      // Clear dark pool file loading cache\n      clearPriceCache();             // Clear stock price cache (shared)\n      \n      console.log('✓ Dark pool caches cleared');\n      console.log('🔄 Reloading dark pool data with cache bypass...');\n      \n      setLoading(true);\n      setError(null);\n      \n      // Load all dark pool CSV files with cache busting enabled\n      const loadedFiles = await loadAllDarkPoolDataFiles(true);\n      \n      if (loadedFiles.length === 0) {\n        throw new Error('No dark pool data files found in the data directory');\n      }\n      \n      // Merge data from all files\n      const { mergedData, info } = mergeDarkPoolDataFromFiles(\n        loadedFiles.map(file => ({\n          filename: file.filename,\n          data: file.data,\n          timestamp: file.timestamp\n        }))\n      );\n      \n      setDarkPoolData(mergedData);\n      setDataInfo(info);\n      \n      // Reset current price and reload it\n      setCurrentPrice(null);\n      setPriceSource('none');\n      setIsPriceCached(false);\n      \n      // Reload price if a ticker is selected\n      if (selectedTicker) {\n        const { price, source, cached } = await getCurrentPrice(selectedTicker);\n        setCurrentPrice(price);\n        setPriceSource(source);\n        setIsPriceCached(cached);\n      }\n      \n      setLoading(false);\n      \n      console.log('✓ Dark pool data reloaded successfully:', {\n        files: info.totalFiles,\n        records: info.totalRecords,\n        latestData: info.dateRange.latest\n      });\n    } catch (error) {\n      console.error('Error during hard refresh:', error);\n      setError(error instanceof Error ? error.message : 'Failed to refresh dark pool data');\n      setLoading(false);\n    }\n  }, [selectedTicker]);\n\n  // Fetch current stock price when ticker is selected (real-time API with 15min cache)\n  useEffect(() => {\n    if (!selectedTicker) {\n      setCurrentPrice(null);\n      setPriceSource('none');\n      setIsPriceCached(false);\n      return;\n    }\n\n    const fetchPrice = async () => {\n      const result = await getCurrentPrice(selectedTicker);\n      setCurrentPrice(result.price);\n      setPriceSource(result.source);\n      setIsPriceCached(result.cached);\n      \n      if (import.meta.env.DEV) {\n        console.log(`Stock price for ${selectedTicker}:`, result.price, `(source: ${result.source}, cached: ${result.cached})`);\n      }\n    };\n\n    fetchPrice();\n  }, [selectedTicker]);\n\n  if (loading) {\n    return (\n      <div className=\"dashboard-loading\">\n        <div className=\"loading-spinner\"></div>\n        <p>Loading dark pool data from multiple files...</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"dashboard-error\">\n        <div className=\"error-icon\">⚠️</div>\n        <h3>Error Loading Dark Pool Data</h3>\n        <p>{error}</p>\n        <button \n          className=\"retry-button\" \n          onClick={() => window.location.reload()}\n        >\n          Retry\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"darkpool-dashboard\">\n      {/* Compact Header with Data Summary */}\n      <header className=\"dashboard-header\">\n        <div className=\"header-left\">\n          <h1>Market Analysis Dashboard</h1>\n          {dataInfo && (\n            <div className=\"header-stats\">\n              <span className=\"header-stat\">{dataInfo.totalFiles} files</span>\n              <span className=\"stat-separator\">•</span>\n              <span className=\"header-stat\">{dataInfo.totalRecords.toLocaleString()} records</span>\n              <span className=\"stat-separator\">•</span>\n              <span className=\"header-stat\">{dataInfo.dateRange.latest?.toLocaleString() || ''}</span>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"header-right\">\n          {!selectedTicker && (\n            <div className=\"search-container-header\">\n              <Search className=\"search-icon\" />\n              <input\n                type=\"text\"\n                className=\"search-input\"\n                placeholder=\"Search tickers...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n              />\n              {searchTerm && (\n                <button \n                  className=\"clear-search\"\n                  onClick={() => setSearchTerm('')}\n                  title=\"Clear search\"\n                >\n                  ×\n                </button>\n              )}\n            </div>\n          )}\n          \n          <div className=\"nav-buttons\">\n            <button \n              className={`nav-button ${activeDashboard === 'options' ? 'active' : ''}`}\n              onClick={() => setActiveDashboard('options')}\n            >\n              Options Analysis\n            </button>\n            <button \n              className={`nav-button ${activeDashboard === 'darkpool' ? 'active' : ''}`}\n              onClick={() => setActiveDashboard('darkpool')}\n            >\n              Dark Pool Analysis\n            </button>\n          </div>\n          \n          <button \n            className=\"refresh-button-compact\" \n            onClick={handleRefreshData}\n            title=\"Hard Refresh - Clears all caches and reloads data from files\"\n          >\n            <RefreshCw className=\"refresh-icon\" />\n            Hard Refresh\n          </button>\n        </div>\n      </header>\n\n      {!selectedTicker ? (\n        <DarkPoolTickerList \n          tickers={filteredTickerSummaries} \n          onTickerSelect={handleTickerSelect}\n          allData={darkPoolData}\n        />\n      ) : (\n        <div className=\"ticker-detail-view\">\n          <div className=\"detail-header\">\n            <button className=\"back-button\" onClick={handleBackToList}>\n              <ArrowLeft className=\"back-icon\" />\n              Back to Ticker List\n            </button>\n            <h2>{selectedTicker} Dark Pool Analysis</h2>\n            {currentPrice && priceSource === 'api' ? (\n              <span className=\"current-price-badge\">\n                <span className=\"price-indicator\"></span>\n                Current Price: ${currentPrice.toFixed(2)}\n                <span className=\"price-status\">\n                  ({isPriceCached ? 'Cached' : 'Live'})\n                </span>\n              </span>\n            ) : (\n              <span className=\"price-unavailable\">\n                Price unavailable\n              </span>\n            )}\n          </div>\n\n          {/* Charts Section - 2 Column Layout */}\n          <div className=\"charts-container\">\n            <div className=\"chart-column\">\n              <DarkPoolTradeChart \n                trades={filteredTrades}\n                ticker={selectedTicker}\n              />\n            </div>\n            <div className=\"chart-column\">\n              <DarkPoolTimeChart \n                trades={filteredTrades}\n                ticker={selectedTicker}\n              />\n            </div>\n          </div>\n\n          {/* Dark Pool Trade List */}\n          <div className=\"darkpool-trades-section\">\n            <DarkPoolList \n              trades={filteredTrades}\n              ticker={selectedTicker}\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DarkPoolDashboard;\n","import { Component, ErrorInfo, ReactNode } from 'react';\n\ninterface Props {\n  children: ReactNode;\n  fallback?: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: ErrorInfo;\n}\n\nclass ErrorBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): State {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('ErrorBoundary caught an error:', error, errorInfo);\n    this.setState({ error, errorInfo });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      return (\n        <div className=\"error-boundary\">\n          <div className=\"error-content\">\n            <h2>Something went wrong</h2>\n            <p>An error occurred while rendering this component.</p>\n            <details className=\"error-details\">\n              <summary>Error Details</summary>\n              <pre>{this.state.error?.toString()}</pre>\n              <pre>{this.state.errorInfo?.componentStack}</pre>\n            </details>\n            <button \n              className=\"retry-button\"\n              onClick={() => this.setState({ hasError: false, error: undefined, errorInfo: undefined })}\n            >\n              Try Again\n            </button>\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import { useState } from 'react';\nimport OptionsDashboard from './components/OptionsDashboard';\nimport DarkPoolDashboard from './components/DarkPoolDashboard';\nimport ErrorBoundary from './components/ErrorBoundary';\nimport './App.css';\n\ntype DashboardType = 'options' | 'darkpool';\n\nfunction App() {\n  const [activeDashboard, setActiveDashboard] = useState<DashboardType>('options');\n\n  return (\n    <div className=\"app\">\n      <main>\n        <ErrorBoundary>\n          {activeDashboard === 'options' ? (\n            <OptionsDashboard \n              activeDashboard={activeDashboard}\n              setActiveDashboard={setActiveDashboard}\n            />\n          ) : (\n            <DarkPoolDashboard \n              activeDashboard={activeDashboard}\n              setActiveDashboard={setActiveDashboard}\n            />\n          )}\n        </ErrorBoundary>\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\n\n// Register service worker for better performance\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', () => {\n    // Use dynamic base path for GitHub Pages\n    const basePath = import.meta.env.BASE_URL;\n    navigator.serviceWorker.register(`${basePath}sw.js`)\n      .then((registration) => {\n        console.log('SW registered: ', registration);\n      })\n      .catch((registrationError) => {\n        console.log('SW registration failed: ', registrationError);\n      });\n  });\n}\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n)\n"],"names":["f","require$$0","k","l","m","n","p","q","c","a","g","b","d","e","h","reactJsxRuntime_production_min","jsxRuntimeModule","client","parseCache","darkPoolParseCache","clearDataCache","tickerSummaryCache","clearDarkPoolDataCache","darkPoolTickerSummaryCache","parseTimestampFromData","timestampStr","match","monthName","day","year","hour","minute","ampm","month","hour24","isOptionExpired","expiryStr","parts","parseCSVData","csvText","sourceFile","cacheKey","cached","lines","data","estimatedSize","dataIndex","i","line","fields","parseCSVLine","timestamp","sweepType","ticker","strike","expiry","optionType","volume","_a","premium","openInterest","_b","bidAskSpread","invalidTickers","isValidTicker","isExpired","getTickerSummaries","tickerMap","option","parsedTimestamp","summary","parsePremium","currentTimestamp","result","expirySet","dateA","dateB","getVolumeProfileForTicker","filteredData","strikeMap","profile","getExpiryDatesForTicker","expiries","getHighestVolumeData","highestVolume","max","current","cleanPremium","num","formatVolume","formatPremium","mergeDataFromFiles","fileData","mergedData","fileInfo","earliestDate","latestDate","uniqueTrades","file","parsedData","trade","key","info","detectUnusualActivity","tickerData","allData","totalVolume","sum","t","totalPremium","callVolume","putVolume","callPutRatio","sweepCount","avgTradeSize","allTickers","avgVolumePerTicker","avgPremiumPerTicker","alerts","severity","alertType","identifyKeyPriceLevels","topN","existing","maxVolume","v","maxOI","maxPremium","volumeScore","oiScore","premiumScore","combinedScore","significance","type","rest","estimateGammaExposure","currentPrice","atmWeight","percentFromCurrent","netGammaExposure","absExposure","maxExposure","level","exposureRatio","calculateMaxPain","strikes","painMap","testStrike","totalPain","maxPainStrike","maxPain","pain","getTickerAnalytics","parseDarkPoolData","csvContent","filename","darkPoolData","quantityStr","priceStr","_c","totalValue","_d","_e","quantity","price","inQuotes","char","mergeDarkPoolDataFromFiles","files","totalRecords","record","recordDate","getDarkPoolTickerSummaries","tradeDate","formatDateTime","parsedDate","time","TickerList","memo","tickers","onTickerSelect","sortBy","setSortBy","useState","sortedTickers","useMemo","sorted","jsxs","jsx","ArrowUpDown","callDominant","putDominant","dominanceClass","analytics","TrendingUp","TrendingDown","Calendar","Target","idx","Zap","Clock","VolumeProfileChart","highestVolumeData","chartType","trades","tooltip","setTooltip","getBarWidth","useCallback","getTooltipData","strikeTrades","premiumFormatted","premiumFull","sweepTypes","tradeVolumes","size","tradeDetails","handleBarMouseEnter","rect","tooltipData","handleBarMouseLeave","prev","handleBarMouseMove","getCurrentPrice","isCurrentPrice","filteredChartData","maxTotalVolume","minStrike","maxStrike","totalVolumeSum","getStrikePosition","index","item","totalItems","spacing","reversedIndex","getCurrentPricePosition","clampedPrice","lowerStrike","upperStrike","lowerIndex","upperIndex","currentStrike","nextStrike","lowerPos","upperPos","lowerReversed","upperReversed","priceRatio","getChartHeight","Fragment","date","TradeRow","formatExecutionDateTime","fullMatch","formattedDate","formattedTime","isHighValue","TradeList","sortedTrades","expiryA","expiryB","filteredTrades","getTradeKey","hasK","hasM","StrikeExpiryHeatmap","heatmapData","maxAbsValue","dataMap","strikeSet","cell","sortedStrikes","sortedExpiries","maxAbs","absValue","getColor","value","alpha","formatValue","isCurrentPriceStrike","getCellKey","hasData","isAtMoney","parseTimestampFromFilename","dateStr","timeStr","getDataFiles","getDarkPoolDataFiles","loadCSVFile","bustCache","cacheBuster","response","error","fileCache","darkPoolFileCache","CACHE_DURATION","loadAllDataFiles","now","loadPromises","results","cachedResults","filesToLoad","newResults","allResults","successful","failed","loadAllDarkPoolDataFiles","clearFileCache","clearDarkPoolFileCache","fetchStockPrice","finnhubApiKey","finnhubUrl","yahooUrl","proxyUrl","priceCache","apiPrice","clearPriceCache","OptionsDashboard","activeDashboard","setActiveDashboard","selectedTicker","setSelectedTicker","selectedExpiry","setSelectedExpiry","optionData","setOptionData","dataInfo","setDataInfo","loading","setLoading","setError","setCurrentPrice","priceSource","setPriceSource","isPriceCached","setIsPriceCached","searchTerm","setSearchTerm","useEffect","loadedFiles","tickerSummaries","filteredTickerSummaries","searchLower","expiryDates","volumeProfileData","matchesTicker","matchesExpiry","tickerTrades","handleTickerSelect","handleBackToList","handleExpirySelect","handleRefreshData","source","Search","RefreshCw","ArrowLeft","DarkPoolRow","volumeStats","valueStats","formatQuantity","cleanValue","getRowColor","calculateStats","values","mean","val","variance","stdDev","q75Index","q90Index","q95Index","DarkPoolList","sortOrder","setSortOrder","volumes","comparison","aValue","bValue","handleSort","newSortBy","getSortIcon","column","formatTotalValue","DarkPoolTickerList","lastTrade","DarkPoolTradeChart","chartData","priceGroups","roundedPrice","dataPoint","height","isHighVolume","DarkPoolTimeChart","timeGroups","timeKey","DarkPoolDashboard","setDarkPoolData","quantities","prices","highestVolumeTrade","priceVolatility","acc","ErrorBoundary","Component","props","errorInfo","App","basePath","registration","registrationError","ReactDOM","React"],"mappings":"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","x_google_ignoreList":[0,1,2]}