{"version":3,"file":"index-410f2990-1761744475133.js","sources":["../../node_modules/react/cjs/react-jsx-runtime.production.min.js","../../node_modules/react/jsx-runtime.js","../../node_modules/react-dom/client.js","../../src/utils/dataParser.ts","../../src/components/TickerList.tsx","../../src/components/VolumeProfileChart.tsx","../../src/components/TradeList.tsx","../../src/components/StrikeExpiryHeatmap.tsx","../../src/utils/tradePsychology.ts","../../src/components/TickerPsychologyAnalysis.tsx","../../src/utils/fileLoader.ts","../../src/utils/stockPrice.ts","../../src/components/OptionsDashboard.tsx","../../src/components/DarkPoolList.tsx","../../src/components/DarkPoolTickerList.tsx","../../src/components/DarkPoolTradeChart.tsx","../../src/components/DarkPoolTimeChart.tsx","../../src/components/DarkPoolDashboard.tsx","../../src/utils/sessionStorageManager.ts","../../src/components/TickerWeeklyAnalysis.tsx","../../src/components/OverallAnalysisDashboard.tsx","../../src/components/ErrorBoundary.tsx","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","export interface OptionData {\n  ticker: string;\n  strike: number;\n  expiry: string;\n  optionType: 'Call' | 'Put';\n  volume: number;\n  premium: string;\n  openInterest: number;\n  bidAskSpread: number;\n  timestamp: string;\n  sweepType: string;\n  sourceFile?: string; // Track which file this data came from\n}\n\nexport interface DarkPoolData {\n  ticker: string;\n  quantity: number;\n  price: number;\n  totalValue: string;\n  timestamp: string;\n  sourceFile?: string; // Track which file this data came from\n}\n\nexport interface MergedDataInfo {\n  totalFiles: number;\n  totalRecords: number;\n  dateRange: {\n    earliest: Date | null;\n    latest: Date | null;\n  };\n  files: {\n    filename: string;\n    recordCount: number;\n    timestamp: Date;\n  }[];\n}\n\nexport interface TickerSummary {\n  ticker: string;\n  totalVolume: number;\n  callVolume: number;\n  putVolume: number;\n  totalPremium: number;\n  uniqueExpiries: string[];\n  lastActivity: string;\n  lastActivityDate: Date | null;\n  lastTrade: {\n    strike: number;\n    optionType: 'Call' | 'Put';\n    volume: number;\n    premium: string;\n    sweepType: string;\n    timestamp: string;\n  } | null;\n}\n\nexport interface VolumeProfileData {\n  strike: number;\n  callVolume: number;\n  putVolume: number;\n  openInterest: number;\n  totalVolume: number;\n}\n\nexport interface HighestVolumeData {\n  strike: number;\n  totalVolume: number;\n  callVolume: number;\n  putVolume: number;\n  openInterest: number;\n}\n\n// Session storage keys for caching\nconst PARSE_CACHE_KEY = 'optionAnalysis_parseCache';\nconst DARKPOOL_PARSE_CACHE_KEY = 'optionAnalysis_darkPoolParseCache';\nconst TICKER_SUMMARY_CACHE_KEY = 'optionAnalysis_tickerSummaryCache';\nconst DARKPOOL_TICKER_SUMMARY_CACHE_KEY = 'optionAnalysis_darkPoolTickerSummaryCache';\n\n// Helper functions for session storage\nfunction getSessionParseCache(key: string): Map<string, OptionData[]> {\n  try {\n    const cached = sessionStorage.getItem(key);\n    if (cached) {\n      const parsed = JSON.parse(cached);\n      const map = new Map<string, OptionData[]>();\n      for (const [k, v] of Object.entries(parsed)) {\n        map.set(k, v as OptionData[]);\n      }\n      return map;\n    }\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.warn('Failed to load parse cache from session storage:', error);\n    }\n  }\n  return new Map<string, OptionData[]>();\n}\n\nfunction setSessionParseCache(key: string, cache: Map<string, OptionData[]>): void {\n  try {\n    const obj = Object.fromEntries(cache);\n    sessionStorage.setItem(key, JSON.stringify(obj));\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.warn('Failed to save parse cache to session storage:', error);\n    }\n  }\n}\n\nfunction getSessionDarkPoolParseCache(key: string): Map<string, DarkPoolData[]> {\n  try {\n    const cached = sessionStorage.getItem(key);\n    if (cached) {\n      const parsed = JSON.parse(cached);\n      const map = new Map<string, DarkPoolData[]>();\n      for (const [k, v] of Object.entries(parsed)) {\n        map.set(k, v as DarkPoolData[]);\n      }\n      return map;\n    }\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.warn('Failed to load dark pool parse cache from session storage:', error);\n    }\n  }\n  return new Map<string, DarkPoolData[]>();\n}\n\nfunction setSessionDarkPoolParseCache(key: string, cache: Map<string, DarkPoolData[]>): void {\n  try {\n    const obj = Object.fromEntries(cache);\n    sessionStorage.setItem(key, JSON.stringify(obj));\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.warn('Failed to save dark pool parse cache to session storage:', error);\n    }\n  }\n}\n\nfunction getSessionTickerSummaryCache(key: string): Map<string, TickerSummary[]> {\n  try {\n    const cached = sessionStorage.getItem(key);\n    if (cached) {\n      const parsed = JSON.parse(cached);\n      const map = new Map<string, TickerSummary[]>();\n      for (const [k, v] of Object.entries(parsed)) {\n        map.set(k, v as TickerSummary[]);\n      }\n      return map;\n    }\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.warn('Failed to load ticker summary cache from session storage:', error);\n    }\n  }\n  return new Map<string, TickerSummary[]>();\n}\n\nfunction setSessionTickerSummaryCache(key: string, cache: Map<string, TickerSummary[]>): void {\n  try {\n    const obj = Object.fromEntries(cache);\n    sessionStorage.setItem(key, JSON.stringify(obj));\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.warn('Failed to save ticker summary cache to session storage:', error);\n    }\n  }\n}\n\nfunction getSessionDarkPoolTickerSummaryCache(key: string): Map<string, any[]> {\n  try {\n    const cached = sessionStorage.getItem(key);\n    if (cached) {\n      const parsed = JSON.parse(cached);\n      const map = new Map<string, any[]>();\n      for (const [k, v] of Object.entries(parsed)) {\n        map.set(k, v as any[]);\n      }\n      return map;\n    }\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.warn('Failed to load dark pool ticker summary cache from session storage:', error);\n    }\n  }\n  return new Map<string, any[]>();\n}\n\nfunction setSessionDarkPoolTickerSummaryCache(key: string, cache: Map<string, any[]>): void {\n  try {\n    const obj = Object.fromEntries(cache);\n    sessionStorage.setItem(key, JSON.stringify(obj));\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.warn('Failed to save dark pool ticker summary cache to session storage:', error);\n    }\n  }\n}\n\nfunction clearSessionCache(key: string): void {\n  try {\n    sessionStorage.removeItem(key);\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.warn('Failed to clear session storage:', error);\n    }\n  }\n}\n\n// Clear cache function for development\nexport function clearDataCache() {\n  clearSessionCache(PARSE_CACHE_KEY);\n  clearSessionCache(TICKER_SUMMARY_CACHE_KEY);\n  if (import.meta.env.DEV) {\n    console.log('Options data cache cleared - all caches reset');\n  }\n}\n\n// Clear dark pool cache function\nexport function clearDarkPoolDataCache() {\n  clearSessionCache(DARKPOOL_PARSE_CACHE_KEY);\n  clearSessionCache(DARKPOOL_TICKER_SUMMARY_CACHE_KEY);\n  if (import.meta.env.DEV) {\n    console.log('Dark pool data cache cleared');\n  }\n}\n\n/**\n * Clear all data parser session storage caches\n */\nexport function clearAllDataParserCaches(): void {\n  clearSessionCache(PARSE_CACHE_KEY);\n  clearSessionCache(DARKPOOL_PARSE_CACHE_KEY);\n  clearSessionCache(TICKER_SUMMARY_CACHE_KEY);\n  clearSessionCache(DARKPOOL_TICKER_SUMMARY_CACHE_KEY);\n  if (import.meta.env.DEV) {\n    console.log('🧹 All data parser session storage caches cleared');\n  }\n}\n\n/**\n * Parse timestamp from CSV data\n * Expected format: \"Wednesday, October 8, 2025 at 3:02 PM\"\n */\nexport function parseTimestampFromData(timestampStr: string): Date | null {\n  try {\n    if (!timestampStr) return null;\n    \n    const now = new Date();\n    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    \n    // Convert month name to number\n    const monthMap: { [key: string]: number } = {\n      'january': 0, 'february': 1, 'march': 2, 'april': 3,\n      'may': 4, 'june': 5, 'july': 6, 'august': 7,\n      'september': 8, 'october': 9, 'november': 10, 'december': 11\n    };\n    \n    // Helper function to convert 12-hour to 24-hour format\n    const convertTo24Hour = (hour: string, ampm: string): number => {\n      let hour24 = parseInt(hour);\n      if (ampm.toUpperCase() === 'PM' && hour24 !== 12) {\n        hour24 += 12;\n      } else if (ampm.toUpperCase() === 'AM' && hour24 === 12) {\n        hour24 = 0;\n      }\n      return hour24;\n    };\n    \n    // Handle format: \"Wednesday, October 8, 2025 at 3:02 PM\"\n    let match = timestampStr.match(/(\\w+),\\s+(\\w+)\\s+(\\d+),\\s+(\\d+)\\s+at\\s+(\\d+):(\\d+)\\s+(AM|PM)/i);\n    if (match) {\n      const [, , monthName, day, year, hour, minute, ampm] = match;\n      const month = monthMap[monthName.toLowerCase()];\n      if (month === undefined) {\n        if (import.meta.env.DEV) {\n          console.warn(`Unknown month: ${monthName}`);\n        }\n        return null;\n      }\n      const hour24 = convertTo24Hour(hour, ampm);\n      return new Date(parseInt(year), month, parseInt(day), hour24, parseInt(minute));\n    }\n    \n    // Handle format: \"Yesterday at 3:55 PM\"\n    match = timestampStr.match(/Yesterday at (\\d+):(\\d+)\\s+(AM|PM)/i);\n    if (match) {\n      const [, hour, minute, ampm] = match;\n      const hour24 = convertTo24Hour(hour, ampm);\n      const yesterday = new Date(today);\n      yesterday.setDate(yesterday.getDate() - 1);\n      return new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate(), hour24, parseInt(minute));\n    }\n    \n    // Handle format: \"9:45 AM\" (today's time)\n    match = timestampStr.match(/(\\d+):(\\d+)\\s+(AM|PM)/i);\n    if (match) {\n      const [, hour, minute, ampm] = match;\n      const hour24 = convertTo24Hour(hour, ampm);\n      return new Date(today.getFullYear(), today.getMonth(), today.getDate(), hour24, parseInt(minute));\n    }\n    \n    if (import.meta.env.DEV) {\n      console.warn(`Timestamp format not recognized: ${timestampStr}`);\n    }\n    return null;\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.warn(`Failed to parse timestamp: ${timestampStr}`, error);\n    }\n    return null;\n  }\n}\n\n/**\n * Check if an option has expired based on its expiry date\n * Expected format: \"MM/DD/YYYY\" (e.g., \"10/10/2025\")\n */\nfunction isOptionExpired(expiryStr: string): boolean {\n  try {\n    if (!expiryStr) return false;\n    \n    // Parse expiry date from MM/DD/YYYY format\n    const parts = expiryStr.split('/');\n    if (parts.length !== 3) return false;\n    \n    const month = parseInt(parts[0]) - 1; // JavaScript months are 0-indexed\n    const day = parseInt(parts[1]);\n    const year = parseInt(parts[2]);\n    \n    // Create expiry date at end of day (23:59:59) to ensure options expire after market close\n    const expiryDate = new Date(year, month, day, 23, 59, 59);\n    const today = new Date();\n    \n    // Option is expired if expiry date is before today\n    return expiryDate < today;\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.warn(`Failed to parse expiry date: ${expiryStr}`, error);\n    }\n    return false; // If we can't parse it, don't filter it out\n  }\n}\n\nexport function parseCSVData(csvText: string, sourceFile?: string): OptionData[] {\n  // Check cache first\n  const cacheKey = `${sourceFile || 'unknown'}_${csvText.length}_${csvText.slice(0, 100)}`;\n  const parseCache = getSessionParseCache(PARSE_CACHE_KEY);\n  const cached = parseCache.get(cacheKey);\n  if (cached) {\n    return cached;\n  }\n\n  const lines = csvText.split('\\n');\n  const data: OptionData[] = [];\n  \n  // Pre-allocate array with estimated size for better performance\n  const estimatedSize = Math.max(1000, lines.length * 0.8);\n  data.length = estimatedSize;\n  let dataIndex = 0;\n  \n  // Skip header row\n  for (let i = 1; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (!line) continue;\n    \n    // Parse CSV line (handle quoted fields)\n    const fields = parseCSVLine(line);\n    \n    if (fields.length < 19) continue;\n    \n    try {\n      // Extract relevant fields based on the CSV structure\n      // Col 1: Avatar URL, Col 2: Username, Col 3: APP, Col 4: Short time, Col 5: Separator\n      const timestamp = fields[5] || ''; // Column 6 (index 5) - Full Timestamp\n      const sweepType = fields[6] || ''; // Column 7 (index 6) - Sweep Type (e.g., \"Call Sweep\")\n      const ticker = fields[7] || '';     // Column 8 (index 7) - Ticker\n      const strike = parseFloat(fields[8]) || 0;  // Column 9 (index 8) - Strike\n      const expiry = fields[9] || '';     // Column 10 (index 9) - Expiry\n      const optionType = fields[10] as 'Call' | 'Put'; // Column 11 (index 10) - Option Type\n      const volume = parseInt(fields[12]?.replace(/,/g, '') || '0'); // Column 13 (index 12) - Volume\n      const premium = fields[13] || '$0';  // Column 14 (index 13) - Premium\n      const openInterest = parseInt(fields[14]?.replace(/,/g, '') || '0'); // Column 15 (index 14) - OI\n      const bidAskSpread = 0; // Not available in current format\n      \n      // Filter out non-ticker entries (trade types, sweep types, etc.)\n      const invalidTickers = ['Ask', 'Above', 'Bid', 'Below', 'Sweep', 'Block', 'Trade', 'Volume', 'Premium'];\n      const isValidTicker = ticker && \n        ticker.length >= 1 && \n        ticker.length <= 10 && \n        !invalidTickers.includes(ticker) &&\n        !ticker.match(/^\\d+$/) && // Not just numbers\n        !ticker.includes(' ') && // No spaces\n        /^[A-Z0-9]+$/.test(ticker); // Only uppercase letters and numbers\n      \n      // Check if the option has expired\n      const isExpired = isOptionExpired(expiry);\n      \n      // Only process valid option data with valid tickers and non-expired options\n      if (isValidTicker && strike > 0 && expiry && optionType && volume > 0 && !isExpired) {\n        data[dataIndex++] = {\n          ticker,\n          strike,\n          expiry,\n          optionType,\n          volume,\n          premium,\n          openInterest,\n          bidAskSpread,\n          timestamp,\n          sweepType,\n          sourceFile\n        };\n      }\n    } catch (error) {\n      if (import.meta.env.DEV) {\n        console.warn('Error parsing line:', line, error);\n      }\n    }\n  }\n  \n  // Trim array to actual size\n  data.length = dataIndex;\n  \n  // Cache the result\n  parseCache.set(cacheKey, data);\n  setSessionParseCache(PARSE_CACHE_KEY, parseCache);\n  \n  return data;\n}\n\n\nexport function getTickerSummaries(data: OptionData[]): TickerSummary[] {\n  // Create cache key based on data length and first few items\n  const cacheKey = `${data.length}_${data.slice(0, 3).map(d => `${d.ticker}_${d.timestamp}`).join('_')}`;\n  const tickerSummaryCache = getSessionTickerSummaryCache(TICKER_SUMMARY_CACHE_KEY);\n  const cached = tickerSummaryCache.get(cacheKey);\n  if (cached) {\n    return cached;\n  }\n\n  const tickerMap = new Map<string, TickerSummary & { expirySet: Set<string> }>();\n  \n  // Use for loop for better performance than forEach\n  for (let i = 0; i < data.length; i++) {\n    const option = data[i];\n    \n    if (!tickerMap.has(option.ticker)) {\n      const parsedTimestamp = parseTimestampFromData(option.timestamp);\n      tickerMap.set(option.ticker, {\n        ticker: option.ticker,\n        totalVolume: 0,\n        callVolume: 0,\n        putVolume: 0,\n        totalPremium: 0,\n        uniqueExpiries: [],\n        expirySet: new Set<string>(),\n        lastActivity: option.timestamp,\n        lastActivityDate: parsedTimestamp,\n        lastTrade: {\n          strike: option.strike,\n          optionType: option.optionType,\n          volume: option.volume,\n          premium: option.premium,\n          sweepType: option.sweepType,\n          timestamp: option.timestamp\n        }\n      });\n    }\n    \n    const summary = tickerMap.get(option.ticker)!;\n    summary.totalVolume += option.volume;\n    summary.totalPremium += parsePremium(option.premium);\n    \n    if (option.optionType === 'Call') {\n      summary.callVolume += option.volume;\n    } else {\n      summary.putVolume += option.volume;\n    }\n    \n    // Use Set for O(1) expiry checking instead of O(n) array.includes()\n    if (!summary.expirySet.has(option.expiry)) {\n      summary.expirySet.add(option.expiry);\n      summary.uniqueExpiries.push(option.expiry);\n    }\n    \n    // Update last activity if this is more recent\n    const currentTimestamp = parseTimestampFromData(option.timestamp);\n    if (currentTimestamp && summary.lastActivityDate && currentTimestamp > summary.lastActivityDate) {\n      summary.lastActivity = option.timestamp;\n      summary.lastActivityDate = currentTimestamp;\n      // Update last trade with most recent trade\n      summary.lastTrade = {\n        strike: option.strike,\n        optionType: option.optionType,\n        volume: option.volume,\n        premium: option.premium,\n        sweepType: option.sweepType,\n        timestamp: option.timestamp\n      };\n    } else if (currentTimestamp && !summary.lastActivityDate) {\n      summary.lastActivity = option.timestamp;\n      summary.lastActivityDate = currentTimestamp;\n      // Set last trade if none exists\n      if (!summary.lastTrade) {\n        summary.lastTrade = {\n          strike: option.strike,\n          optionType: option.optionType,\n          volume: option.volume,\n          premium: option.premium,\n          sweepType: option.sweepType,\n          timestamp: option.timestamp\n        };\n      }\n    }\n  }\n  \n  // Sort by most recent activity first, then by total volume\n  // Remove the expirySet before returning (it was just for performance)\n  const result = Array.from(tickerMap.values()).map(({ expirySet, ...summary }) => summary).sort((a, b) => {\n    // Use parsed dates for more accurate sorting\n    const dateA = a.lastActivityDate instanceof Date ? a.lastActivityDate : (a.lastActivityDate ? new Date(a.lastActivityDate) : null);\n    const dateB = b.lastActivityDate instanceof Date ? b.lastActivityDate : (b.lastActivityDate ? new Date(b.lastActivityDate) : null);\n    \n    // First sort by most recent activity\n    if (dateA && dateB && dateA.getTime() !== dateB.getTime()) {\n      return dateB.getTime() - dateA.getTime();\n    }\n    \n    // If same activity time or no dates, sort by total volume\n    return b.totalVolume - a.totalVolume;\n  });\n  \n  // Cache the result\n  tickerSummaryCache.set(cacheKey, result);\n  setSessionTickerSummaryCache(TICKER_SUMMARY_CACHE_KEY, tickerSummaryCache);\n  \n  return result;\n}\n\nexport function getVolumeProfileForTicker(\n  data: OptionData[], \n  ticker: string, \n  expiry?: string\n): VolumeProfileData[] {\n  const filteredData = data.filter(option => \n    option.ticker === ticker && \n    (!expiry || option.expiry === expiry)\n  );\n  \n  const strikeMap = new Map<number, VolumeProfileData>();\n  \n  filteredData.forEach(option => {\n    if (!strikeMap.has(option.strike)) {\n      strikeMap.set(option.strike, {\n        strike: option.strike,\n        callVolume: 0,\n        putVolume: 0,\n        openInterest: 0,\n        totalVolume: 0\n      });\n    }\n    \n    const profile = strikeMap.get(option.strike)!;\n    profile.totalVolume += option.volume;\n    profile.openInterest += option.openInterest;\n    \n    if (option.optionType === 'Call') {\n      profile.callVolume += option.volume;\n    } else {\n      profile.putVolume += option.volume;\n    }\n  });\n  \n  return Array.from(strikeMap.values())\n    .sort((a, b) => a.strike - b.strike);\n}\n\nexport function getExpiryDatesForTicker(data: OptionData[], ticker: string): string[] {\n  const expiries = new Set<string>();\n  \n  data.forEach(option => {\n    if (option.ticker === ticker) {\n      expiries.add(option.expiry);\n    }\n  });\n  \n  return Array.from(expiries).sort((a, b) => new Date(a).getTime() - new Date(b).getTime());\n}\n\nexport function getHighestVolumeData(\n  data: OptionData[], \n  ticker: string, \n  expiry?: string\n): HighestVolumeData | null {\n  const filteredData = data.filter(option => \n    option.ticker === ticker && \n    (!expiry || option.expiry === expiry)\n  );\n  \n  if (!filteredData.length) return null;\n  \n  const strikeMap = new Map<number, VolumeProfileData>();\n  \n  filteredData.forEach(option => {\n    if (!strikeMap.has(option.strike)) {\n      strikeMap.set(option.strike, {\n        strike: option.strike,\n        callVolume: 0,\n        putVolume: 0,\n        openInterest: 0,\n        totalVolume: 0\n      });\n    }\n    \n    const profile = strikeMap.get(option.strike)!;\n    profile.totalVolume += option.volume;\n    profile.openInterest += option.openInterest;\n    \n    if (option.optionType === 'Call') {\n      profile.callVolume += option.volume;\n    } else {\n      profile.putVolume += option.volume;\n    }\n  });\n  \n  const profiles = Array.from(strikeMap.values());\n  const highestVolume = profiles.reduce((max, current) => \n    current.totalVolume > max.totalVolume ? current : max\n  );\n  \n  return {\n    strike: highestVolume.strike,\n    totalVolume: highestVolume.totalVolume,\n    callVolume: highestVolume.callVolume,\n    putVolume: highestVolume.putVolume,\n    openInterest: highestVolume.openInterest\n  };\n}\n\nexport function parsePremium(premium: string): number {\n  const cleanPremium = premium.replace(/[$,K]/g, '');\n  const num = parseFloat(cleanPremium);\n  \n  if (premium.includes('K')) {\n    return num * 1000;\n  } else if (premium.includes('M')) {\n    return num * 1000000;\n  }\n  \n  return num;\n}\n\nexport function formatVolume(volume: number): string {\n  if (volume >= 1000000) {\n    return `${(volume / 1000000).toFixed(1)}M`;\n  } else if (volume >= 1000) {\n    return `${(volume / 1000).toFixed(1)}K`;\n  }\n  return volume.toString();\n}\n\nexport function formatPremium(premium: number): string {\n  if (premium >= 1000000) {\n    return `$${(premium / 1000000).toFixed(1)}M`;\n  } else if (premium >= 1000) {\n    return `$${(premium / 1000).toFixed(1)}K`;\n  }\n  return `$${premium.toFixed(0)}`;\n}\n\n/**\n * Merge data from multiple CSV files\n */\nexport function mergeDataFromFiles(fileData: Array<{filename: string, data: string, timestamp: Date}>): {\n  mergedData: OptionData[];\n  info: MergedDataInfo;\n} {\n  const mergedData: OptionData[] = [];\n  const fileInfo: MergedDataInfo['files'] = [];\n  let earliestDate: Date | null = null;\n  let latestDate: Date | null = null;\n  \n  // Track unique trades to avoid duplicates\n  const uniqueTrades = new Map<string, OptionData>();\n  \n  // Sort files by timestamp (most recent first)\n  const sortedFiles = fileData.sort((a, b) => {\n    const timestampA = a.timestamp instanceof Date ? a.timestamp : new Date(a.timestamp);\n    const timestampB = b.timestamp instanceof Date ? b.timestamp : new Date(b.timestamp);\n    return timestampB.getTime() - timestampA.getTime();\n  });\n  \n  sortedFiles.forEach(file => {\n    const parsedData = parseCSVData(file.data, file.filename);\n    \n    // Deduplicate trades based on key fields\n    parsedData.forEach(trade => {\n      // Create unique key from trade characteristics\n      const key = `${trade.ticker}_${trade.strike}_${trade.expiry}_${trade.optionType}_${trade.volume}_${trade.premium}_${trade.timestamp}`;\n      \n      // Only add if we haven't seen this exact trade before\n      if (!uniqueTrades.has(key)) {\n        uniqueTrades.set(key, trade);\n      }\n    });\n    \n    fileInfo.push({\n      filename: file.filename,\n      recordCount: parsedData.length,\n      timestamp: file.timestamp\n    });\n    \n    // Update date range\n    const fileTimestamp = file.timestamp instanceof Date ? file.timestamp : new Date(file.timestamp);\n    if (!earliestDate || fileTimestamp < earliestDate) {\n      earliestDate = fileTimestamp;\n    }\n    if (!latestDate || fileTimestamp > latestDate) {\n      latestDate = fileTimestamp;\n    }\n  });\n  \n  // Convert Map values to array\n  mergedData.push(...uniqueTrades.values());\n  \n  const info: MergedDataInfo = {\n    totalFiles: fileData.length,\n    totalRecords: mergedData.length,\n    dateRange: {\n      earliest: earliestDate,\n      latest: latestDate\n    },\n    files: fileInfo\n  };\n  \n  return { mergedData, info };\n}\n\n/**\n * Get data summary for the merged dataset\n */\nexport function getDataSummary(data: OptionData[]): {\n  totalTickers: number;\n  totalVolume: number;\n  totalCalls: number;\n  totalPuts: number;\n  uniqueExpiries: number;\n  dateRange: {\n    earliest: Date | null;\n    latest: Date | null;\n  };\n  sourceFiles: string[];\n} {\n  const tickers = new Set<string>();\n  const expiries = new Set<string>();\n  const sourceFiles = new Set<string>();\n  let totalVolume = 0;\n  let totalCalls = 0;\n  let totalPuts = 0;\n  let earliestDate: Date | null = null;\n  let latestDate: Date | null = null;\n  \n  data.forEach(option => {\n    tickers.add(option.ticker);\n    expiries.add(option.expiry);\n    if (option.sourceFile) sourceFiles.add(option.sourceFile);\n    \n    totalVolume += option.volume;\n    if (option.optionType === 'Call') {\n      totalCalls += option.volume;\n    } else {\n      totalPuts += option.volume;\n    }\n    \n    // Use parsed timestamp for more accurate date range\n    const parsedTimestamp = parseTimestampFromData(option.timestamp);\n    if (parsedTimestamp) {\n      if (!earliestDate || parsedTimestamp < earliestDate) {\n        earliestDate = parsedTimestamp;\n      }\n      if (!latestDate || parsedTimestamp > latestDate) {\n        latestDate = parsedTimestamp;\n      }\n    }\n  });\n  \n  return {\n    totalTickers: tickers.size,\n    totalVolume,\n    totalCalls,\n    totalPuts,\n    uniqueExpiries: expiries.size,\n    dateRange: {\n      earliest: earliestDate,\n      latest: latestDate\n    },\n    sourceFiles: Array.from(sourceFiles)\n  };\n}\n\n/**\n * Filter data by time range\n */\nexport function filterDataByTimeRange(\n  data: OptionData[], \n  startDate: Date, \n  endDate: Date\n): OptionData[] {\n  return data.filter(option => {\n    const timestamp = new Date(option.timestamp);\n    return timestamp >= startDate && timestamp <= endDate;\n  });\n}\n\n/**\n * Get data from the last N hours\n */\nexport function getRecentData(data: OptionData[], hours: number = 24): OptionData[] {\n  const cutoff = new Date(Date.now() - hours * 60 * 60 * 1000);\n  return filterDataByTimeRange(data, cutoff, new Date());\n}\n\n// ============================================================================\n// ANALYTICAL FEATURES\n// ============================================================================\n\nexport interface UnusualActivityAlert {\n  ticker: string;\n  alertType: 'volume' | 'premium' | 'sweep' | 'multiple';\n  severity: 'low' | 'medium' | 'high';\n  reason: string;\n  metrics: {\n    totalVolume: number;\n    totalPremium: number;\n    callPutRatio: number;\n    sweepCount: number;\n    avgTradeSize: number;\n  };\n}\n\nexport interface KeyPriceLevel {\n  strike: number;\n  volume: number;\n  openInterest: number;\n  premium: number;\n  significance: 'high' | 'medium' | 'low';\n  type: 'call' | 'put' | 'both';\n}\n\nexport interface GammaExposure {\n  strike: number;\n  netGammaExposure: number; // Positive = dealers long gamma, Negative = dealers short gamma\n  callVolume: number;\n  putVolume: number;\n  callOI: number;\n  putOI: number;\n  level: 'extreme' | 'high' | 'moderate' | 'low';\n}\n\nexport interface TickerAnalytics {\n  ticker: string;\n  unusualActivity?: UnusualActivityAlert | null;\n  keyPriceLevels: KeyPriceLevel[];\n  gammaExposure: GammaExposure[];\n  maxPainStrike: number | null;\n  currentPrice?: number;\n}\n\n/**\n * Detect unusual activity for a ticker\n */\nexport function detectUnusualActivity(\n  tickerData: OptionData[],\n  ticker: string,\n  allData: OptionData[]\n): UnusualActivityAlert | null {\n  if (tickerData.length === 0) return null;\n\n  // Calculate metrics for this ticker\n  const totalVolume = tickerData.reduce((sum, t) => sum + t.volume, 0);\n  const totalPremium = tickerData.reduce((sum, t) => {\n    const premium = parseFloat(t.premium.replace(/[$,]/g, '')) || 0;\n    return sum + premium;\n  }, 0);\n  \n  const callVolume = tickerData.filter(t => t.optionType === 'Call').reduce((sum, t) => sum + t.volume, 0);\n  const putVolume = tickerData.filter(t => t.optionType === 'Put').reduce((sum, t) => sum + t.volume, 0);\n  const callPutRatio = putVolume > 0 ? callVolume / putVolume : callVolume;\n  \n  const sweepCount = tickerData.filter(t => t.sweepType && t.sweepType.toLowerCase().includes('sweep')).length;\n  const avgTradeSize = totalVolume / tickerData.length;\n\n  // Calculate baseline (average across all tickers for comparison)\n  const allTickers = [...new Set(allData.map(t => t.ticker))];\n  const avgVolumePerTicker = allData.reduce((sum, t) => sum + t.volume, 0) / allTickers.length;\n  const avgPremiumPerTicker = allData.reduce((sum, t) => {\n    const premium = parseFloat(t.premium.replace(/[$,]/g, '')) || 0;\n    return sum + premium;\n  }, 0) / allTickers.length;\n\n  // Detection criteria\n  const alerts: string[] = [];\n  let severity: 'low' | 'medium' | 'high' = 'low';\n  let alertType: 'volume' | 'premium' | 'sweep' | 'multiple' = 'volume';\n  \n  // High volume alert (3x average)\n  if (totalVolume > avgVolumePerTicker * 3) {\n    alerts.push(`Volume ${((totalVolume / avgVolumePerTicker) * 100).toFixed(0)}% above average`);\n    severity = 'high';\n    alertType = 'volume';\n  } else if (totalVolume > avgVolumePerTicker * 2) {\n    alerts.push(`Volume ${((totalVolume / avgVolumePerTicker) * 100).toFixed(0)}% above average`);\n    severity = 'medium';\n  }\n\n  // High premium alert (3x average)\n  if (totalPremium > avgPremiumPerTicker * 3) {\n    alerts.push(`Premium ${((totalPremium / avgPremiumPerTicker) * 100).toFixed(0)}% above average`);\n    severity = 'high';\n    if (alertType !== 'volume') alertType = 'premium';\n    else alertType = 'multiple';\n  } else if (totalPremium > avgPremiumPerTicker * 2) {\n    alerts.push(`Premium ${((totalPremium / avgPremiumPerTicker) * 100).toFixed(0)}% above average`);\n    if (severity !== 'high') severity = 'medium';\n  }\n\n  // Unusual sweep activity\n  if (sweepCount > 5) {\n    alerts.push(`${sweepCount} sweeps detected`);\n    severity = 'high';\n    alertType = alertType === 'volume' || alertType === 'premium' ? 'multiple' : 'sweep';\n  } else if (sweepCount > 2) {\n    alerts.push(`${sweepCount} sweeps detected`);\n    if (severity === 'low') severity = 'medium';\n  }\n\n  // Extreme call/put ratio\n  if (callPutRatio > 5) {\n    alerts.push(`Heavy call bias (${callPutRatio.toFixed(1)}:1)`);\n    if (severity === 'low') severity = 'medium';\n  } else if (callPutRatio < 0.2) {\n    alerts.push(`Heavy put bias (1:${(1/callPutRatio).toFixed(1)})`);\n    if (severity === 'low') severity = 'medium';\n  }\n\n  // Large average trade size\n  if (avgTradeSize > 5000) {\n    alerts.push(`Large avg trade size: ${formatVolume(Math.round(avgTradeSize))}`);\n    if (severity === 'low') severity = 'medium';\n  }\n\n  // Return alert if any criteria met\n  if (alerts.length > 0) {\n    return {\n      ticker,\n      alertType,\n      severity,\n      reason: alerts.join(' • '),\n      metrics: {\n        totalVolume,\n        totalPremium,\n        callPutRatio,\n        sweepCount,\n        avgTradeSize\n      }\n    };\n  }\n\n  return null;\n}\n\n/**\n * Identify key price levels based on volume and open interest\n */\nexport function identifyKeyPriceLevels(\n  tickerData: OptionData[],\n  topN: number = 5\n): KeyPriceLevel[] {\n  if (tickerData.length === 0) return [];\n\n  // Aggregate by strike price\n  const strikeMap = new Map<number, {\n    volume: number;\n    openInterest: number;\n    premium: number;\n    callVolume: number;\n    putVolume: number;\n  }>();\n\n  tickerData.forEach(trade => {\n    const existing = strikeMap.get(trade.strike) || {\n      volume: 0,\n      openInterest: 0,\n      premium: 0,\n      callVolume: 0,\n      putVolume: 0\n    };\n\n    const premium = parseFloat(trade.premium.replace(/[$,]/g, '')) || 0;\n\n    existing.volume += trade.volume;\n    existing.openInterest += trade.openInterest;\n    existing.premium += premium;\n    \n    if (trade.optionType === 'Call') {\n      existing.callVolume += trade.volume;\n    } else {\n      existing.putVolume += trade.volume;\n    }\n\n    strikeMap.set(trade.strike, existing);\n  });\n\n  // Convert to array and sort by combined score\n  const levels = Array.from(strikeMap.entries()).map(([strike, data]) => {\n    // Combined significance score (weighted: 40% volume, 40% OI, 20% premium)\n    const maxVolume = Math.max(...Array.from(strikeMap.values()).map(v => v.volume));\n    const maxOI = Math.max(...Array.from(strikeMap.values()).map(v => v.openInterest));\n    const maxPremium = Math.max(...Array.from(strikeMap.values()).map(v => v.premium));\n    \n    const volumeScore = maxVolume > 0 ? data.volume / maxVolume : 0;\n    const oiScore = maxOI > 0 ? data.openInterest / maxOI : 0;\n    const premiumScore = maxPremium > 0 ? data.premium / maxPremium : 0;\n    \n    const combinedScore = volumeScore * 0.4 + oiScore * 0.4 + premiumScore * 0.2;\n    \n    let significance: 'high' | 'medium' | 'low' = 'low';\n    if (combinedScore > 0.7) significance = 'high';\n    else if (combinedScore > 0.4) significance = 'medium';\n\n    let type: 'call' | 'put' | 'both' = 'both';\n    if (data.callVolume > data.putVolume * 2) type = 'call';\n    else if (data.putVolume > data.callVolume * 2) type = 'put';\n\n    return {\n      strike,\n      volume: data.volume,\n      openInterest: data.openInterest,\n      premium: data.premium,\n      significance,\n      type,\n      combinedScore\n    };\n  });\n\n  // Sort by combined score and return top N\n  return levels\n    .sort((a, b) => b.combinedScore - a.combinedScore)\n    .slice(0, topN)\n    .map(({ combinedScore, ...rest }) => rest);\n}\n\n/**\n * Estimate gamma exposure at each strike\n * Note: This is a simplified estimation without actual Greeks data\n */\nexport function estimateGammaExposure(\n  tickerData: OptionData[],\n  currentPrice?: number\n): GammaExposure[] {\n  if (tickerData.length === 0) return [];\n\n  // Aggregate by strike\n  const strikeMap = new Map<number, {\n    callVolume: number;\n    putVolume: number;\n    callOI: number;\n    putOI: number;\n  }>();\n\n  tickerData.forEach(trade => {\n    const existing = strikeMap.get(trade.strike) || {\n      callVolume: 0,\n      putVolume: 0,\n      callOI: 0,\n      putOI: 0\n    };\n\n    if (trade.optionType === 'Call') {\n      existing.callVolume += trade.volume;\n      existing.callOI += trade.openInterest;\n    } else {\n      existing.putVolume += trade.volume;\n      existing.putOI += trade.openInterest;\n    }\n\n    strikeMap.set(trade.strike, existing);\n  });\n\n  // Calculate gamma exposure estimates\n  const exposures = Array.from(strikeMap.entries()).map(([strike, data]) => {\n    // Simplified gamma estimation:\n    // Dealers are typically short options (providing liquidity)\n    // Call OI = dealers short calls = negative gamma for dealers (must buy as price rises)\n    // Put OI = dealers short puts = positive gamma for dealers (must sell as price falls)\n    \n    // Weight ATM options higher (simplified: within 10% of current price gets full weight)\n    let atmWeight = 1;\n    if (currentPrice) {\n      const percentFromCurrent = Math.abs(strike - currentPrice) / currentPrice;\n      if (percentFromCurrent < 0.05) atmWeight = 2; // Very close to ATM\n      else if (percentFromCurrent < 0.10) atmWeight = 1.5; // Near ATM\n      else if (percentFromCurrent > 0.20) atmWeight = 0.5; // Far OTM/ITM\n    }\n\n    // Net gamma exposure (negative = dealers need to buy on way up, sell on way down)\n    // Using OI as it represents open positions that need hedging\n    const netGammaExposure = (data.putOI - data.callOI) * atmWeight;\n    \n    const absExposure = Math.abs(netGammaExposure);\n    const maxExposure = Math.max(...Array.from(strikeMap.values()).map(v => \n      Math.abs((v.putOI - v.callOI))\n    ));\n    \n    let level: 'extreme' | 'high' | 'moderate' | 'low' = 'low';\n    if (maxExposure > 0) {\n      const exposureRatio = absExposure / maxExposure;\n      if (exposureRatio > 0.7) level = 'extreme';\n      else if (exposureRatio > 0.4) level = 'high';\n      else if (exposureRatio > 0.2) level = 'moderate';\n    }\n\n    return {\n      strike,\n      netGammaExposure,\n      callVolume: data.callVolume,\n      putVolume: data.putVolume,\n      callOI: data.callOI,\n      putOI: data.putOI,\n      level\n    };\n  });\n\n  // Sort by strike price\n  return exposures.sort((a, b) => a.strike - b.strike);\n}\n\n/**\n * Calculate max pain (strike where option holders lose most money)\n */\nexport function calculateMaxPain(tickerData: OptionData[]): number | null {\n  if (tickerData.length === 0) return null;\n\n  // Get unique strikes\n  const strikes = [...new Set(tickerData.map(t => t.strike))].sort((a, b) => a - b);\n  \n  // For each strike, calculate total loss for option holders\n  const painMap = new Map<number, number>();\n\n  strikes.forEach(testStrike => {\n    let totalPain = 0;\n\n    tickerData.forEach(trade => {\n      const { strike, optionType, openInterest } = trade;\n      \n      if (optionType === 'Call') {\n        // Calls lose value if price is below strike\n        if (testStrike < strike) {\n          totalPain += openInterest * (strike - testStrike);\n        }\n      } else {\n        // Puts lose value if price is above strike\n        if (testStrike > strike) {\n          totalPain += openInterest * (testStrike - strike);\n        }\n      }\n    });\n\n    painMap.set(testStrike, totalPain);\n  });\n\n  // Find strike with maximum pain\n  let maxPainStrike = strikes[0];\n  let maxPain = painMap.get(strikes[0]) || 0;\n\n  painMap.forEach((pain, strike) => {\n    if (pain > maxPain) {\n      maxPain = pain;\n      maxPainStrike = strike;\n    }\n  });\n\n  return maxPainStrike;\n}\n\n/**\n * Get complete analytics for a ticker\n */\nexport function getTickerAnalytics(\n  ticker: string,\n  allData: OptionData[],\n  currentPrice?: number\n): TickerAnalytics {\n  const tickerData = allData.filter(t => t.ticker === ticker);\n  \n  return {\n    ticker,\n    unusualActivity: detectUnusualActivity(tickerData, ticker, allData),\n    keyPriceLevels: identifyKeyPriceLevels(tickerData, 5),\n    gammaExposure: estimateGammaExposure(tickerData, currentPrice),\n    maxPainStrike: calculateMaxPain(tickerData),\n    currentPrice\n  };\n}\n\n// Dark Pool Data Parsing Functions\n\n/**\n * Parse dark pool CSV data\n * Expected CSV format: avatar, username, botText, timestamp, separator, hiddenVisually, ticker, quantity, price, totalValue, relativeTime, timestamp2, time, separator2\n */\nexport function parseDarkPoolData(csvContent: string, filename: string): DarkPoolData[] {\n  // Check cache first\n  const cacheKey = `${filename}-${csvContent.length}`;\n  const darkPoolParseCache = getSessionDarkPoolParseCache(DARKPOOL_PARSE_CACHE_KEY);\n  const cached = darkPoolParseCache.get(cacheKey);\n  if (cached) {\n    if (import.meta.env.DEV) {\n      console.log(`Using cached dark pool data for ${filename}`);\n    }\n    return cached;\n  }\n\n  const lines = csvContent.split('\\n');\n  const darkPoolData: DarkPoolData[] = [];\n  \n  // Skip header row\n  for (let i = 1; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (!line) continue;\n    \n    try {\n      // Parse CSV line - handle quoted fields\n      const fields = parseCSVLine(line);\n      \n      if (fields.length < 14) continue;\n      \n      const ticker = fields[6]?.replace(/\"/g, '').trim();\n      const quantityStr = fields[7]?.replace(/\"/g, '').replace(/,/g, '').trim();\n      const priceStr = fields[8]?.replace(/\"/g, '').trim();\n      const totalValue = fields[9]?.replace(/\"/g, '').trim();\n      const timestampStr = fields[5]?.replace(/\"/g, '').trim();\n      \n      // Skip rows without ticker or if ticker is empty\n      if (!ticker || ticker === '' || ticker === '[') continue;\n      \n      // Parse quantity\n      const quantity = parseInt(quantityStr);\n      if (isNaN(quantity) || quantity <= 0) continue;\n      \n      // Parse price\n      const price = parseFloat(priceStr);\n      if (isNaN(price) || price <= 0) continue;\n      \n      // Parse timestamp\n      const timestamp = parseTimestampFromData(timestampStr);\n      if (!timestamp) continue;\n      \n      darkPoolData.push({\n        ticker,\n        quantity,\n        price,\n        totalValue,\n        timestamp: timestamp.toISOString(),\n        sourceFile: filename\n      });\n      \n    } catch (error) {\n      if (import.meta.env.DEV) {\n        console.warn(`Error parsing dark pool line ${i}:`, error, line);\n      }\n      continue;\n    }\n  }\n  \n  // Cache the parsed data\n  darkPoolParseCache.set(cacheKey, darkPoolData);\n  setSessionDarkPoolParseCache(DARKPOOL_PARSE_CACHE_KEY, darkPoolParseCache);\n  \n  return darkPoolData;\n}\n\n/**\n * Parse CSV line handling quoted fields\n */\nfunction parseCSVLine(line: string): string[] {\n  const fields: string[] = [];\n  let current = '';\n  let inQuotes = false;\n  \n  for (let i = 0; i < line.length; i++) {\n    const char = line[i];\n    \n    if (char === '\"') {\n      inQuotes = !inQuotes;\n    } else if (char === ',' && !inQuotes) {\n      fields.push(current);\n      current = '';\n    } else {\n      current += char;\n    }\n  }\n  \n  fields.push(current);\n  return fields;\n}\n\n/**\n * Merge dark pool data from multiple files\n */\nexport function mergeDarkPoolDataFromFiles(\n  files: Array<{ filename: string; data: string; timestamp: Date }>\n): { mergedData: DarkPoolData[]; info: MergedDataInfo } {\n  const allData: DarkPoolData[] = [];\n  let totalRecords = 0;\n  let earliestDate: Date | null = null;\n  let latestDate: Date | null = null;\n  \n  const fileInfo = files.map(file => {\n    const parsedData = parseDarkPoolData(file.data, file.filename);\n    allData.push(...parsedData);\n    totalRecords += parsedData.length;\n    \n    // Update date range\n    parsedData.forEach(record => {\n      const recordDate = new Date(record.timestamp);\n      if (!earliestDate || recordDate < earliestDate) {\n        earliestDate = recordDate;\n      }\n      if (!latestDate || recordDate > latestDate) {\n        latestDate = recordDate;\n      }\n    });\n    \n    return {\n      filename: file.filename,\n      recordCount: parsedData.length,\n      timestamp: file.timestamp\n    };\n  });\n  \n  // Sort by timestamp (newest first)\n  allData.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n  \n  return {\n    mergedData: allData,\n    info: {\n      totalFiles: files.length,\n      totalRecords,\n      dateRange: {\n        earliest: earliestDate,\n        latest: latestDate\n      },\n      files: fileInfo\n    }\n  };\n}\n\n/**\n * Get dark pool summaries by ticker\n */\nexport function getDarkPoolTickerSummaries(darkPoolData: DarkPoolData[]): Array<{\n  ticker: string;\n  totalQuantity: number;\n  totalValue: number;\n  averagePrice: number;\n  tradeCount: number;\n  lastActivity: string;\n  lastActivityDate: Date | null;\n  largestTrade: {\n    quantity: number;\n    price: number;\n    totalValue: string;\n    timestamp: string;\n  } | null;\n}> {\n  // Check cache first\n  const cacheKey = `${darkPoolData.length}_${darkPoolData.slice(0, 3).map(d => `${d.ticker}_${d.timestamp}`).join('_')}`;\n  const darkPoolTickerSummaryCache = getSessionDarkPoolTickerSummaryCache(DARKPOOL_TICKER_SUMMARY_CACHE_KEY);\n  const cached = darkPoolTickerSummaryCache.get(cacheKey);\n  if (cached) {\n    if (import.meta.env.DEV) {\n      console.log('Using cached dark pool ticker summaries');\n    }\n    return cached;\n  }\n\n  const tickerMap = new Map<string, {\n    ticker: string;\n    totalQuantity: number;\n    totalValue: number;\n    tradeCount: number;\n    lastActivityDate: Date | null;\n    largestTrade: {\n      quantity: number;\n      price: number;\n      totalValue: string;\n      timestamp: string;\n    } | null;\n  }>();\n  \n  darkPoolData.forEach(trade => {\n    const existing = tickerMap.get(trade.ticker) || {\n      ticker: trade.ticker,\n      totalQuantity: 0,\n      totalValue: 0,\n      tradeCount: 0,\n      lastActivityDate: null,\n      largestTrade: null\n    };\n    \n    existing.totalQuantity += trade.quantity;\n    existing.totalValue += trade.quantity * trade.price;\n    existing.tradeCount += 1;\n    \n    // Update last activity\n    const tradeDate = new Date(trade.timestamp);\n    if (!existing.lastActivityDate || tradeDate > existing.lastActivityDate) {\n      existing.lastActivityDate = tradeDate;\n    }\n    \n    // Update largest trade\n    if (!existing.largestTrade || trade.quantity > existing.largestTrade.quantity) {\n      existing.largestTrade = {\n        quantity: trade.quantity,\n        price: trade.price,\n        totalValue: trade.totalValue,\n        timestamp: trade.timestamp\n      };\n    }\n    \n    tickerMap.set(trade.ticker, existing);\n  });\n  \n  const result = Array.from(tickerMap.values()).map(data => ({\n    ...data,\n    averagePrice: data.totalValue / data.totalQuantity,\n    lastActivity: data.lastActivityDate ? data.lastActivityDate.toLocaleString() : 'Unknown'\n  })).sort((a, b) => b.totalValue - a.totalValue);\n\n  // Cache the result\n  darkPoolTickerSummaryCache.set(cacheKey, result);\n  setSessionDarkPoolTickerSummaryCache(DARKPOOL_TICKER_SUMMARY_CACHE_KEY, darkPoolTickerSummaryCache);\n  \n  return result;\n}\n","import React, { memo, useMemo, useState } from 'react';\nimport { TrendingUp, TrendingDown, Calendar, ArrowUpDown, Target } from 'lucide-react';\nimport { TickerSummary, formatVolume, formatPremium, parsePremium, OptionData } from '../utils/dataParser';\n\ninterface TickerListProps {\n  tickers: TickerSummary[];\n  onTickerSelect: (ticker: string) => void;\n  allData: OptionData[];\n}\n\ntype SortOption = 'recent' | 'oldest' | 'volume-high' | 'volume-low' | 'calls-high' | 'puts-high' | 'premium-high' | 'premium-low' | 'today-volume-high' | 'today-volume-low';\n\nconst formatDateTime = (timestamp: string, parsedDate?: Date | null): string => {\n  try {\n    let time: Date;\n    \n    // Use parsed date if available, otherwise try to parse the timestamp string\n    if (parsedDate) {\n      time = parsedDate;\n    } else {\n      // Try to parse the timestamp using the same logic as parseTimestampFromData\n      const now = new Date();\n      const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n      \n      // Convert month name to number\n      const monthMap: { [key: string]: number } = {\n        'january': 0, 'february': 1, 'march': 2, 'april': 3,\n        'may': 4, 'june': 5, 'july': 6, 'august': 7,\n        'september': 8, 'october': 9, 'november': 10, 'december': 11\n      };\n      \n      // Helper function to convert 12-hour to 24-hour format\n      const convertTo24Hour = (hour: string, ampm: string): number => {\n        let hour24 = parseInt(hour);\n        if (ampm.toUpperCase() === 'PM' && hour24 !== 12) {\n          hour24 += 12;\n        } else if (ampm.toUpperCase() === 'AM' && hour24 === 12) {\n          hour24 = 0;\n        }\n        return hour24;\n      };\n      \n      // Handle format: \"Wednesday, October 8, 2025 at 3:02 PM\"\n      let match = timestamp.match(/(\\w+),\\s+(\\w+)\\s+(\\d+),\\s+(\\d+)\\s+at\\s+(\\d+):(\\d+)\\s+(AM|PM)/i);\n      if (match) {\n        const [, , monthName, day, year, hour, minute, ampm] = match;\n        const month = monthMap[monthName.toLowerCase()];\n        if (month !== undefined) {\n          const hour24 = convertTo24Hour(hour, ampm);\n          time = new Date(parseInt(year), month, parseInt(day), hour24, parseInt(minute));\n        } else {\n          time = new Date(timestamp);\n        }\n      }\n      // Handle format: \"Yesterday at 3:55 PM\"\n      else if ((match = timestamp.match(/Yesterday at (\\d+):(\\d+)\\s+(AM|PM)/i))) {\n        const [, hour, minute, ampm] = match;\n        const hour24 = convertTo24Hour(hour, ampm);\n        const yesterday = new Date(today);\n        yesterday.setDate(yesterday.getDate() - 1);\n        time = new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate(), hour24, parseInt(minute));\n      }\n      // Handle format: \"9:45 AM\" (today's time)\n      else if ((match = timestamp.match(/(\\d+):(\\d+)\\s+(AM|PM)/i))) {\n        const [, hour, minute, ampm] = match;\n        const hour24 = convertTo24Hour(hour, ampm);\n        time = new Date(today.getFullYear(), today.getMonth(), today.getDate(), hour24, parseInt(minute));\n      }\n      else {\n        time = new Date(timestamp);\n      }\n    }\n    \n    // Check if the date is valid\n    if (isNaN(time.getTime())) {\n      return '';\n    }\n    \n    // Format as \"Oct 8, 2025 3:02 PM\"\n    return time.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric'\n    }) + ' ' + time.toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true\n    });\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.warn('Error parsing timestamp:', timestamp, error);\n    }\n    return '';\n  }\n};\n\nconst TickerList: React.FC<TickerListProps> = memo(({ tickers, onTickerSelect, allData }) => {\n  const [sortBy, setSortBy] = useState<SortOption>('recent');\n\n  // Helper function to get today's volume for a ticker\n  const getTodayVolume = (ticker: string): number => {\n    const tickerTrades = allData.filter(t => t.ticker === ticker);\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    let todayVolume = 0;\n    \n    tickerTrades.forEach(trade => {\n      let tradeDate: Date;\n      try {\n        const timestampStr = trade.timestamp;\n        const now = new Date();\n        const todayDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n        \n        const monthMap: { [key: string]: number } = {\n          'january': 0, 'february': 1, 'march': 2, 'april': 3,\n          'may': 4, 'june': 5, 'july': 6, 'august': 7,\n          'september': 8, 'october': 9, 'november': 10, 'december': 11\n        };\n        \n        const convertTo24Hour = (hour: string, ampm: string): number => {\n          let hour24 = parseInt(hour);\n          if (ampm.toUpperCase() === 'PM' && hour24 !== 12) {\n            hour24 += 12;\n          } else if (ampm.toUpperCase() === 'AM' && hour24 === 12) {\n            hour24 = 0;\n          }\n          return hour24;\n        };\n        \n        let match = timestampStr.match(/(\\w+),\\s+(\\w+)\\s+(\\d+),\\s+(\\d+)\\s+at\\s+(\\d+):(\\d+)\\s+(AM|PM)/i);\n        if (match) {\n          const [, , monthName, day, year, hour, minute, ampm] = match;\n          const month = monthMap[monthName.toLowerCase()];\n          if (month !== undefined) {\n            const hour24 = convertTo24Hour(hour, ampm);\n            tradeDate = new Date(parseInt(year), month, parseInt(day), hour24, parseInt(minute));\n          } else {\n            return;\n          }\n        }\n        else if ((match = timestampStr.match(/Yesterday at (\\d+):(\\d+)\\s+(AM|PM)/i))) {\n          const [, hour, minute, ampm] = match;\n          const hour24 = convertTo24Hour(hour, ampm);\n          const yesterday = new Date(todayDate);\n          yesterday.setDate(yesterday.getDate() - 1);\n          tradeDate = new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate(), hour24, parseInt(minute));\n        }\n        else if ((match = timestampStr.match(/(\\d+):(\\d+)\\s+(AM|PM)/i))) {\n          const [, hour, minute, ampm] = match;\n          const hour24 = convertTo24Hour(hour, ampm);\n          tradeDate = new Date(todayDate.getFullYear(), todayDate.getMonth(), todayDate.getDate(), hour24, parseInt(minute));\n        }\n        else {\n          return;\n        }\n        \n        tradeDate.setHours(0, 0, 0, 0);\n        const daysAgo = Math.floor((today.getTime() - tradeDate.getTime()) / (1000 * 60 * 60 * 24));\n        \n        if (daysAgo === 0) {\n          todayVolume += trade.volume;\n        }\n      } catch (error) {\n        // Skip this trade if we can't parse the date\n      }\n    });\n    \n    return todayVolume;\n  };\n\n  const sortedTickers = useMemo(() => {\n    const sorted = [...tickers];\n    \n    switch (sortBy) {\n      case 'recent':\n        return sorted.sort((a, b) => {\n          const dateA = a.lastActivityDate instanceof Date ? a.lastActivityDate : (a.lastActivityDate ? new Date(a.lastActivityDate) : null);\n          const dateB = b.lastActivityDate instanceof Date ? b.lastActivityDate : (b.lastActivityDate ? new Date(b.lastActivityDate) : null);\n          \n          if (dateA && dateB) {\n            return dateB.getTime() - dateA.getTime();\n          }\n          return 0;\n        });\n      \n      case 'oldest':\n        return sorted.sort((a, b) => {\n          const dateA = a.lastActivityDate instanceof Date ? a.lastActivityDate : (a.lastActivityDate ? new Date(a.lastActivityDate) : null);\n          const dateB = b.lastActivityDate instanceof Date ? b.lastActivityDate : (b.lastActivityDate ? new Date(b.lastActivityDate) : null);\n          \n          if (dateA && dateB) {\n            return dateA.getTime() - dateB.getTime();\n          }\n          return 0;\n        });\n      \n      case 'volume-high':\n        return sorted.sort((a, b) => b.totalVolume - a.totalVolume);\n      \n      case 'volume-low':\n        return sorted.sort((a, b) => a.totalVolume - b.totalVolume);\n      \n      case 'calls-high':\n        return sorted.sort((a, b) => b.callVolume - a.callVolume);\n      \n      case 'puts-high':\n        return sorted.sort((a, b) => b.putVolume - a.putVolume);\n      \n      case 'premium-high':\n        return sorted.sort((a, b) => b.totalPremium - a.totalPremium);\n      \n      case 'premium-low':\n        return sorted.sort((a, b) => a.totalPremium - b.totalPremium);\n      \n      case 'today-volume-high':\n        return sorted.sort((a, b) => getTodayVolume(b.ticker) - getTodayVolume(a.ticker));\n      \n      case 'today-volume-low':\n        return sorted.sort((a, b) => getTodayVolume(a.ticker) - getTodayVolume(b.ticker));\n      \n      default:\n        return sorted;\n    }\n  }, [tickers, sortBy]);\n\n  return (\n    <div className=\"ticker-list\">\n      <div className=\"ticker-list-header\">\n        <div className=\"header-content\">\n          <h2>Options Volume Dashboard</h2>\n          {/* <p>Click on any ticker to view detailed volume profile</p> */}\n        </div>\n        <div className=\"sort-controls\">\n          <ArrowUpDown className=\"sort-icon\" />\n          <select \n            className=\"sort-selector\"\n            value={sortBy}\n            onChange={(e) => setSortBy(e.target.value as SortOption)}\n          >\n            <option value=\"recent\">Most Recent</option>\n            <option value=\"oldest\">Oldest First</option>\n            <option value=\"volume-high\">Volume (High to Low)</option>\n            <option value=\"volume-low\">Volume (Low to High)</option>\n            <option value=\"today-volume-high\">Today's Volume (High to Low)</option>\n            <option value=\"today-volume-low\">Today's Volume (Low to High)</option>\n            <option value=\"calls-high\">Calls (High to Low)</option>\n            <option value=\"puts-high\">Puts (High to Low)</option>\n            <option value=\"premium-high\">Premium (High to Low)</option>\n            <option value=\"premium-low\">Premium (Low to High)</option>\n          </select>\n        </div>\n      </div>\n      \n      <div className=\"ticker-grid\">\n        {sortedTickers.map((ticker) => {\n          const callDominant = ticker.callVolume > ticker.putVolume;\n          const putDominant = ticker.putVolume > ticker.callVolume;\n          const dominanceClass = callDominant ? 'call-dominant' : putDominant ? 'put-dominant' : 'balanced';\n          \n          return (\n            <div \n              key={ticker.ticker} \n              className={`ticker-card ${dominanceClass}`}\n              onClick={() => onTickerSelect(ticker.ticker)}\n            >\n            <div className=\"ticker-header\">\n              <h3 className=\"ticker-symbol\">\n                {ticker.ticker}\n              </h3>\n              <div className=\"ticker-metrics\">\n                <div className=\"metric\">\n                  <TrendingUp className=\"metric-icon call\" />\n                  <span className=\"metric-label\">Calls</span>\n                  <span className=\"metric-value\">{formatVolume(ticker.callVolume)}</span>\n                </div>\n                <div className=\"metric\">\n                  <TrendingDown className=\"metric-icon put\" />\n                  <span className=\"metric-label\">Puts</span>\n                  <span className=\"metric-value\">{formatVolume(ticker.putVolume)}</span>\n                </div>\n              </div>\n            </div>\n            \n                <div className=\"ticker-details\">\n                  <div className=\"detail-row\">\n                    <span className=\"detail-label\">Total Volume:</span>\n                    <span className=\"detail-value\">{formatVolume(ticker.totalVolume)}</span>\n                  </div>\n                  <div className=\"detail-row\">\n                    <span className=\"detail-label\">Total Premium:</span>\n                    <span className=\"detail-value\">{formatPremium(ticker.totalPremium)}</span>\n                  </div>\n                  <div className=\"detail-row\">\n                    <Calendar className=\"detail-icon\" />\n                    <span className=\"detail-label\">Expiries:</span>\n                    <span className=\"detail-value\">{ticker.uniqueExpiries.length}</span>\n                  </div>\n                  {/* 3-Day Volume Section */}\n                  {(() => {\n                    const tickerTrades = allData.filter(t => t.ticker === ticker.ticker);\n                    const now = new Date();\n                    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n                    \n                    const dayVolumes = [0, 0, 0]; // [2 days ago, 1 day ago, today]\n                    const dayCallVolumes = [0, 0, 0];\n                    const dayPutVolumes = [0, 0, 0];\n                    \n                    tickerTrades.forEach(trade => {\n                      // Parse the timestamp string to get the date\n                      let tradeDate: Date;\n                      try {\n                        // Try to parse using the formatDateTime logic\n                        const timestampStr = trade.timestamp;\n                        \n                        const monthMap: { [key: string]: number } = {\n                          'january': 0, 'february': 1, 'march': 2, 'april': 3,\n                          'may': 4, 'june': 5, 'july': 6, 'august': 7,\n                          'september': 8, 'october': 9, 'november': 10, 'december': 11\n                        };\n                        \n                        const convertTo24Hour = (hour: string, ampm: string): number => {\n                          let hour24 = parseInt(hour);\n                          if (ampm.toUpperCase() === 'PM' && hour24 !== 12) {\n                            hour24 += 12;\n                          } else if (ampm.toUpperCase() === 'AM' && hour24 === 12) {\n                            hour24 = 0;\n                          }\n                          return hour24;\n                        };\n                        \n                        let match = timestampStr.match(/(\\w+),\\s+(\\w+)\\s+(\\d+),\\s+(\\d+)\\s+at\\s+(\\d+):(\\d+)\\s+(AM|PM)/i);\n                        if (match) {\n                          const [, , monthName, day, year, hour, minute, ampm] = match;\n                          const month = monthMap[monthName.toLowerCase()];\n                          if (month !== undefined) {\n                            const hour24 = convertTo24Hour(hour, ampm);\n                            tradeDate = new Date(parseInt(year), month, parseInt(day), hour24, parseInt(minute));\n                          } else {\n                            tradeDate = new Date(timestampStr);\n                          }\n                        }\n                        // Handle format: \"Yesterday at 3:55 PM\"\n                        else if ((match = timestampStr.match(/Yesterday at (\\d+):(\\d+)\\s+(AM|PM)/i))) {\n                          const [, hour, minute, ampm] = match;\n                          const hour24 = convertTo24Hour(hour, ampm);\n                          const yesterday = new Date(today);\n                          yesterday.setDate(yesterday.getDate() - 1);\n                          tradeDate = new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate(), hour24, parseInt(minute));\n                        }\n                        // Handle format: \"9:45 AM\" (today's time)\n                        else if ((match = timestampStr.match(/(\\d+):(\\d+)\\s+(AM|PM)/i))) {\n                          const [, hour, minute, ampm] = match;\n                          const hour24 = convertTo24Hour(hour, ampm);\n                          tradeDate = new Date(today.getFullYear(), today.getMonth(), today.getDate(), hour24, parseInt(minute));\n                        }\n                        else {\n                          tradeDate = new Date(timestampStr);\n                        }\n                      } catch (error) {\n                        return; // Skip this trade if we can't parse the date\n                      }\n                      \n                      tradeDate.setHours(0, 0, 0, 0);\n                      const daysAgo = Math.floor((today.getTime() - tradeDate.getTime()) / (1000 * 60 * 60 * 24));\n                      \n                      if (daysAgo >= 0 && daysAgo <= 2) {\n                        dayVolumes[2 - daysAgo] += trade.volume;\n                        if (trade.optionType === 'Call') {\n                          dayCallVolumes[2 - daysAgo] += trade.volume;\n                        } else {\n                          dayPutVolumes[2 - daysAgo] += trade.volume;\n                        }\n                      }\n                    });\n                    \n                    return (\n                      <div className=\"detail-row volume-3day\">\n                        <span className=\"detail-label\">3-Day Volume:</span>\n                        <div className=\"volume-breakdown\">\n                          <span className=\"day-volume\">\n                            <span className=\"day-label\">Today:</span>\n                            <span className=\"day-value\">{formatVolume(dayVolumes[2])}</span>\n                          </span>\n                          <span className=\"day-volume\">\n                            <span className=\"day-label\">-1:</span>\n                            <span className=\"day-value\">{formatVolume(dayVolumes[1])}</span>\n                          </span>\n                          <span className=\"day-volume\">\n                            <span className=\"day-label\">-2:</span>\n                            <span className=\"day-value\">{formatVolume(dayVolumes[0])}</span>\n                          </span>\n                        </div>\n                      </div>\n                    );\n                  })()}\n                </div>\n                \n                {/* Current Week Volume by Strike */}\n                {(() => {\n                  const tickerTrades = allData.filter(t => t.ticker === ticker.ticker);\n                  const today = new Date();\n                  const currentWeekStart = new Date(today);\n                  const currentWeekEnd = new Date(today);\n                  \n                  // Get Monday of current week\n                  const dayOfWeek = today.getDay();\n                  currentWeekStart.setDate(today.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));\n                  currentWeekStart.setHours(0, 0, 0, 0);\n                  \n                  // Get Sunday of current week (end of week)\n                  currentWeekEnd.setDate(currentWeekStart.getDate() + 6);\n                  currentWeekEnd.setHours(23, 59, 59, 999);\n                  \n                  // Helper function to parse expiry date\n                  const parseExpiryDate = (expiryStr: string): Date | null => {\n                    try {\n                      // Expected format: MM/DD/YYYY or similar\n                      const parts = expiryStr.split('/');\n                      if (parts.length === 3) {\n                        const month = parseInt(parts[0]) - 1; // 0-indexed\n                        const day = parseInt(parts[1]);\n                        const year = parseInt(parts[2]);\n                        return new Date(year, month, day);\n                      }\n                      // Try ISO format YYYY-MM-DD\n                      const isoMatch = expiryStr.match(/(\\d{4})-(\\d{2})-(\\d{2})/);\n                      if (isoMatch) {\n                        return new Date(parseInt(isoMatch[1]), parseInt(isoMatch[2]) - 1, parseInt(isoMatch[3]));\n                      }\n                      return null;\n                    } catch (error) {\n                      return null;\n                    }\n                  };\n                  \n                  // Calculate volume and premium by strike for options expiring this week\n                  const strikeVolumes = new Map<number, { volume: number; callVolume: number; putVolume: number; premium: number }>();\n                  \n                  tickerTrades.forEach(trade => {\n                    try {\n                      // Parse expiry date\n                      const expiryDate = parseExpiryDate(trade.expiry);\n                      if (!expiryDate) return;\n                      \n                      // Check if expiry is within this week\n                      if (expiryDate >= currentWeekStart && expiryDate <= currentWeekEnd) {\n                        const strike = trade.strike;\n                        if (!strikeVolumes.has(strike)) {\n                          strikeVolumes.set(strike, { volume: 0, callVolume: 0, putVolume: 0, premium: 0 });\n                        }\n                        const volumes = strikeVolumes.get(strike)!;\n                        volumes.volume += trade.volume;\n                        volumes.premium += parsePremium(trade.premium);\n                        if (trade.optionType === 'Call') {\n                          volumes.callVolume += trade.volume;\n                        } else {\n                          volumes.putVolume += trade.volume;\n                        }\n                      }\n                    } catch (error) {\n                      // Skip this trade\n                    }\n                  });\n                  \n                  // Sort by volume and get top 3\n                  const topStrikes = Array.from(strikeVolumes.entries())\n                    .sort((a, b) => b[1].volume - a[1].volume)\n                    .slice(0, 3);\n                  \n                  if (topStrikes.length > 0) {\n                    return (\n                      <div className=\"ticker-analytics\">\n                        <div className=\"analytics-badge key-levels-badge\">\n                          <Target size={12} />\n                          <span className=\"badge-label\">Top Strikes (Expiring This Week):</span>\n                          <span className=\"badge-strikes\">\n                            {topStrikes.map(([strike, volumes], idx) => (\n                              <span \n                                key={strike} \n                                className=\"level-strike level-high\"\n                                title={`Strike: ${strike}, Vol: ${formatVolume(volumes.volume)}, Premium: ${formatPremium(volumes.premium)}, Calls: ${formatVolume(volumes.callVolume)}, Puts: ${formatVolume(volumes.putVolume)}`}\n                              >\n                                {idx > 0 && ''}${strike} (Vol: {formatVolume(volumes.volume)}, Prem: {formatPremium(volumes.premium)})\n                              </span>\n                            ))}\n                          </span>\n                        </div>\n                      </div>\n                    );\n                  }\n                  return null;\n                })()}\n                \n                {/* Last Trade Section - Moved to bottom */}\n                {ticker.lastTrade && (\n                  <div className=\"detail-row last-trade-row\">\n                    <span className=\"detail-label\">Last Trade:</span>\n                    <span className=\"detail-value last-trade\">\n                      {ticker.lastTrade.optionType} ${ticker.lastTrade.strike} \n                      <span className={`trade-side ${ticker.lastTrade.optionType.toLowerCase()}`}>\n                        {ticker.lastTrade.optionType === 'Call' ? '↗' : '↘'}\n                      </span>\n                      {formatVolume(ticker.lastTrade.volume)}\n                      <span className=\"trade-timestamp\">\n                        {formatDateTime(ticker.lastTrade.timestamp)}\n                      </span>\n                    </span>\n                  </div>\n                )}\n          </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n});\n\nTickerList.displayName = 'TickerList';\n\nexport default TickerList;\n","import React, { memo, useMemo, useCallback, useState } from 'react';\nimport { VolumeProfileData, HighestVolumeData, formatVolume, OptionData } from '../utils/dataParser';\n\nexport interface VolumeProfileChartProps {\n  data: VolumeProfileData[];\n  highestVolumeData: HighestVolumeData | null;\n  ticker: string;\n  expiry?: string;\n  chartType: 'callput' | 'total';\n  currentPrice?: number; // Optional current stock price\n  trades?: OptionData[]; // Raw trade data for tooltips\n}\n\nconst VolumeProfileChart = memo<VolumeProfileChartProps>(({ \n  data, \n  highestVolumeData,\n  ticker, \n  expiry,\n  chartType,\n  currentPrice,\n  trades = []\n}) => {\n  // Tooltip state\n  const [tooltip, setTooltip] = useState<{\n    visible: boolean;\n    x: number;\n    y: number;\n    content: {\n      strike: number;\n      type?: 'Call' | 'Put';\n      volume: number;\n      trades: number;\n      premium: string;\n      premiumFull: string;\n      sweepTypes: string[];\n      tradeVolumes: number[];\n      expiries: string[];\n      size: number;\n      tradeDetails: Array<{\n        volume: number;\n        premium: string;\n        timestamp: string;\n        expiry: string;\n      }>;\n    } | null;\n  }>({\n    visible: false,\n    x: 0,\n    y: 0,\n    content: null\n  });\n\n  const getBarWidth = useCallback((volume: number, maxVolume: number) => {\n    if (maxVolume === 0) return 0;\n    // Scale to 46% of available space (48% total - 2% spacing on each side)\n    // This ensures bars don't exceed the available space with the new spacing\n    return Math.min((volume / maxVolume) * 46, 46);\n  }, []);\n\n  // Build tooltip data for a strike price and option type\n  const getTooltipData = useCallback((strike: number, optionType?: 'Call' | 'Put') => {\n    const strikeTrades = trades.filter(t => \n      t.strike === strike && (!optionType || t.optionType === optionType)\n    );\n    \n    const totalVolume = strikeTrades.reduce((sum, t) => sum + t.volume, 0);\n    const totalPremium = strikeTrades.reduce((sum, t) => {\n      const premium = t.premium.replace(/[$,]/g, '');\n      return sum + (parseFloat(premium) || 0);\n    }, 0);\n    \n    const premiumFormatted = totalPremium >= 1000000 \n      ? (totalPremium / 1000000).toFixed(2) + 'M' \n      : totalPremium >= 1000 \n      ? (totalPremium / 1000).toFixed(1) + 'K' \n      : totalPremium.toFixed(0);\n    \n    // Full premium value with commas\n    const premiumFull = totalPremium.toLocaleString('en-US', {\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    });\n    \n    const sweepTypes = [...new Set(strikeTrades.map(t => t.sweepType))].filter(Boolean);\n    \n    // Get individual trade volumes, sorted by volume descending\n    const tradeVolumes = strikeTrades\n      .map(t => t.volume)\n      .sort((a, b) => b - a); // Show all trades\n    \n    // Get unique expiry dates\n    const expiries = [...new Set(strikeTrades.map(t => t.expiry))].sort();\n    \n    // Size is the same as totalVolume (total contracts)\n    const size = totalVolume;\n    \n    // Get detailed trade information, sorted by volume descending\n    const tradeDetails = strikeTrades\n      .sort((a, b) => b.volume - a.volume)\n      .map(t => ({\n        volume: t.volume,\n        premium: t.premium,\n        timestamp: t.timestamp,\n        expiry: t.expiry\n      }));\n    \n    return {\n      strike,\n      type: optionType,\n      volume: totalVolume,\n      trades: strikeTrades.length,\n      premium: premiumFormatted,\n      premiumFull,\n      sweepTypes,\n      tradeVolumes,\n      expiries,\n      size,\n      tradeDetails\n    };\n  }, [trades]);\n\n  // Handle mouse enter on volume bar\n  const handleBarMouseEnter = useCallback((e: React.MouseEvent, strike: number, optionType?: 'Call' | 'Put') => {\n    const rect = e.currentTarget.getBoundingClientRect();\n    const tooltipData = getTooltipData(strike, optionType);\n    \n    setTooltip({\n      visible: true,\n      x: e.clientX,\n      y: rect.top - 10,\n      content: tooltipData\n    });\n  }, [getTooltipData]);\n\n  // Handle mouse leave\n  const handleBarMouseLeave = useCallback(() => {\n    setTooltip(prev => ({ ...prev, visible: false }));\n  }, []);\n\n  // Handle mouse move to update position\n  const handleBarMouseMove = useCallback((e: React.MouseEvent) => {\n    setTooltip(prev => ({\n      ...prev,\n      x: e.clientX,\n    }));\n  }, []);\n\n  // Determine current price - use provided currentPrice or fall back to highest volume strike\n  const getCurrentPrice = useCallback(() => {\n    return currentPrice || (highestVolumeData?.strike || null);\n  }, [currentPrice, highestVolumeData]);\n\n  // Check if a strike price is the current price\n  const isCurrentPrice = useCallback((strike: number) => {\n    const current = getCurrentPrice();\n    return current !== null && Math.abs(strike - current) < 0.01; // Allow for small floating point differences\n  }, [getCurrentPrice]);\n\n  // Show all strike prices (no filtering)\n  const getFilteredData = useCallback(() => {\n    return data\n      .sort((a, b) => a.strike - b.strike); // Sort in ascending order (lowest to highest)\n  }, [data]);\n\n  // Get chart data for filtered range\n  const filteredData = getFilteredData();\n  const filteredChartData = useMemo(() => {\n    if (!filteredData.length) return { maxVolume: 0, minStrike: 0, maxStrike: 0, maxTotalVolume: 0, totalVolumeSum: 0 };\n    \n    let maxVolume = 0;\n    let maxTotalVolume = 0;\n    let minStrike = Infinity;\n    let maxStrike = -Infinity;\n    let totalVolumeSum = 0;\n    \n    for (let i = 0; i < filteredData.length; i++) {\n      const d = filteredData[i];\n      maxVolume = Math.max(maxVolume, Math.max(d.callVolume, d.putVolume));\n      maxTotalVolume = Math.max(maxTotalVolume, d.totalVolume);\n      minStrike = Math.min(minStrike, d.strike);\n      maxStrike = Math.max(maxStrike, d.strike);\n      totalVolumeSum += d.totalVolume;\n    }\n    \n    return { \n      maxVolume, \n      minStrike: minStrike === Infinity ? 0 : minStrike, \n      maxStrike: maxStrike === -Infinity ? 0 : maxStrike, \n      maxTotalVolume,\n      totalVolumeSum\n    };\n  }, [filteredData]);\n\n  const getStrikePosition = useCallback((strike: number) => {\n    if (!filteredData.length) return 50;\n    if (filteredChartData.maxStrike === filteredChartData.minStrike) return 50;\n    \n    // Calculate position based on index in filtered data for even spacing\n    const index = filteredData.findIndex(item => item.strike === strike);\n    if (index === -1) return 50;\n    \n    const totalItems = filteredData.length;\n    const spacing = 100 / (totalItems + 1); // Even spacing with padding\n    \n    // For Call/Put chart: reverse positioning (lowest at top)\n    // For Total Volume chart: normal positioning (lowest at left)\n    if (chartType === 'callput') {\n      const reversedIndex = totalItems - 1 - index;\n      return spacing * (reversedIndex + 1);\n    } else {\n      // Total Volume chart: prices go from low to high (left to right)\n      return spacing * (index + 1);\n    }\n  }, [filteredData, filteredChartData, chartType]);\n\n  // Get position for current price (interpolates between strikes)\n  const getCurrentPricePosition = useCallback((price: number) => {\n    if (!filteredData.length) return 50;\n    if (filteredChartData.maxStrike === filteredChartData.minStrike) return 50;\n    \n    const minStrike = filteredChartData.minStrike;\n    const maxStrike = filteredChartData.maxStrike;\n    \n    // Clamp price to be within strike range\n    const clampedPrice = Math.max(minStrike, Math.min(maxStrike, price));\n    \n    // Find the strikes immediately above and below the current price\n    let lowerStrike = minStrike;\n    let upperStrike = maxStrike;\n    let lowerIndex = 0;\n    let upperIndex = filteredData.length - 1;\n    \n    for (let i = 0; i < filteredData.length - 1; i++) {\n      const currentStrike = filteredData[i].strike;\n      const nextStrike = filteredData[i + 1].strike;\n      \n      if (currentStrike <= clampedPrice && clampedPrice <= nextStrike) {\n        lowerStrike = currentStrike;\n        upperStrike = nextStrike;\n        lowerIndex = i;\n        upperIndex = i + 1;\n        break;\n      }\n    }\n    \n    // Calculate positions for the bounding strikes using same logic as getStrikePosition\n    const totalItems = filteredData.length;\n    const spacing = 100 / (totalItems + 1);\n    \n    let lowerPos, upperPos;\n    if (chartType === 'callput') {\n      // Reversed positioning for call/put chart\n      const lowerReversed = totalItems - 1 - lowerIndex;\n      const upperReversed = totalItems - 1 - upperIndex;\n      lowerPos = spacing * (lowerReversed + 1);\n      upperPos = spacing * (upperReversed + 1);\n    } else {\n      lowerPos = spacing * (lowerIndex + 1);\n      upperPos = spacing * (upperIndex + 1);\n    }\n    \n    // Interpolate between the two strike positions\n    if (upperStrike === lowerStrike) {\n      return lowerPos;\n    }\n    \n    const priceRatio = (clampedPrice - lowerStrike) / (upperStrike - lowerStrike);\n    const interpolatedPosition = lowerPos + (upperPos - lowerPos) * priceRatio;\n    \n    if (import.meta.env.DEV) {\n      console.log('Price interpolation:', {\n        price: clampedPrice,\n        lowerStrike,\n        upperStrike,\n        lowerPos: lowerPos.toFixed(2),\n        upperPos: upperPos.toFixed(2),\n        priceRatio: priceRatio.toFixed(3),\n        finalPos: interpolatedPosition.toFixed(2)\n      });\n    }\n    \n    return interpolatedPosition;\n  }, [filteredData, filteredChartData, chartType]);\n\n  // Calculate dynamic height based on number of strike prices\n  const getChartHeight = useCallback(() => {\n    const rowHeight = 18; // Height of each strike row\n    const minHeight = 400; // Minimum chart height\n    const calculatedHeight = Math.max(minHeight, filteredData.length * rowHeight + 40); // 40px padding\n    return calculatedHeight;\n  }, [filteredData.length]);\n\n  if (!data.length) {\n    return (\n      <div className=\"volume-profile-chart\">\n        <div className=\"chart-header\">\n          <h3>{ticker} {chartType === 'callput' ? 'Call/Put Volume' : 'Total Volume'}</h3>\n          {expiry && <span className=\"expiry-date\">{expiry}</span>}\n        </div>\n        <div className=\"no-data\">\n          <p>No volume data available for this ticker{expiry ? ` and expiry date` : ''}</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (chartType === 'callput') {\n    return (\n      <>\n      <div className=\"volume-profile-chart modern-mirrored-chart\">\n        <div className=\"chart-header modern-header\">\n          <h3>{ticker} Call/Put Volume</h3>\n          <div className=\"header-info\">\n            {getCurrentPrice() && (\n              <span className=\"current-price-display\">\n                Current Price: <strong>${getCurrentPrice()}</strong>\n              </span>\n            )}\n            {expiry && <span className=\"expiry-date\">{expiry}</span>}\n          </div>\n        </div>\n        \n        <div className=\"chart-container modern-container\">\n          \n          {/* Main Chart Area */}\n          <div \n            className=\"chart-area modern-chart-area\"\n            style={{ height: `${getChartHeight()}px` }}\n          >\n            {/* Center Line */}\n            <div className=\"center-line\"></div>\n            \n            {/* Strike Price Lines */}\n            <div className=\"strike-axis modern-strike-axis\">\n              {filteredData.map((item) => (\n                <div \n                  key={item.strike} \n                  className=\"strike-line modern-strike-line\"\n                  style={{ \n                    top: `${getStrikePosition(item.strike)}%`\n                  }}\n                >\n                  <span \n                    className={`strike-label modern-strike-label ${isCurrentPrice(item.strike) ? 'current-price-label' : ''}`}\n                  >\n                    {item.strike}\n                  </span>\n                </div>\n              ))}\n            </div>\n            \n            {/* Call/Put Volume Bars */}\n            <div className=\"volume-bars modern-volume-bars\">\n              {filteredData.map((item) => (\n                <div \n                  key={item.strike} \n                  className=\"strike-row modern-strike-row\"\n                  style={{ top: `${getStrikePosition(item.strike)}%` }}\n                >\n                  {/* Call volume bar (left side, green) */}\n                  <div \n                    className=\"volume-bar call-bar modern-call-bar\"\n                    style={{ \n                      width: `${getBarWidth(item.callVolume, filteredChartData.maxVolume)}%`,\n                      right: '52%' /* Moved 2% away from center to add spacing */\n                    }}\n                    onMouseEnter={(e) => handleBarMouseEnter(e, item.strike, 'Call')}\n                    onMouseLeave={handleBarMouseLeave}\n                    onMouseMove={handleBarMouseMove}\n                  >\n                    {item.callVolume > 0 && (\n                      <span className=\"volume-text modern-volume-text\">\n                        {formatVolume(item.callVolume)}\n                      </span>\n                    )}\n                  </div>\n                  \n                  {/* Put volume bar (right side, red) */}\n                  <div \n                    className=\"volume-bar put-bar modern-put-bar\"\n                    style={{ \n                      width: `${getBarWidth(item.putVolume, filteredChartData.maxVolume)}%`,\n                      left: '52%' /* Moved 2% away from center to add spacing */\n                    }}\n                    onMouseEnter={(e) => handleBarMouseEnter(e, item.strike, 'Put')}\n                    onMouseLeave={handleBarMouseLeave}\n                    onMouseMove={handleBarMouseMove}\n                  >\n                    {item.putVolume > 0 && (\n                      <span className=\"volume-text modern-volume-text\">\n                        {formatVolume(item.putVolume)}\n                      </span>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n            \n            {/* Current Price Indicator Line */}\n            {getCurrentPrice() && (\n              <div \n                className=\"current-price-line\"\n                style={{ \n                  top: `${getCurrentPricePosition(getCurrentPrice()!)}%`\n                }}\n              >\n                <span className=\"current-price-label-inline\" style={{\n                  position: 'absolute',\n                  left: '105%',\n                  top: '50%',\n                  transform: 'translateY(-50%)',\n                  background: 'linear-gradient(135deg, rgba(255, 193, 7, 0.95), rgba(255, 152, 0, 0.95))',\n                  color: '#000000',\n                  padding: '0.25rem 0.5rem',\n                  borderRadius: '4px',\n                  fontSize: '0.8rem',\n                  fontWeight: '700',\n                  whiteSpace: 'nowrap',\n                  border: '2px solid rgba(255, 193, 7, 1)',\n                  boxShadow: '0 2px 8px rgba(255, 193, 7, 0.4)',\n                  zIndex: 15\n                }}>\n                  ${getCurrentPrice()!.toFixed(2)}\n                </span>\n              </div>\n            )}\n          </div>\n        </div>\n        \n        {/* Legend */}\n        {/* <div className=\"chart-legend modern-legend\">\n          <div className=\"legend-item\">\n            <div className=\"legend-color call modern-legend-call\"></div>\n            <span>Call Volume</span>\n          </div>\n          <div className=\"legend-item\">\n            <div className=\"legend-color put modern-legend-put\"></div>\n            <span>Put Volume</span>\n          </div>\n        </div> */}\n      </div>\n\n      {/* Modern Tooltip */}\n      {tooltip.visible && tooltip.content && (\n        <div \n          className=\"modern-tooltip\"\n          style={{\n            position: 'fixed',\n            left: `${tooltip.x + 15}px`,\n            top: `${tooltip.y}px`,\n            transform: 'translateY(-50%)',\n            pointerEvents: 'auto',\n            zIndex: 9999\n          }}\n          onMouseEnter={() => setTooltip(prev => ({ ...prev, visible: true }))}\n          onMouseLeave={handleBarMouseLeave}\n        >\n          <div className=\"tooltip-header\">\n            <span className=\"tooltip-strike\">${tooltip.content.strike}</span>\n            {tooltip.content.type && (\n              <span className={`tooltip-type ${tooltip.content.type.toLowerCase()}`}>\n                {tooltip.content.type}\n              </span>\n            )}\n          </div>\n          <div className=\"tooltip-body\">\n            {tooltip.content.tradeDetails.length > 0 && (\n              <div className=\"tooltip-trade-details-only\">\n                <div className=\"tooltip-trade-header\">Trade Details:</div>\n                <div className=\"tooltip-trade-list\">\n                  {tooltip.content.tradeDetails.map((trade, idx) => (\n                    <div key={idx} className=\"tooltip-trade-item\">\n                      <div className=\"trade-item-row\">\n                        <span className=\"trade-item-label\">Vol:</span>\n                        <span className=\"trade-item-value\">{trade.volume.toLocaleString()}</span>\n                      </div>\n                      <div className=\"trade-item-row\">\n                        <span className=\"trade-item-label\">Premium:</span>\n                        <span className=\"trade-item-value\">{trade.premium}</span>\n                      </div>\n                      {trade.expiry && (\n                        <div className=\"trade-item-row\">\n                          <span className=\"trade-item-label\">Expiry:</span>\n                          <span className=\"trade-item-value\">\n                            {new Date(trade.expiry).toLocaleDateString('en-US', { \n                              month: 'short', \n                              day: 'numeric',\n                              year: 'numeric'\n                            })}\n                          </span>\n                        </div>\n                      )}\n                      <div className=\"trade-item-row\">\n                        <span className=\"trade-item-label\">Time:</span>\n                        <span className=\"trade-item-value trade-item-time\">\n                          {(() => {\n                            try {\n                              if (!trade.timestamp) return 'N/A';\n                              \n                              // Try parsing the Discord format: \"Monday, October 13, 2025 at 10:07 AM\"\n                              const date = new Date(trade.timestamp);\n                              \n                              // Check if date is valid\n                              if (!isNaN(date.getTime())) {\n                                return `${date.toLocaleDateString('en-US', { \n                                  month: 'short', \n                                  day: 'numeric',\n                                  year: 'numeric'\n                                })} ${date.toLocaleTimeString('en-US', { \n                                  hour: 'numeric', \n                                  minute: '2-digit',\n                                  hour12: true \n                                })}`;\n                              }\n                              \n                              // If date parsing failed, return the original timestamp\n                              return trade.timestamp;\n                            } catch (e) {\n                              return trade.timestamp || 'N/A';\n                            }\n                          })()}\n                        </span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n      </>\n    );\n  }\n\n  // Total Volume Chart (Vertical orientation)\n  return (\n    <>\n    <div className=\"volume-profile-chart total-chart\">\n      <div className=\"chart-header\">\n        <h3>{ticker} Total Volume</h3>\n        <div className=\"header-info\">\n          {getCurrentPrice() && (\n            <span className=\"current-price-display\">\n              Current Price: <strong>${getCurrentPrice()}</strong>\n            </span>\n          )}\n          {expiry && <span className=\"expiry-date\">{expiry}</span>}\n        </div>\n      </div>\n      \n      {/* Chart Header with Price Info */}\n      {/* <div className=\"chart-header\">\n        <div className=\"chart-title\">\n          {ticker} Total Volume\n        </div>\n        <div className=\"price-info\">\n          <div className=\"current-price-box\">\n            Current Price: ${getCurrentPrice()?.toFixed(2) || 'N/A'}\n          </div>\n          <div className=\"price-range-box\">\n            Range: ${filteredData.length > 0 ? filteredData[0].strike.toFixed(0) : 'N/A'} - ${filteredData.length > 0 ? filteredData[filteredData.length - 1].strike.toFixed(0) : 'N/A'}\n          </div>\n        </div>\n      </div> */}\n\n      <div className=\"chart-container vertical\">\n        \n        {/* Main Chart Area */}\n        <div \n          className=\"chart-area vertical\"\n          style={{ height: `${getChartHeight()}px` }}\n        >\n          {/* Total Volume Bars (Vertical) */}\n          <div className=\"volume-bars vertical\">\n            {filteredData.map((item) => (\n              <div \n                key={item.strike} \n                className=\"strike-column\"\n                style={{ left: `${getStrikePosition(item.strike)}%` }}\n              >\n                <div \n                  className=\"volume-bar total-bar vertical\"\n                  style={{ \n                    height: `${getBarWidth(item.totalVolume, filteredChartData.maxTotalVolume)}%`\n                  }}\n                  onMouseEnter={(e) => handleBarMouseEnter(e, item.strike)}\n                  onMouseLeave={handleBarMouseLeave}\n                  onMouseMove={handleBarMouseMove}\n                >\n                  {item.totalVolume > 0 && (\n                    <span className=\"volume-text volume-text-top\">\n                      {formatVolume(item.totalVolume)}\n                      <span className=\"volume-percentage\">\n                        ({filteredChartData.totalVolumeSum > 0 ? ((item.totalVolume / filteredChartData.totalVolumeSum) * 100).toFixed(1) : '0.0'}%)\n                      </span>\n                    </span>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n          \n          {/* Current Price Indicator Line (Vertical) */}\n          {getCurrentPrice() && (\n            <div \n              className=\"current-price-line vertical\"\n              style={{ \n                left: `${getCurrentPricePosition(getCurrentPrice()!)}%`\n              }}\n            >\n              <span className=\"current-price-label-inline\" style={{\n                position: 'absolute',\n                left: '50%',\n                top: '-30px',\n                transform: 'translateX(-50%)',\n                background: 'linear-gradient(135deg, rgba(255, 193, 7, 0.95), rgba(255, 152, 0, 0.95))',\n                color: '#000000',\n                padding: '0.25rem 0.5rem',\n                borderRadius: '4px',\n                fontSize: '0.8rem',\n                fontWeight: '700',\n                whiteSpace: 'nowrap',\n                border: '2px solid rgba(255, 193, 7, 1)',\n                boxShadow: '0 2px 8px rgba(255, 193, 7, 0.4)',\n                zIndex: 15\n              }}>\n                ${getCurrentPrice()!.toFixed(2)}\n              </span>\n            </div>\n          )}\n        </div>\n        \n        {/* X-Axis Price Labels (Bottom) - Moved outside chart area */}\n        <div className=\"x-axis-labels\">\n          {filteredData.map((item) => (\n            <div \n              key={item.strike} \n              className=\"x-axis-label\"\n              style={{ \n                left: `${getStrikePosition(item.strike)}%`\n              }}\n            >\n              <span \n                className={`strike-label ${isCurrentPrice(item.strike) ? 'current-price-label' : ''}`}\n              >\n                {item.strike}\n              </span>\n            </div>\n          ))}\n        </div>\n      </div>\n      \n      {/* Legend */}\n      {/* <div className=\"chart-legend\">\n        <div className=\"legend-item\">\n          <div className=\"legend-color total\"></div>\n          <span>Total Volume</span>\n        </div>\n      </div> */}\n\n      {/* Modern Tooltip */}\n      {tooltip.visible && tooltip.content && (\n        <div \n          className=\"modern-tooltip\"\n          style={{\n            position: 'fixed',\n            left: `${tooltip.x + 15}px`,\n            top: `${tooltip.y}px`,\n            transform: 'translateY(-50%)',\n            pointerEvents: 'auto',\n            zIndex: 9999\n          }}\n          onMouseEnter={() => setTooltip(prev => ({ ...prev, visible: true }))}\n          onMouseLeave={handleBarMouseLeave}\n        >\n          <div className=\"tooltip-header\">\n            <span className=\"tooltip-strike\">${tooltip.content.strike}</span>\n            {tooltip.content.type && (\n              <span className={`tooltip-type ${tooltip.content.type.toLowerCase()}`}>\n                {tooltip.content.type}\n              </span>\n            )}\n          </div>\n          <div className=\"tooltip-body\">\n            {tooltip.content.tradeDetails.length > 0 && (\n              <div className=\"tooltip-trade-details-only\">\n                <div className=\"tooltip-trade-header\">Trade Details:</div>\n                <div className=\"tooltip-trade-list\">\n                  {tooltip.content.tradeDetails.map((trade, idx) => (\n                    <div key={idx} className=\"tooltip-trade-item\">\n                      <div className=\"trade-item-row\">\n                        <span className=\"trade-item-label\">Vol:</span>\n                        <span className=\"trade-item-value\">{trade.volume.toLocaleString()}</span>\n                      </div>\n                      <div className=\"trade-item-row\">\n                        <span className=\"trade-item-label\">Premium:</span>\n                        <span className=\"trade-item-value\">{trade.premium}</span>\n                      </div>\n                      {trade.expiry && (\n                        <div className=\"trade-item-row\">\n                          <span className=\"trade-item-label\">Expiry:</span>\n                          <span className=\"trade-item-value\">\n                            {new Date(trade.expiry).toLocaleDateString('en-US', { \n                              month: 'short', \n                              day: 'numeric',\n                              year: 'numeric'\n                            })}\n                          </span>\n                        </div>\n                      )}\n                      <div className=\"trade-item-row\">\n                        <span className=\"trade-item-label\">Time:</span>\n                        <span className=\"trade-item-value trade-item-time\">\n                          {(() => {\n                            try {\n                              if (!trade.timestamp) return 'N/A';\n                              \n                              // Try parsing the Discord format: \"Monday, October 13, 2025 at 10:07 AM\"\n                              const date = new Date(trade.timestamp);\n                              \n                              // Check if date is valid\n                              if (!isNaN(date.getTime())) {\n                                return `${date.toLocaleDateString('en-US', { \n                                  month: 'short', \n                                  day: 'numeric',\n                                  year: 'numeric'\n                                })} ${date.toLocaleTimeString('en-US', { \n                                  hour: 'numeric', \n                                  minute: '2-digit',\n                                  hour12: true \n                                })}`;\n                              }\n                              \n                              // If date parsing failed, return the original timestamp\n                              return trade.timestamp;\n                            } catch (e) {\n                              return trade.timestamp || 'N/A';\n                            }\n                          })()}\n                        </span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n    </>\n  );\n});\n\nVolumeProfileChart.displayName = 'VolumeProfileChart';\n\nexport default VolumeProfileChart;\n","import React, { memo, useMemo, useCallback, useState } from 'react';\nimport { ArrowUpDown } from 'lucide-react';\nimport { OptionData, formatVolume, parseTimestampFromData } from '../utils/dataParser';\n\ninterface TradeListProps {\n  trades: OptionData[];\n  ticker: string;\n  expiry?: string;\n}\n\ninterface TradeRowProps {\n  trade: OptionData;\n  index: number;\n}\n\nconst TradeRow: React.FC<TradeRowProps> = memo(({ trade }) => {\n  const formatExecutionDateTime = (timestamp: string): string => {\n    try {\n      // Parse the timestamp format from CSV data\n      // Expected format: \"Thursday, October 9, 2025 at 2:15 PM\"\n      const fullMatch = timestamp.match(/(\\w+),\\s+(\\w+)\\s+(\\d+),\\s+(\\d+)\\s+at\\s+(\\d+):(\\d+)\\s+(AM|PM)/i);\n      \n      if (fullMatch) {\n        const [, , monthName, day, , hour, minute, ampm] = fullMatch;\n        \n        // Convert to 24-hour format\n        let hour24 = parseInt(hour);\n        if (ampm.toUpperCase() === 'PM' && hour24 !== 12) {\n          hour24 += 12;\n        } else if (ampm.toUpperCase() === 'AM' && hour24 === 12) {\n          hour24 = 0;\n        }\n        \n        // Format date as MM/DD\n        const monthMap: { [key: string]: string } = {\n          'january': '01', 'february': '02', 'march': '03', 'april': '04',\n          'may': '05', 'june': '06', 'july': '07', 'august': '08',\n          'september': '09', 'october': '10', 'november': '11', 'december': '12'\n        };\n        \n        const month = monthMap[monthName.toLowerCase()] || '01';\n        const formattedDate = `${month}/${day.padStart(2, '0')}`;\n        const formattedTime = `${hour24.toString().padStart(2, '0')}:${minute}`;\n        \n        return `${formattedDate} ${formattedTime}`;\n      }\n      \n      // Fallback to standard date parsing\n      const date = new Date(timestamp);\n      if (isNaN(date.getTime())) return 'Unknown';\n      \n      return date.toLocaleDateString('en-US', { month: '2-digit', day: '2-digit' }) + ' ' + \n             date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: false });\n    } catch (error) {\n      return 'Unknown';\n    }\n  };\n\n  // Parse premium to check if over $1M\n  const parsePremiumValue = (premium: string): number => {\n    const cleanPremium = premium.replace(/[$,]/g, '');\n    const num = parseFloat(cleanPremium);\n    \n    if (premium.includes('M')) {\n      return num * 1000000;\n    } else if (premium.includes('K')) {\n      return num * 1000;\n    }\n    return num;\n  };\n\n  const premiumValue = parsePremiumValue(trade.premium);\n  const isHighValue = premiumValue >= 1000000;\n\n  return (\n    <div \n      className=\"trade-row-horizontal\"\n      style={{\n        backgroundColor: trade.optionType === 'Call' \n          ? (isHighValue ? 'rgba(0, 80, 0, 0.7)' : 'rgba(0, 100, 0, 0.5)') // Darker green for high value\n          : (isHighValue ? 'rgba(100, 0, 0, 0.7)' : 'rgba(139, 0, 0, 0.5)'), // Darker red for high value\n      }}\n    >\n      <div className=\"trade-cell-h symbol\">{trade.ticker}</div>\n      <div className=\"trade-cell-h strike\">{trade.strike}</div>\n      <div className=\"trade-cell-h expiry\">{new Date(trade.expiry).toLocaleDateString('en-US', { month: '2-digit', day: '2-digit', year: 'numeric' })}</div>\n      <div className=\"trade-cell-h type\">{trade.optionType}</div>\n      <div className=\"trade-cell-h side\">{trade.sweepType}</div>\n      <div className=\"trade-cell-h size\">{formatVolume(trade.volume)}</div>\n      <div className=\"trade-cell-h premium\">{trade.premium}</div>\n      <div className=\"trade-cell-h volume\">{formatVolume(trade.volume)}</div>\n      <div className=\"trade-cell-h oi\">{formatVolume(trade.openInterest)}</div>\n      <div className=\"trade-cell-h exec-time\">{formatExecutionDateTime(trade.timestamp)}</div>\n    </div>\n  );\n});\n\nTradeRow.displayName = 'TradeRow';\n\ntype SortOption = 'trade-date' | 'expiry-date' | 'size';\n\nconst TradeList: React.FC<TradeListProps> = memo(({ trades, ticker, expiry }) => {\n  const [sortBy, setSortBy] = useState<SortOption>('trade-date');\n  \n  const sortedTrades = useMemo(() => {\n    return [...trades].sort((a, b) => {\n      switch (sortBy) {\n        case 'trade-date': {\n          // Sort by timestamp (most recent first)\n          const dateA = parseTimestampFromData(a.timestamp);\n          const dateB = parseTimestampFromData(b.timestamp);\n          if (!dateA || !dateB) return 0;\n          return dateB.getTime() - dateA.getTime();\n        }\n        case 'expiry-date': {\n          // Sort by expiry date (earliest first)\n          const expiryA = new Date(a.expiry);\n          const expiryB = new Date(b.expiry);\n          return expiryA.getTime() - expiryB.getTime();\n        }\n        case 'size': {\n          // Sort by volume (largest first)\n          return b.volume - a.volume;\n        }\n        default:\n          return 0;\n      }\n    });\n  }, [trades, sortBy]);\n\n  const filteredTrades = useMemo(() => {\n    if (!expiry) return sortedTrades;\n    return sortedTrades.filter(trade => trade.expiry === expiry);\n  }, [sortedTrades, expiry]);\n\n  if (filteredTrades.length === 0) {\n    return (\n      <div className=\"trade-list\">\n        <div className=\"trade-list-header\">\n          <h3>{ticker} Trade History</h3>\n          {expiry && <span className=\"expiry-filter\">Filtered by: {new Date(expiry).toLocaleDateString()}</span>}\n        </div>\n        <div className=\"no-trades\">\n          <p>No trades found for {ticker}{expiry ? ` on ${new Date(expiry).toLocaleDateString()}` : ''}</p>\n        </div>\n      </div>\n    );\n  }\n\n  const getTradeKey = useCallback((trade: OptionData, index: number) => \n    `${trade.ticker}-${trade.strike}-${trade.expiry}-${trade.timestamp}-${index}`,\n    []\n  );\n\n  return (\n    <div className=\"trade-list\">\n      <div className=\"trade-list-header\">\n        <div className=\"header-left\">\n          <h3>{ticker} Trade History</h3>\n          {expiry && <span className=\"expiry-filter\">Filtered by: {new Date(expiry).toLocaleDateString()}</span>}\n        </div>\n        <div className=\"header-right\">\n          <div className=\"sort-controls\">\n            <ArrowUpDown className=\"sort-icon\" />\n            <select \n              className=\"sort-selector\"\n              value={sortBy}\n              onChange={(e) => setSortBy(e.target.value as SortOption)}\n            >\n              <option value=\"trade-date\">Sort by Trade Date (Recent First)</option>\n              <option value=\"expiry-date\">Sort by Expiry Date (Earliest First)</option>\n              <option value=\"size\">Sort by Size (Largest First)</option>\n            </select>\n          </div>\n          <div className=\"trade-count\">{filteredTrades.length} trades</div>\n        </div>\n      </div>\n      \n      <div className=\"trade-list-content\">\n        <div className=\"trade-list-table\">\n          <div className=\"trade-table-header\">\n            <div className=\"header-cell\">Symbol</div>\n            <div className=\"header-cell\">Strike</div>\n            <div className=\"header-cell\">Expiration</div>\n            <div className=\"header-cell\">Call/Put</div>\n            <div className=\"header-cell\">Side</div>\n            <div className=\"header-cell\">Size</div>\n            <div className=\"header-cell\">Premium</div>\n            <div className=\"header-cell\">Volume</div>\n            <div className=\"header-cell\">OI</div>\n            <div className=\"header-cell\">Exec Time</div>\n          </div>\n          \n          <div className=\"trade-table-body\">\n            {filteredTrades.map((trade, index) => (\n              <TradeRow key={getTradeKey(trade, index)} trade={trade} index={index} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nTradeList.displayName = 'TradeList';\n\nexport default TradeList;\n","import React, { useMemo } from 'react';\nimport { OptionData } from '../utils/dataParser';\n\n// Import the parsePremium function from dataParser\nfunction parsePremium(premium: string): number {\n  const hasK = premium.includes('K');\n  const hasM = premium.includes('M');\n  \n  const cleanPremium = premium.replace(/[$,]/g, '');\n  const num = parseFloat(cleanPremium);\n  \n  if (hasM) {\n    return num * 1000000;\n  } else if (hasK) {\n    return num * 1000;\n  }\n  \n  return num;\n}\n\ninterface StrikeExpiryHeatmapProps {\n  trades: OptionData[];\n  currentPrice?: number;\n}\n\ninterface HeatmapCell {\n  value: number;\n  volume: number;\n  callVolume: number;\n  putVolume: number;\n  trades: number;\n}\n\nconst StrikeExpiryHeatmap: React.FC<StrikeExpiryHeatmapProps> = ({ trades, currentPrice }) => {\n  const { heatmapData, strikes, expiries, maxAbsValue } = useMemo(() => {\n    // Group trades by strike and expiry\n    const dataMap = new Map<string, HeatmapCell>();\n    const strikeSet = new Set<number>();\n    const expirySet = new Set<string>();\n\n    trades.forEach(trade => {\n      const key = `${trade.strike}_${trade.expiry}`;\n      strikeSet.add(trade.strike);\n      expirySet.add(trade.expiry);\n\n      if (!dataMap.has(key)) {\n        dataMap.set(key, {\n          value: 0,\n          volume: 0,\n          callVolume: 0,\n          putVolume: 0,\n          trades: 0\n        });\n      }\n\n      const cell = dataMap.get(key)!;\n      const totalValue = parsePremium(trade.premium);\n\n      // Debug logging for small values\n      if (Math.abs(totalValue) < 10 && trade.ticker === 'TSLA') {\n        console.log(`Small premium detected: ${trade.ticker} ${trade.strike} ${trade.expiry} ${trade.optionType} - Premium: \"${trade.premium}\" -> Parsed: ${totalValue}`);\n      }\n\n      // Aggregate based on option type\n      if (trade.optionType === 'Call') {\n        cell.value += totalValue;\n        cell.callVolume += trade.volume;\n      } else {\n        cell.value -= totalValue; // Puts are negative\n        cell.putVolume += trade.volume;\n      }\n\n      cell.volume += trade.volume;\n      cell.trades += 1;\n    });\n\n    // Sort strikes and expiries\n    const sortedStrikes = Array.from(strikeSet).sort((a, b) => b - a); // Descending\n    const sortedExpiries = Array.from(expirySet).sort((a, b) => {\n      const dateA = new Date(a);\n      const dateB = new Date(b);\n      return dateA.getTime() - dateB.getTime();\n    });\n\n    // Find max absolute value for color scaling\n    let maxAbs = 0;\n    dataMap.forEach(cell => {\n      const absValue = Math.abs(cell.value);\n      if (absValue > maxAbs) maxAbs = absValue;\n    });\n\n    return {\n      heatmapData: dataMap,\n      strikes: sortedStrikes,\n      expiries: sortedExpiries,\n      maxAbsValue: maxAbs\n    };\n  }, [trades]);\n\n  const getColor = (value: number, volume: number) => {\n    if (volume === 0) return 'rgba(255, 255, 255, 0.03)';\n    \n    const intensity = Math.abs(value) / maxAbsValue;\n    const alpha = 0.2 + (intensity * 0.6); // Range from 0.2 to 0.8\n\n    if (value > 0) {\n      // Positive (Calls) - Green\n      return `rgba(76, 175, 80, ${alpha})`;\n    } else {\n      // Negative (Puts) - Red\n      return `rgba(244, 67, 54, ${alpha})`;\n    }\n  };\n\n  const formatValue = (value: number): string => {\n    const absValue = Math.abs(value);\n    if (absValue >= 1000000) {\n      return `${value >= 0 ? '' : '-'}$${(absValue / 1000000).toFixed(1)}M`;\n    } else if (absValue >= 1000) {\n      return `${value >= 0 ? '' : '-'}$${(absValue / 1000).toFixed(1)}K`;\n    } else if (absValue >= 1) {\n      return `${value >= 0 ? '' : '-'}$${absValue.toFixed(0)}`;\n    } else {\n      // For very small values, show more precision\n      return `${value >= 0 ? '' : '-'}$${absValue.toFixed(2)}`;\n    }\n  };\n\n  const isCurrentPriceStrike = (strike: number): boolean => {\n    if (!currentPrice) return false;\n    return Math.abs(strike - currentPrice) < 2; // Within $2\n  };\n\n  const getCellKey = (strike: number, expiry: string) => `${strike}_${expiry}`;\n\n  // Check if we have any data to display\n  const hasData = strikes.length > 0 && expiries.length > 0;\n\n  return (\n    <div className=\"strike-expiry-heatmap\">\n      <div className=\"heatmap-header\">\n        <h3>Strike × Expiry Premium Heatmap</h3>\n        <div className=\"heatmap-legend\">\n          <div className=\"legend-item\">\n            <div className=\"legend-color\" style={{ background: 'rgba(76, 175, 80, 0.6)' }}></div>\n            <span>Call Premium</span>\n          </div>\n          <div className=\"legend-item\">\n            <div className=\"legend-color\" style={{ background: 'rgba(244, 67, 54, 0.6)' }}></div>\n            <span>Put Premium</span>\n          </div>\n          {currentPrice && (\n            <div className=\"legend-item\">\n              <div className=\"legend-color\" style={{ background: 'rgba(255, 193, 7, 0.4)', border: '2px solid #ffc107' }}></div>\n              <span>Current Price (~${currentPrice.toFixed(2)})</span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"heatmap-scroll-container\">\n        {hasData ? (\n          <table className=\"heatmap-table\">\n            <thead>\n              <tr>\n                <th className=\"heatmap-corner\">Strike</th>\n                {expiries.map(expiry => (\n                  <th key={expiry} className=\"heatmap-expiry\">\n                    {new Date(expiry).toLocaleDateString('en-US', { \n                      month: '2-digit', \n                      day: '2-digit',\n                      year: '2-digit'\n                    })}\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {strikes.map(strike => {\n                const isAtMoney = isCurrentPriceStrike(strike);\n                return (\n                  <tr key={strike} className={isAtMoney ? 'current-price-row' : ''}>\n                    <td className={`heatmap-strike ${isAtMoney ? 'at-money' : ''}`}>\n                      {strike.toFixed(1)}\n                      {isAtMoney && <span className=\"atm-indicator\">▶</span>}\n                    </td>\n                    {expiries.map(expiry => {\n                      const cell = heatmapData.get(getCellKey(strike, expiry));\n                      const hasData = cell && cell.volume > 0;\n                      \n                      return (\n                        <td\n                          key={`${strike}_${expiry}`}\n                          className={`heatmap-cell ${hasData ? 'has-data' : ''} ${isAtMoney ? 'at-money-cell' : ''}`}\n                          style={{\n                            background: hasData ? getColor(cell!.value, cell!.volume) : undefined\n                          }}\n                          title={hasData ? \n                            `Strike: $${strike}\\nExpiry: ${expiry}\\nNet Premium: ${formatValue(cell!.value)}\\nVolume: ${cell!.volume}\\nCalls: ${cell!.callVolume}\\nPuts: ${cell!.putVolume}\\nTrades: ${cell!.trades}` \n                            : undefined\n                          }\n                        >\n                          {hasData && (\n                            <div className=\"cell-content\">\n                              <span className=\"cell-value\">{formatValue(cell!.value)}</span>\n                            </div>\n                          )}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        ) : (\n          <div className=\"heatmap-no-data\">\n            <p>No heatmap data available</p>\n            <p>Select a ticker with options data to view the heatmap</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default StrikeExpiryHeatmap;\n\n","import { OptionData, parseTimestampFromData } from './dataParser';\n\nexport interface HourlyTradeData {\n  hour: number; // 0-23\n  totalVolume: number;\n  callVolume: number;\n  putVolume: number;\n  totalTrades: number;\n  callTrades: number;\n  putTrades: number;\n  totalPremium: number;\n  callPremium: number;\n  putPremium: number;\n  sweepCount: number;\n  unusualSweepCount: number;\n  highlyUnusualSweepCount: number;\n  avgTradeSize: number;\n  callPutRatio: number;\n  premiumCallPutRatio: number;\n  psychology: TradePsychology;\n  trades: OptionData[]; // Individual trades for this hour\n}\n\nexport interface TradePsychology {\n  sentiment: 'bullish' | 'bearish' | 'neutral' | 'mixed';\n  confidence: 'high' | 'medium' | 'low';\n  activity: 'high' | 'medium' | 'low';\n  sweepIntensity: 'high' | 'medium' | 'low';\n  description: string;\n}\n\nexport interface DailyTradePsychology {\n  date: string; // YYYY-MM-DD format\n  dayOfWeek: string;\n  hourlyData: HourlyTradeData[];\n  dailySummary: {\n    totalVolume: number;\n    totalTrades: number;\n    totalPremium: number;\n    callPutRatio: number;\n    sweepCount: number;\n    uniqueExpiries: string[];\n    psychology: TradePsychology;\n    peakHour: number;\n    peakVolume: number;\n    peakTrades: number;\n  };\n}\n\nexport interface FourDayPsychologyAnalysis {\n  days: DailyTradePsychology[];\n  overallTrend: {\n    sentiment: 'bullish' | 'bearish' | 'neutral' | 'mixed';\n    confidence: 'high' | 'medium' | 'low';\n    activity: 'increasing' | 'decreasing' | 'stable';\n    description: string;\n  };\n  hourlyPatterns: {\n    [hour: number]: {\n      avgVolume: number;\n      avgTrades: number;\n      sentiment: 'bullish' | 'bearish' | 'neutral' | 'mixed';\n      consistency: number; // 0-1, how consistent the pattern is across days\n    };\n  };\n}\n\n/**\n * Parse premium string to number\n */\nfunction parsePremium(premium: string): number {\n  const cleanPremium = premium.replace(/[$,K]/g, '');\n  const num = parseFloat(cleanPremium);\n  \n  if (premium.includes('K')) {\n    return num * 1000;\n  } else if (premium.includes('M')) {\n    return num * 1000000;\n  }\n  \n  return num;\n}\n\n/**\n * Analyze trade psychology for a given hour\n */\nfunction analyzeTradePsychology(hourlyData: HourlyTradeData): TradePsychology {\n  const { callPutRatio, premiumCallPutRatio, sweepCount, unusualSweepCount, highlyUnusualSweepCount, totalVolume, totalTrades } = hourlyData;\n  \n  // Determine sentiment based on call/put ratios\n  let sentiment: 'bullish' | 'bearish' | 'neutral' | 'mixed' = 'neutral';\n  if (callPutRatio > 1.5 && premiumCallPutRatio > 1.3) {\n    sentiment = 'bullish';\n  } else if (callPutRatio < 0.7 && premiumCallPutRatio < 0.8) {\n    sentiment = 'bearish';\n  } else if (Math.abs(callPutRatio - 1) < 0.3 && Math.abs(premiumCallPutRatio - 1) < 0.3) {\n    sentiment = 'neutral';\n  } else {\n    sentiment = 'mixed';\n  }\n  \n  // Determine confidence based on sweep activity and volume\n  let confidence: 'high' | 'medium' | 'low' = 'low';\n  const totalSweeps = sweepCount + unusualSweepCount + highlyUnusualSweepCount;\n  if (totalSweeps > 5 || highlyUnusualSweepCount > 0 || totalVolume > 50000) {\n    confidence = 'high';\n  } else if (totalSweeps > 2 || unusualSweepCount > 0 || totalVolume > 20000) {\n    confidence = 'medium';\n  }\n  \n  // Determine activity level\n  let activity: 'high' | 'medium' | 'low' = 'low';\n  if (totalTrades > 20 || totalVolume > 30000) {\n    activity = 'high';\n  } else if (totalTrades > 10 || totalVolume > 15000) {\n    activity = 'medium';\n  }\n  \n  // Determine sweep intensity\n  let sweepIntensity: 'high' | 'medium' | 'low' = 'low';\n  if (highlyUnusualSweepCount > 0 || totalSweeps > 8) {\n    sweepIntensity = 'high';\n  } else if (unusualSweepCount > 0 || totalSweeps > 3) {\n    sweepIntensity = 'medium';\n  }\n  \n  // Generate description\n  let description = '';\n  if (sentiment === 'bullish') {\n    description = `Strong bullish sentiment with ${callPutRatio.toFixed(1)}:1 call/put ratio`;\n  } else if (sentiment === 'bearish') {\n    description = `Strong bearish sentiment with ${(1/callPutRatio).toFixed(1)}:1 put/call ratio`;\n  } else if (sentiment === 'mixed') {\n    description = `Mixed sentiment with conflicting signals`;\n  } else {\n    description = `Neutral sentiment with balanced activity`;\n  }\n  \n  if (sweepIntensity === 'high') {\n    description += ` and high sweep activity (${totalSweeps} sweeps)`;\n  } else if (sweepIntensity === 'medium') {\n    description += ` and moderate sweep activity (${totalSweeps} sweeps)`;\n  }\n  \n  if (activity === 'high') {\n    description += ` - High volume trading`;\n  } else if (activity === 'medium') {\n    description += ` - Moderate activity`;\n  }\n  \n  return {\n    sentiment,\n    confidence,\n    activity,\n    sweepIntensity,\n    description\n  };\n}\n\n/**\n * Check if an hour is within trading hours (9:30 AM - 4:15 PM ET)\n */\nfunction isTradingHour(hour: number): boolean {\n  // Trading hours: 9:30 AM (9.5) to 4:15 PM (16.25)\n  return hour >= 9.5 && hour <= 16.25;\n}\n\n/**\n * Get trading hours for the day (9:30 AM - 4:15 PM)\n */\nfunction getTradingHours(): number[] {\n  const hours: number[] = [];\n  // Start at 9:30 AM (9.5) and go to 4:15 PM (16.25)\n  for (let hour = 9.5; hour <= 16.25; hour += 0.5) {\n    hours.push(hour);\n  }\n  return hours;\n}\n\n/**\n * Aggregate trades by hour for a given day (trading hours only)\n */\nexport function aggregateTradesByHour(trades: OptionData[], targetDate: Date): HourlyTradeData[] {\n  const hourlyMap = new Map<number, {\n    totalVolume: number;\n    callVolume: number;\n    putVolume: number;\n    totalTrades: number;\n    callTrades: number;\n    putTrades: number;\n    totalPremium: number;\n    callPremium: number;\n    putPremium: number;\n    sweepCount: number;\n    unusualSweepCount: number;\n    highlyUnusualSweepCount: number;\n    trades: OptionData[];\n  }>();\n  \n  // Initialize only trading hours (9:30 AM - 4:15 PM)\n  const tradingHours = getTradingHours();\n  tradingHours.forEach(hour => {\n    hourlyMap.set(hour, {\n      totalVolume: 0,\n      callVolume: 0,\n      putVolume: 0,\n      totalTrades: 0,\n      callTrades: 0,\n      putTrades: 0,\n      totalPremium: 0,\n      callPremium: 0,\n      putPremium: 0,\n      sweepCount: 0,\n      unusualSweepCount: 0,\n      highlyUnusualSweepCount: 0,\n      trades: []\n    });\n  });\n  \n  // Process each trade\n  trades.forEach(trade => {\n    const tradeDate = parseTimestampFromData(trade.timestamp);\n    if (!tradeDate) return;\n    \n    // Check if trade is on the target date\n    if (tradeDate.getFullYear() === targetDate.getFullYear() &&\n        tradeDate.getMonth() === targetDate.getMonth() &&\n        tradeDate.getDate() === targetDate.getDate()) {\n      \n      // Calculate hour with minutes (e.g., 9:30 AM = 9.5, 10:00 AM = 10)\n      const rawHour = tradeDate.getHours() + (tradeDate.getMinutes() / 60);\n      \n      // Only process trades within trading hours\n      if (!isTradingHour(rawHour)) return;\n      \n      // Round to nearest 30-minute interval (9.5, 10.0, 10.5, etc.)\n      const hour = Math.round(rawHour * 2) / 2;\n      \n      const hourData = hourlyMap.get(hour);\n      if (!hourData) return; // Skip if hour not found in map\n      \n      // Add trade to the trades array\n      hourData.trades.push(trade);\n      \n      // Update volume and trade counts\n      hourData.totalVolume += trade.volume;\n      hourData.totalTrades += 1;\n      \n      const premium = parsePremium(trade.premium);\n      hourData.totalPremium += premium;\n      \n      if (trade.optionType === 'Call') {\n        hourData.callVolume += trade.volume;\n        hourData.callTrades += 1;\n        hourData.callPremium += premium;\n      } else {\n        hourData.putVolume += trade.volume;\n        hourData.putTrades += 1;\n        hourData.putPremium += premium;\n      }\n      \n      // Count sweeps\n      if (trade.sweepType) {\n        const sweepType = trade.sweepType.toLowerCase();\n        if (sweepType.includes('highly unusual')) {\n          hourData.highlyUnusualSweepCount += 1;\n        } else if (sweepType.includes('unusual')) {\n          hourData.unusualSweepCount += 1;\n        } else if (sweepType.includes('sweep')) {\n          hourData.sweepCount += 1;\n        }\n      }\n    }\n  });\n  \n  // Convert to HourlyTradeData array with psychology analysis\n  return Array.from(hourlyMap.entries()).map(([hour, data]) => {\n    const callPutRatio = data.putVolume > 0 ? data.callVolume / data.putVolume : data.callVolume;\n    const premiumCallPutRatio = data.putPremium > 0 ? data.callPremium / data.putPremium : data.callPremium;\n    const avgTradeSize = data.totalTrades > 0 ? data.totalVolume / data.totalTrades : 0;\n    \n    const hourlyData: HourlyTradeData = {\n      hour,\n      totalVolume: data.totalVolume,\n      callVolume: data.callVolume,\n      putVolume: data.putVolume,\n      totalTrades: data.totalTrades,\n      callTrades: data.callTrades,\n      putTrades: data.putTrades,\n      totalPremium: data.totalPremium,\n      callPremium: data.callPremium,\n      putPremium: data.putPremium,\n      sweepCount: data.sweepCount,\n      unusualSweepCount: data.unusualSweepCount,\n      highlyUnusualSweepCount: data.highlyUnusualSweepCount,\n      avgTradeSize,\n      callPutRatio,\n      premiumCallPutRatio,\n      trades: data.trades,\n      psychology: { sentiment: 'neutral' as const, confidence: 'low' as const, activity: 'low' as const, sweepIntensity: 'low' as const, description: '' }\n    };\n    \n    // Re-analyze psychology with complete data\n    hourlyData.psychology = analyzeTradePsychology(hourlyData);\n    \n    return hourlyData;\n  })\n  .filter((data): data is HourlyTradeData => data !== undefined && data !== null)\n  .sort((a, b) => a.hour - b.hour);\n}\n\n/**\n * Analyze trade psychology for a single day\n */\nexport function analyzeDailyTradePsychology(trades: OptionData[], targetDate: Date): DailyTradePsychology {\n  const hourlyData = aggregateTradesByHour(trades, targetDate);\n  \n  // Handle case where no hourly data is available\n  if (!hourlyData || hourlyData.length === 0) {\n    return {\n      date: targetDate.toLocaleDateString('en-US', { \n        year: 'numeric', \n        month: 'long', \n        day: 'numeric' \n      }),\n      dayOfWeek: targetDate.toLocaleDateString('en-US', { weekday: 'long' }),\n      hourlyData: [],\n      dailySummary: {\n        totalVolume: 0,\n        totalTrades: 0,\n        totalPremium: 0,\n        callPutRatio: 0,\n        peakVolume: 0,\n        peakHour: 0,\n        peakTrades: 0,\n        sweepCount: 0,\n        uniqueExpiries: [],\n        psychology: {\n          sentiment: 'neutral',\n          confidence: 'low',\n          activity: 'low',\n          sweepIntensity: 'low',\n          description: 'No trading data available'\n        }\n      }\n    };\n  }\n  \n  // Calculate daily summary\n  const dailySummary = hourlyData.reduce((summary, hourData) => {\n    summary.totalVolume += hourData.totalVolume;\n    summary.totalTrades += hourData.totalTrades;\n    summary.totalPremium += hourData.totalPremium;\n    summary.sweepCount += hourData.sweepCount + hourData.unusualSweepCount + hourData.highlyUnusualSweepCount;\n    \n    if (hourData.totalVolume > summary.peakVolume) {\n      summary.peakVolume = hourData.totalVolume;\n      summary.peakHour = hourData.hour;\n    }\n    \n    if (hourData.totalTrades > summary.peakTrades) {\n      summary.peakTrades = hourData.totalTrades;\n    }\n    \n    return summary;\n  }, {\n    totalVolume: 0,\n    totalTrades: 0,\n    totalPremium: 0,\n    callPutRatio: 0,\n    sweepCount: 0,\n    uniqueExpiries: [] as string[],\n    psychology: { sentiment: 'neutral' as 'bullish' | 'bearish' | 'neutral' | 'mixed', confidence: 'low' as 'high' | 'medium' | 'low', activity: 'low' as 'high' | 'medium' | 'low', sweepIntensity: 'low' as 'high' | 'medium' | 'low', description: '' },\n    peakHour: 0,\n    peakVolume: 0,\n    peakTrades: 0\n  });\n  \n  // Calculate overall call/put ratio\n  const totalCallVolume = hourlyData.reduce((sum, h) => sum + h.callVolume, 0);\n  const totalPutVolume = hourlyData.reduce((sum, h) => sum + h.putVolume, 0);\n  dailySummary.callPutRatio = totalPutVolume > 0 ? totalCallVolume / totalPutVolume : totalCallVolume;\n  \n  // Calculate unique expiries for the day\n  const expirySet = new Set<string>();\n  trades.forEach(trade => {\n    const tradeDate = parseTimestampFromData(trade.timestamp);\n    if (tradeDate && tradeDate.toISOString().split('T')[0] === targetDate.toISOString().split('T')[0]) {\n      expirySet.add(trade.expiry);\n    }\n  });\n  dailySummary.uniqueExpiries = Array.from(expirySet).sort((a, b) => new Date(a).getTime() - new Date(b).getTime()) as string[];\n  \n  // Analyze overall daily psychology - create a complete HourlyTradeData object\n  const dailyHourlyData: HourlyTradeData = {\n    hour: 0,\n    totalVolume: dailySummary.totalVolume,\n    callVolume: totalCallVolume,\n    putVolume: totalPutVolume,\n    totalTrades: dailySummary.totalTrades,\n    callTrades: hourlyData.reduce((sum, h) => sum + h.callTrades, 0),\n    putTrades: hourlyData.reduce((sum, h) => sum + h.putTrades, 0),\n    totalPremium: dailySummary.totalPremium,\n    callPremium: hourlyData.reduce((sum, h) => sum + h.callPremium, 0),\n    putPremium: hourlyData.reduce((sum, h) => sum + h.putPremium, 0),\n    sweepCount: hourlyData.reduce((sum, h) => sum + h.sweepCount, 0),\n    unusualSweepCount: hourlyData.reduce((sum, h) => sum + h.unusualSweepCount, 0),\n    highlyUnusualSweepCount: hourlyData.reduce((sum, h) => sum + h.highlyUnusualSweepCount, 0),\n    avgTradeSize: dailySummary.totalTrades > 0 ? dailySummary.totalVolume / dailySummary.totalTrades : 0,\n    callPutRatio: dailySummary.callPutRatio,\n    premiumCallPutRatio: 0,\n    trades: trades.filter(t => {\n      const tradeDate = parseTimestampFromData(t.timestamp);\n      return tradeDate && tradeDate.toISOString().split('T')[0] === targetDate.toISOString().split('T')[0];\n    }),\n    psychology: { sentiment: 'neutral' as const, confidence: 'low' as const, activity: 'low' as const, sweepIntensity: 'low' as const, description: '' }\n  };\n  \n  dailySummary.psychology = analyzeTradePsychology(dailyHourlyData);\n  \n  const dateStr = targetDate.toISOString().split('T')[0];\n  const dayOfWeek = targetDate.toLocaleDateString('en-US', { weekday: 'long' });\n  \n  return {\n    date: dateStr,\n    dayOfWeek,\n    hourlyData,\n    dailySummary\n  };\n}\n\n/**\n * Get the previous trading day (Monday-Friday, excluding weekends)\n */\nfunction getPreviousTradingDay(date: Date): Date {\n  const prevDay = new Date(date);\n  prevDay.setDate(date.getDate() - 1);\n  \n  // If it's Sunday (0), go back to Friday (5)\n  if (prevDay.getDay() === 0) {\n    prevDay.setDate(prevDay.getDate() - 2);\n  }\n  // If it's Saturday (6), go back to Friday (5)\n  else if (prevDay.getDay() === 6) {\n    prevDay.setDate(prevDay.getDate() - 1);\n  }\n  \n  return prevDay;\n}\n\n/**\n * Check if a date is a trading day (Monday-Friday)\n */\nfunction isTradingDay(date: Date): boolean {\n  const dayOfWeek = date.getDay();\n  return dayOfWeek >= 1 && dayOfWeek <= 5; // Monday = 1, Friday = 5\n}\n\n/**\n * Get the most recent date from the trades data\n */\nfunction getMostRecentTradeDate(trades: OptionData[]): Date {\n  let mostRecentDate = new Date(0); // Start with epoch\n  \n  trades.forEach(trade => {\n    const tradeDate = parseTimestampFromData(trade.timestamp);\n    if (tradeDate && tradeDate > mostRecentDate) {\n      mostRecentDate = tradeDate;\n    }\n  });\n  \n  return mostRecentDate;\n}\n\n/**\n * Analyze trade psychology for the past 5 trading days\n */\nexport function analyzeFourDayTradePsychology(trades: OptionData[]): FourDayPsychologyAnalysis {\n  const days: DailyTradePsychology[] = [];\n  \n  // Get the most recent date from the actual trade data\n  const mostRecentDate = getMostRecentTradeDate(trades);\n  \n  // Start from the most recent trading day in the data\n  let currentDate = new Date(mostRecentDate);\n  if (!isTradingDay(currentDate)) {\n    // If the most recent date is weekend, start from the last trading day\n    currentDate = getPreviousTradingDay(currentDate);\n  }\n  \n  // Get data for the past 5 trading days\n  for (let i = 0; i < 5; i++) {\n    const targetDate = new Date(currentDate);\n    targetDate.setHours(0, 0, 0, 0); // Start of day\n    \n    const dayAnalysis = analyzeDailyTradePsychology(trades, targetDate);\n    days.push(dayAnalysis);\n    \n    // Move to previous trading day\n    currentDate = getPreviousTradingDay(currentDate);\n  }\n  \n  // Reverse to get chronological order (oldest to newest)\n  days.reverse();\n  \n  // Analyze overall trend\n  const overallTrend = analyzeOverallTrend(days);\n  \n  // Analyze hourly patterns\n  const hourlyPatterns = analyzeHourlyPatterns(days);\n  \n  return {\n    days,\n    overallTrend,\n    hourlyPatterns\n  };\n}\n\n/**\n * Analyze overall trend across the 5 trading days\n */\nfunction analyzeOverallTrend(days: DailyTradePsychology[]): FourDayPsychologyAnalysis['overallTrend'] {\n  if (days.length === 0) {\n    return {\n      sentiment: 'neutral',\n      confidence: 'low',\n      activity: 'stable',\n      description: 'No data available'\n    };\n  }\n  \n  // Calculate trend metrics\n  const sentiments = days.map(d => d.dailySummary.psychology.sentiment);\n  const volumes = days.map(d => d.dailySummary.totalVolume);\n  const confidences = days.map(d => d.dailySummary.psychology.confidence);\n  \n  // Determine overall sentiment\n  const sentimentCounts = sentiments.reduce((acc, sentiment) => {\n    acc[sentiment] = (acc[sentiment] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n  \n  const dominantSentiment = Object.entries(sentimentCounts)\n    .sort(([,a], [,b]) => b - a)[0][0] as 'bullish' | 'bearish' | 'neutral' | 'mixed';\n  \n  // Determine confidence\n  const highConfidenceDays = confidences.filter(c => c === 'high').length;\n  const confidence = highConfidenceDays >= 2 ? 'high' : \n                    highConfidenceDays >= 1 ? 'medium' : 'low';\n  \n  // Determine activity trend\n  const volumeTrend = volumes[volumes.length - 1] - volumes[0];\n  const avgVolume = volumes.reduce((sum, v) => sum + v, 0) / volumes.length;\n  const activity = volumeTrend > avgVolume * 0.2 ? 'increasing' :\n                   volumeTrend < -avgVolume * 0.2 ? 'decreasing' : 'stable';\n  \n  // Generate description\n  let description = `Overall ${dominantSentiment} sentiment over 5 trading days`;\n  if (confidence === 'high') {\n    description += ' with high confidence';\n  } else if (confidence === 'medium') {\n    description += ' with moderate confidence';\n  }\n  \n  if (activity === 'increasing') {\n    description += ' and increasing activity';\n  } else if (activity === 'decreasing') {\n    description += ' and decreasing activity';\n  } else {\n    description += ' with stable activity';\n  }\n  \n  return {\n    sentiment: dominantSentiment,\n    confidence,\n    activity,\n    description\n  };\n}\n\n/**\n * Analyze hourly patterns across the 5 trading days (trading hours only)\n */\nfunction analyzeHourlyPatterns(days: DailyTradePsychology[]): FourDayPsychologyAnalysis['hourlyPatterns'] {\n  const patterns: FourDayPsychologyAnalysis['hourlyPatterns'] = {};\n  \n  // Initialize only trading hours (9:30 AM - 4:15 PM)\n  const tradingHours = getTradingHours();\n  tradingHours.forEach(hour => {\n    patterns[hour] = {\n      avgVolume: 0,\n      avgTrades: 0,\n      sentiment: 'neutral',\n      consistency: 0\n    };\n  });\n  \n  // Calculate averages and patterns for each trading hour\n  tradingHours.forEach(hour => {\n    const hourData = days.map(day => day.hourlyData.find(h => h.hour === hour)).filter((h): h is HourlyTradeData => h !== undefined);\n    \n    if (hourData.length === 0) return;\n    \n    // Calculate averages\n    const avgVolume = hourData.reduce((sum, h) => sum + h.totalVolume, 0) / hourData.length;\n    const avgTrades = hourData.reduce((sum, h) => sum + h.totalTrades, 0) / hourData.length;\n    \n    // Determine dominant sentiment for this hour\n    const sentiments = hourData.map(h => h.psychology.sentiment);\n    const sentimentCounts = sentiments.reduce((acc, sentiment) => {\n      acc[sentiment] = (acc[sentiment] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n    \n    const dominantSentiment = Object.entries(sentimentCounts)\n      .sort(([,a], [,b]) => b - a)[0][0] as 'bullish' | 'bearish' | 'neutral' | 'mixed';\n    \n    // Calculate consistency (how often the same sentiment occurs)\n    const maxCount = Math.max(...Object.values(sentimentCounts));\n    const consistency = maxCount / hourData.length;\n    \n    patterns[hour] = {\n      avgVolume,\n      avgTrades,\n      sentiment: dominantSentiment,\n      consistency\n    };\n  });\n  \n  return patterns;\n}\n\n/**\n * Get the 5 most recent trading days with data\n */\nexport function getRecentTradingDays(trades: OptionData[]): Date[] {\n  const dates = new Set<string>();\n  \n  trades.forEach(trade => {\n    const tradeDate = parseTimestampFromData(trade.timestamp);\n    if (tradeDate && isTradingDay(tradeDate)) {\n      const dateStr = tradeDate.toISOString().split('T')[0];\n      dates.add(dateStr);\n    }\n  });\n  \n  const sortedDates = Array.from(dates)\n    .map(dateStr => new Date(dateStr))\n    .sort((a, b) => b.getTime() - a.getTime())\n    .slice(0, 5);\n  \n  return sortedDates;\n}\n\n// New interfaces for ticker weekly analysis\nexport interface WeeklyTickerData {\n  weekStart: string; // YYYY-MM-DD format\n  weekEnd: string;   // YYYY-MM-DD format\n  ticker: string;\n  totalVolume: number;\n  callVolume: number;\n  putVolume: number;\n  totalTrades: number;\n  callTrades: number;\n  putTrades: number;\n  totalPremium: number;\n  callPremium: number;\n  putPremium: number;\n  callPutRatio: number;\n  premiumCallPutRatio: number;\n  sweepCount: number;\n  unusualSweepCount: number;\n  highlyUnusualSweepCount: number;\n  avgTradeSize: number;\n  uniqueExpiries: string[];\n  psychology: TradePsychology;\n}\n\nexport interface TickerWeeklyAnalysis {\n  ticker: string;\n  weeks: WeeklyTickerData[];\n  overallSentiment: 'bullish' | 'bearish' | 'neutral' | 'mixed';\n  trendDirection: 'improving' | 'declining' | 'stable';\n  confidence: 'high' | 'medium' | 'low';\n}\n\n/**\n * Get week start date (Monday) for a given date\n */\nfunction getWeekStart(date: Date): Date {\n  const day = date.getDay();\n  const diff = date.getDate() - day + (day === 0 ? -6 : 1); // Adjust when day is Sunday\n  return new Date(date.setDate(diff));\n}\n\n/**\n * Get week end date (Friday) for a given date\n */\nfunction getWeekEnd(weekStart: Date): Date {\n  const weekEnd = new Date(weekStart);\n  weekEnd.setDate(weekStart.getDate() + 4); // Friday is 4 days after Monday\n  return weekEnd;\n}\n\n/**\n * Format date to YYYY-MM-DD string\n */\nfunction formatDate(date: Date): string {\n  return date.toISOString().split('T')[0];\n}\n\n/**\n * Analyze weekly trade psychology (similar to hourly but for weekly data)\n */\nfunction analyzeWeeklyTradePsychology(weeklyData: {\n  callPutRatio: number;\n  premiumCallPutRatio: number;\n  totalVolume: number;\n  totalTrades: number;\n  sweepCount: number;\n  unusualSweepCount: number;\n  highlyUnusualSweepCount: number;\n  avgTradeSize: number;\n}): TradePsychology {\n  const { callPutRatio, premiumCallPutRatio, sweepCount, unusualSweepCount, highlyUnusualSweepCount, totalVolume, totalTrades } = weeklyData;\n  \n  // Determine sentiment based on call/put ratios\n  let sentiment: 'bullish' | 'bearish' | 'neutral' | 'mixed' = 'neutral';\n  if (callPutRatio > 1.5 && premiumCallPutRatio > 1.3) {\n    sentiment = 'bullish';\n  } else if (callPutRatio < 0.7 && premiumCallPutRatio < 0.8) {\n    sentiment = 'bearish';\n  } else if (Math.abs(callPutRatio - 1) < 0.3 && Math.abs(premiumCallPutRatio - 1) < 0.3) {\n    sentiment = 'neutral';\n  } else {\n    sentiment = 'mixed';\n  }\n\n  // Determine activity level\n  let activity: 'high' | 'medium' | 'low' = 'low';\n  if (totalVolume > 100000 || totalTrades > 1000) {\n    activity = 'high';\n  } else if (totalVolume > 10000 || totalTrades > 100) {\n    activity = 'medium';\n  }\n\n  // Determine sweep intensity\n  let sweepIntensity: 'high' | 'medium' | 'low' = 'low';\n  const totalSweeps = sweepCount + unusualSweepCount + highlyUnusualSweepCount;\n  if (totalSweeps > 50 || highlyUnusualSweepCount > 10) {\n    sweepIntensity = 'high';\n  } else if (totalSweeps > 10 || unusualSweepCount > 5) {\n    sweepIntensity = 'medium';\n  }\n\n  // Determine confidence\n  let confidence: 'high' | 'medium' | 'low' = 'low';\n  const volumeThreshold = 50000;\n  const tradesThreshold = 500;\n  \n  if (totalVolume > volumeThreshold && totalTrades > tradesThreshold && totalSweeps > 20) {\n    confidence = 'high';\n  } else if (totalVolume > volumeThreshold / 2 && totalTrades > tradesThreshold / 2 && totalSweeps > 5) {\n    confidence = 'medium';\n  }\n\n  // Generate description\n  let description = '';\n  if (sentiment === 'bullish') {\n    description = `Strong bullish sentiment with ${callPutRatio.toFixed(1)}:1 call/put ratio and high call premium dominance`;\n  } else if (sentiment === 'bearish') {\n    description = `Bearish sentiment with ${callPutRatio.toFixed(1)}:1 call/put ratio indicating put buying pressure`;\n  } else if (sentiment === 'neutral') {\n    description = `Balanced sentiment with neutral call/put ratios around 1:1`;\n  } else {\n    description = `Mixed sentiment with varying call/put ratios indicating uncertainty`;\n  }\n\n  if (sweepIntensity === 'high') {\n    description += ` and high sweep activity (${totalSweeps} sweeps)`;\n  } else if (sweepIntensity === 'medium') {\n    description += ` with moderate sweep activity`;\n  }\n\n  return {\n    sentiment,\n    confidence,\n    activity,\n    sweepIntensity,\n    description\n  };\n}\n\n/**\n * Analyze ticker sentiment by week\n */\nexport function analyzeTickerWeeklySentiment(trades: OptionData[]): TickerWeeklyAnalysis[] {\n  // Group trades by ticker\n  const tickerGroups = new Map<string, OptionData[]>();\n  \n  trades.forEach(trade => {\n    if (!tickerGroups.has(trade.ticker)) {\n      tickerGroups.set(trade.ticker, []);\n    }\n    tickerGroups.get(trade.ticker)!.push(trade);\n  });\n\n  const analyses: TickerWeeklyAnalysis[] = [];\n\n  tickerGroups.forEach((tickerTrades, ticker) => {\n    // Group by week\n    const weekGroups = new Map<string, OptionData[]>();\n    \n    tickerTrades.forEach(trade => {\n      const tradeDate = parseTimestampFromData(trade.timestamp);\n      if (tradeDate) {\n        const weekStart = getWeekStart(new Date(tradeDate));\n        const weekKey = formatDate(weekStart);\n        \n        if (!weekGroups.has(weekKey)) {\n          weekGroups.set(weekKey, []);\n        }\n        weekGroups.get(weekKey)!.push(trade);\n      }\n    });\n\n    // Analyze each week\n    const weeks: WeeklyTickerData[] = [];\n    \n    weekGroups.forEach((weekTrades, weekKey) => {\n      const weekStartDate = new Date(weekKey);\n      const weekEndDate = getWeekEnd(new Date(weekStartDate));\n      \n      // Calculate weekly metrics\n      const totalVolume = weekTrades.reduce((sum, trade) => sum + trade.volume, 0);\n      const callTrades = weekTrades.filter(trade => trade.optionType === 'Call');\n      const putTrades = weekTrades.filter(trade => trade.optionType === 'Put');\n      \n      const callVolume = callTrades.reduce((sum, trade) => sum + trade.volume, 0);\n      const putVolume = putTrades.reduce((sum, trade) => sum + trade.volume, 0);\n      \n      const totalTrades = weekTrades.length;\n      const callTradeCount = callTrades.length;\n      const putTradeCount = putTrades.length;\n      \n      const totalPremium = weekTrades.reduce((sum, trade) => {\n        const premium = parseFloat(trade.premium.replace(/[$,]/g, ''));\n        return sum + (isNaN(premium) ? 0 : premium);\n      }, 0);\n      \n      const callPremium = callTrades.reduce((sum, trade) => {\n        const premium = parseFloat(trade.premium.replace(/[$,]/g, ''));\n        return sum + (isNaN(premium) ? 0 : premium);\n      }, 0);\n      \n      const putPremium = putTrades.reduce((sum, trade) => {\n        const premium = parseFloat(trade.premium.replace(/[$,]/g, ''));\n        return sum + (isNaN(premium) ? 0 : premium);\n      }, 0);\n      \n      const callPutRatio = putVolume > 0 ? callVolume / putVolume : callVolume;\n      const premiumCallPutRatio = putPremium > 0 ? callPremium / putPremium : callPremium;\n      \n      const sweepCount = weekTrades.filter(trade => \n        trade.sweepType && trade.sweepType.toLowerCase().includes('sweep')\n      ).length;\n      \n      const unusualSweepCount = weekTrades.filter(trade => \n        trade.sweepType && trade.sweepType.toLowerCase().includes('unusual')\n      ).length;\n      \n      const highlyUnusualSweepCount = weekTrades.filter(trade => \n        trade.sweepType && trade.sweepType.toLowerCase().includes('highly unusual')\n      ).length;\n      \n      const avgTradeSize = totalTrades > 0 ? totalVolume / totalTrades : 0;\n      \n      const uniqueExpiries = [...new Set(weekTrades.map(trade => trade.expiry))];\n      \n      // Analyze psychology for this week\n      const psychology = analyzeWeeklyTradePsychology({\n        callPutRatio,\n        premiumCallPutRatio,\n        totalVolume,\n        totalTrades,\n        sweepCount,\n        unusualSweepCount,\n        highlyUnusualSweepCount,\n        avgTradeSize\n      });\n\n      weeks.push({\n        weekStart: formatDate(weekStartDate),\n        weekEnd: formatDate(weekEndDate),\n        ticker,\n        totalVolume,\n        callVolume,\n        putVolume,\n        totalTrades,\n        callTrades: callTradeCount,\n        putTrades: putTradeCount,\n        totalPremium,\n        callPremium,\n        putPremium,\n        callPutRatio,\n        premiumCallPutRatio,\n        sweepCount,\n        unusualSweepCount,\n        highlyUnusualSweepCount,\n        avgTradeSize,\n        uniqueExpiries,\n        psychology\n      });\n    });\n\n    // Sort weeks by date (most recent first)\n    weeks.sort((a, b) => {\n      const dateA = new Date(a.weekStart);\n      const dateB = new Date(b.weekStart);\n      return dateB.getTime() - dateA.getTime();\n    });\n\n    // Determine overall sentiment and trend\n    const sentiments = weeks.map(w => w.psychology.sentiment);\n    const sentimentCounts = sentiments.reduce((acc, sentiment) => {\n      acc[sentiment] = (acc[sentiment] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    const overallSentiment = Object.entries(sentimentCounts)\n      .sort(([,a], [,b]) => b - a)[0][0] as 'bullish' | 'bearish' | 'neutral' | 'mixed';\n\n    // Determine trend direction by comparing recent weeks\n    let trendDirection: 'improving' | 'declining' | 'stable' = 'stable';\n    if (weeks.length >= 2) {\n      const recentSentiment = weeks[0].psychology.sentiment;\n      const previousSentiment = weeks[1].psychology.sentiment;\n      \n      if ((recentSentiment === 'bullish' && previousSentiment !== 'bullish') ||\n          (recentSentiment === 'bearish' && previousSentiment !== 'bearish')) {\n        trendDirection = 'improving';\n      } else if ((recentSentiment === 'bearish' && previousSentiment === 'bullish') ||\n                 (recentSentiment === 'neutral' && previousSentiment === 'bullish')) {\n        trendDirection = 'declining';\n      }\n    }\n\n    // Calculate confidence based on consistency\n    const maxCount = Math.max(...Object.values(sentimentCounts));\n    const confidence = maxCount / sentiments.length > 0.7 ? 'high' : \n                      maxCount / sentiments.length > 0.5 ? 'medium' : 'low';\n\n    analyses.push({\n      ticker,\n      weeks,\n      overallSentiment,\n      trendDirection,\n      confidence\n    });\n  });\n\n  // Sort by total volume across all weeks (most active tickers first)\n  analyses.sort((a, b) => {\n    const aTotalVolume = a.weeks.reduce((sum, week) => sum + week.totalVolume, 0);\n    const bTotalVolume = b.weeks.reduce((sum, week) => sum + week.totalVolume, 0);\n    return bTotalVolume - aTotalVolume;\n  });\n\n  return analyses;\n}\n","import React, { useMemo, useState } from 'react';\nimport { OptionData, formatPremium, parseTimestampFromData, parsePremium } from '../utils/dataParser';\nimport { \n  analyzeFourDayTradePsychology, \n  DailyTradePsychology,\n  HourlyTradeData \n} from '../utils/tradePsychology';\n\ninterface TickerPsychologyAnalysisProps {\n  ticker: string;\n  trades: OptionData[];\n}\n\nconst TickerPsychologyAnalysis: React.FC<TickerPsychologyAnalysisProps> = ({ ticker, trades }) => {\n  const [selectedDay, setSelectedDay] = useState<number>(0);\n  const [tooltip, setTooltip] = useState<{\n    visible: boolean;\n    x: number;\n    y: number;\n    content: HourlyTradeData | null;\n  }>({\n    visible: false,\n    x: 0,\n    y: 0,\n    content: null\n  });\n  \n  const analysis = useMemo(() => {\n    if (!trades || trades.length === 0) return null;\n    return analyzeFourDayTradePsychology(trades);\n  }, [trades]);\n\n  const handleBarMouseEnter = (event: React.MouseEvent, hourData: HourlyTradeData) => {\n    const rect = event.currentTarget.getBoundingClientRect();\n    setTooltip({\n      visible: true,\n      x: rect.left + rect.width / 2,\n      y: rect.top,\n      content: hourData\n    });\n  };\n\n  const handleBarMouseLeave = () => {\n    setTooltip(prev => ({ ...prev, visible: false }));\n  };\n\n  if (!analysis || analysis.days.length === 0) {\n    return (\n      <div className=\"ticker-psychology-analysis\">\n        <div className=\"psychology-header\">\n          <h3>{ticker} Trade Psychology</h3>\n          <p>5-Day Trading Psychology Analysis</p>\n        </div>\n        <div className=\"no-data\">\n          <p>No trade data available for {ticker} psychology analysis</p>\n        </div>\n      </div>\n    );\n  }\n\n  const selectedDayData = analysis.days[selectedDay];\n\n  return (\n    <div className=\"ticker-psychology-analysis\">\n      <div className=\"psychology-header\">\n        <h3>{ticker} Trade Psychology</h3>\n        <p>5-Day Trading Psychology Analysis</p>\n        <div className=\"overall-trend\">\n          <div className={`trend-indicator ${analysis.overallTrend.sentiment}`}>\n            <span className=\"trend-sentiment\">{analysis.overallTrend.sentiment.toUpperCase()}</span>\n            <span className=\"trend-confidence\">{analysis.overallTrend.confidence} confidence</span>\n          </div>\n          <p className=\"trend-description\">{analysis.overallTrend.description}</p>\n        </div>\n      </div>\n\n      <div className=\"four-day-layout\">\n        {analysis.days.map((day, index) => (\n          <DayColumn\n            key={day.date}\n            day={day}\n            isSelected={index === selectedDay}\n            onClick={() => setSelectedDay(index)}\n            index={index}\n          />\n        ))}\n      </div>\n\n      <div className=\"hourly-chart\">\n        <h4>Hourly Breakdown: {selectedDayData.dayOfWeek}, {selectedDayData.date}</h4>\n        <div className=\"chart-container\">\n          <div className=\"chart-grid\">\n            {selectedDayData.hourlyData.map((hourData) => (\n              <HourBar\n                key={hourData.hour}\n                hourData={hourData}\n                maxVolume={Math.max(...selectedDayData.hourlyData.map(h => h.totalVolume))}\n                onMouseEnter={(e) => handleBarMouseEnter(e, hourData)}\n                onMouseLeave={handleBarMouseLeave}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Modern Tooltip */}\n      {tooltip.visible && tooltip.content && (\n        <div \n          className=\"modern-tooltip\"\n          style={{\n            position: 'fixed',\n            left: `${tooltip.x + 15}px`,\n            top: `${tooltip.y}px`,\n            transform: 'translateY(-50%)',\n            pointerEvents: 'auto',\n            zIndex: 9999\n          }}\n          onMouseEnter={() => setTooltip(prev => ({ ...prev, visible: true }))}\n          onMouseLeave={handleBarMouseLeave}\n        >\n          <div className=\"tooltip-header\">\n            <span className=\"tooltip-strike\">{formatHour(tooltip.content.hour)}</span>\n            <span className={`tooltip-type ${tooltip.content.psychology.sentiment}`}>\n              {tooltip.content.psychology.sentiment.toUpperCase()}\n            </span>\n          </div>\n          <div className=\"tooltip-body\">\n            <div className=\"tooltip-section\">\n              <div className=\"tooltip-section-title\">Summary</div>\n              <div className=\"tooltip-row\">\n                <span className=\"tooltip-label\">Total Volume</span>\n                <span className=\"tooltip-value\">{formatVolume(tooltip.content.totalVolume)}</span>\n              </div>\n              <div className=\"tooltip-row\">\n                <span className=\"tooltip-label\">Total Trades</span>\n                <span className=\"tooltip-value\">{tooltip.content.totalTrades}</span>\n              </div>\n              <div className=\"tooltip-row\">\n                <span className=\"tooltip-label\">Call/Put Ratio</span>\n                <span className=\"tooltip-value\">{tooltip.content.callPutRatio.toFixed(2)}:1</span>\n              </div>\n              <div className=\"tooltip-row\">\n                <span className=\"tooltip-label\">Total Premium</span>\n                <span className=\"tooltip-value\">{formatPremium(tooltip.content.totalPremium)}</span>\n              </div>\n            </div>\n            \n            {tooltip.content.trades && tooltip.content.trades.length > 0 && (\n              <div className=\"tooltip-section\">\n                <div className=\"tooltip-section-title\">Individual Trades</div>\n                <div className=\"trades-list\">\n                  {tooltip.content.trades.slice(0, 5).map((trade, index) => (\n                    <div key={index} className={`trade-item ${trade.optionType.toLowerCase()}-trade`}>\n                      <div className=\"trade-header\">\n                        <span className={`trade-type ${trade.optionType.toLowerCase()}`}>{trade.optionType}</span>\n                        <span className=\"trade-strike\">${trade.strike}</span>\n                        <span className=\"trade-expiry\">{new Date(trade.expiry).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}</span>\n                      </div>\n                      <div className=\"trade-details\">\n                        <span className=\"trade-volume\">Vol: {trade.volume}</span>\n                        <span className=\"trade-premium\">Premium: {formatPremium(parsePremium(trade.premium))}</span>\n                        {trade.sweepType && (\n                          <span className=\"trade-sweep\">{trade.sweepType}</span>\n                        )}\n                      </div>\n                      <div className=\"trade-time\">\n                        {new Date(parseTimestampFromData(trade.timestamp) || trade.timestamp).toLocaleTimeString('en-US', { \n                          hour: 'numeric', \n                          minute: '2-digit',\n                          hour12: true \n                        })}\n                      </div>\n                    </div>\n                  ))}\n                  {tooltip.content.trades.length > 5 && (\n                    <div className=\"more-trades\">\n                      +{tooltip.content.trades.length - 5} more trades\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\ninterface DayColumnProps {\n  day: DailyTradePsychology;\n  isSelected: boolean;\n  onClick: () => void;\n  index: number;\n}\n\nconst DayColumn: React.FC<DayColumnProps> = ({ day, isSelected, onClick }) => {\n  return (\n    <div \n      className={`day-column ${isSelected ? 'selected' : ''}`}\n      onClick={onClick}\n    >\n      <div className=\"day-header\">\n        <h4>{day.dayOfWeek}</h4>\n        <p className=\"day-date-short\">{day.date}</p>\n      </div>\n      \n      <div className=\"day-metrics\">\n        <div className=\"metric-row\">\n          <span className=\"metric-label\">Volume</span>\n          <span className=\"metric-value\">{formatVolume(day.dailySummary.totalVolume)}</span>\n        </div>\n        <div className=\"metric-row\">\n          <span className=\"metric-label\">Trades</span>\n          <span className=\"metric-value\">{day.dailySummary.totalTrades}</span>\n        </div>\n        <div className=\"metric-row\">\n          <span className=\"metric-label\">C/P Ratio</span>\n          <span className=\"metric-value\">{day.dailySummary.callPutRatio.toFixed(1)}</span>\n        </div>\n        <div className=\"metric-row\">\n          <span className=\"metric-label\">Sweeps</span>\n          <span className=\"metric-value\">{day.dailySummary.sweepCount}</span>\n        </div>\n        <div className=\"metric-row\">\n          <span className=\"metric-label\">Premium</span>\n          <span className=\"metric-value\">{formatPremium(day.dailySummary.totalPremium)}</span>\n        </div>\n        <div className=\"metric-row\">\n          <span className=\"metric-label\">Expiries</span>\n          <span className=\"metric-value\">{day.dailySummary.uniqueExpiries.length}</span>\n        </div>\n      </div>\n      \n      <div className={`psychology-indicator ${day.dailySummary.psychology.sentiment}`}>\n        <span className=\"psychology-sentiment\">{day.dailySummary.psychology.sentiment.toUpperCase()}</span>\n        <span className=\"psychology-confidence\">{day.dailySummary.psychology.confidence}</span>\n      </div>\n      \n      <div className=\"mini-chart\">\n        {day.hourlyData.map((hourData) => (\n          <div\n            key={hourData.hour}\n            className={`mini-hour-bar ${hourData.psychology.sentiment}`}\n            style={{\n              height: `${Math.max(2, (hourData.totalVolume / Math.max(...day.hourlyData.map(h => h.totalVolume))) * 100)}%`\n            }}\n            title={`${formatHour(hourData.hour)}: ${formatVolume(hourData.totalVolume)} volume, ${hourData.psychology.sentiment} sentiment`}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\ninterface HourBarProps {\n  hourData: HourlyTradeData;\n  maxVolume: number;\n  onMouseEnter: (event: React.MouseEvent) => void;\n  onMouseLeave: () => void;\n}\n\nconst HourBar: React.FC<HourBarProps> = ({ hourData, maxVolume, onMouseEnter, onMouseLeave }) => {\n  const height = maxVolume > 0 ? (hourData.totalVolume / maxVolume) * 100 : 0;\n  const hasTrades = hourData.totalVolume > 0;\n  \n  return (\n    <div className=\"hour-bar-container\">\n      <div className=\"hour-label\">{formatHour(hourData.hour)}</div>\n      <div className=\"hour-bar-wrapper\">\n        <div\n          className={`hour-bar ${hasTrades ? `${hourData.psychology.sentiment} ${hourData.psychology.activity}` : 'no-trades'}`}\n          style={hasTrades ? { height: `${Math.max(5, height)}%` } : {}}\n          onMouseEnter={hasTrades ? onMouseEnter : undefined}\n          onMouseLeave={hasTrades ? onMouseLeave : undefined}\n        >\n          <div className=\"bar-content\">\n            <div className=\"volume-info\">\n              <span className=\"volume\">{formatVolume(hourData.totalVolume)}</span>\n              <span className=\"trades\">{hourData.totalTrades}</span>\n            </div>\n            <div className=\"call-put-info\">\n              <span className=\"call-volume\">C: {formatVolume(hourData.callVolume)}</span>\n              <span className=\"put-volume\">P: {formatVolume(hourData.putVolume)}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"hour-details\">\n        <div className=\"cp-ratio\">C/P: {hourData.callPutRatio.toFixed(1)}</div>\n        <div className=\"volume-breakdown\">C: {formatVolume(hourData.callVolume)} | P: {formatVolume(hourData.putVolume)}</div>\n      </div>\n    </div>\n  );\n};\n\n// Utility functions\nfunction formatVolume(volume: number): string {\n  if (volume >= 1000000) {\n    return `${(volume / 1000000).toFixed(1)}M`;\n  } else if (volume >= 1000) {\n    return `${(volume / 1000).toFixed(1)}K`;\n  }\n  return volume.toString();\n}\n\nfunction formatHour(hour: number): string {\n  // Handle decimal hours (e.g., 9.5 = 9:30 AM)\n  const isHalfHour = hour % 1 === 0.5;\n  const wholeHour = Math.floor(hour);\n  \n  if (wholeHour === 0) return isHalfHour ? '12:30AM' : '12AM';\n  if (wholeHour < 12) return isHalfHour ? `${wholeHour}:30AM` : `${wholeHour}AM`;\n  if (wholeHour === 12) return isHalfHour ? '12:30PM' : '12PM';\n  return isHalfHour ? `${wholeHour - 12}:30PM` : `${wholeHour - 12}PM`;\n}\n\nexport default TickerPsychologyAnalysis;\n","/**\n * File loading utilities for handling multiple CSV files\n */\n\nexport interface FileInfo {\n  filename: string;\n  timestamp: Date;\n  size: number;\n}\n\nexport interface LoadedFileData {\n  filename: string;\n  timestamp: Date;\n  data: string;\n  error?: string;\n}\n\n/**\n * Parse timestamp from filename\n * Expected format: options_data_YYYY-MM-DD_HH-MM.csv or darkpool_data_YYYY-MM-DD_HH-MM.csv\n */\nexport function parseTimestampFromFilename(filename: string): Date | null {\n  try {\n    // Extract timestamp from filename: options_data_2024-01-15_10-00.csv, option_data_2025-10-17_15-45.csv, or darkpool_data_2025-10-17_15-00.csv\n    const match = filename.match(/(?:options_data|option_data|darkpool_data)_(\\d{4}-\\d{2}-\\d{2})_(\\d{2}-\\d{2})\\.csv/);\n    if (!match) return null;\n    \n    const [, dateStr, timeStr] = match;\n    const [year, month, day] = dateStr.split('-').map(Number);\n    const [hour, minute] = timeStr.split('-').map(Number);\n    \n    return new Date(year, month - 1, day, hour, minute);\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.warn(`Failed to parse timestamp from filename: ${filename}`, error);\n    }\n    return null;\n  }\n}\n\n/**\n * Get all CSV files from the data directory\n */\nexport async function getDataFiles(): Promise<FileInfo[]> {\n  try {\n    // Try to load from the API file first (dynamically generated)\n    const baseUrl = import.meta.env.BASE_URL;\n    const response = await fetch(`${baseUrl}api/data-files.json`);\n    \n    if (response.ok) {\n      const apiData = await response.json();\n      if (Array.isArray(apiData) && apiData.length > 0) {\n        if (import.meta.env.DEV) {\n          console.log(`📁 Loaded ${apiData.length} data files from API`);\n        }\n        return apiData.map((file: any) => ({\n          filename: file.name,\n          timestamp: new Date(file.timestamp),\n          size: file.size\n        }));\n      }\n    }\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.warn('Failed to load data files from API, falling back to hardcoded list:', error);\n    }\n  }\n\n  // Fallback to hardcoded list if API fails\n  const knownFiles = [\n    'options_data_2025-10-21_16-51.csv',\n    'options_data_2025-10-21_15-00.csv',\n    'options_data_2025-10-20_16-00.csv',\n    'options_data_2025-10-17_15-45.csv',\n    'options_data_2025-10-15_TSLA.csv',\n    'options_data_2025-10-16_16-00.csv',\n    'options_data_2025-10-16_15-00.csv',\n    'options_data_2025-10-16_12-00.csv',\n    'options_data_2025-10-16_10-30.csv',\n    'options_data_2025-10-15_16-00.csv',\n    'options_data_2025-10-15_14-00.csv',\n    'options_data_2025-10-15_11-30.csv',\n    'options_data_2025-10-15_10-00.csv',\n    'options_data_2025-10-14_16-00.csv',\n    'options_data_2025-10-14_15-00.csv',\n    'options_data_2025-10-14_11-00.csv',\n    'options_data_2025-10-14_01-00.csv',\n    'options_data_2025-10-13_13-20.csv',\n    'options_data_2025-10-13_13-00.csv',\n    'options_data_2025-10-13_10-50.csv',\n    'options_data_2025-10-13_10-00.csv',\n    'options_data_2025-10-13_05-30.csv',\n    'options_data_2024-01-15_16-00.csv',\n    'options_data_2024-01-15_11-30.csv',\n    'options_data_2024-01-15_11-00.csv',\n    'options_data_2024-01-15_10-00.csv',\n    'options_data_2024-01-15_02-30.csv'\n  ];\n\n  return knownFiles.map(filename => ({\n    filename,\n    timestamp: parseTimestampFromFilename(filename) || new Date(),\n    size: 0 // Will be updated when file is loaded\n  })).sort((a: FileInfo, b: FileInfo) => \n    b.timestamp.getTime() - a.timestamp.getTime() // Most recent first\n  );\n}\n\n/**\n * Get all dark pool CSV files from the data directory\n */\nexport async function getDarkPoolDataFiles(): Promise<FileInfo[]> {\n  // Use hardcoded list of available dark pool files for now\n  const knownDarkPoolFiles = [\n    'darkpool_data_2025-10-17_15-00.csv'\n  ];\n\n  return knownDarkPoolFiles.map(filename => ({\n    filename,\n    timestamp: parseTimestampFromFilename(filename) || new Date(),\n    size: 0 // Will be updated when file is loaded\n  })).sort((a: FileInfo, b: FileInfo) => \n    b.timestamp.getTime() - a.timestamp.getTime() // Most recent first\n  );\n}\n\n/**\n * Load a single CSV file with cache busting\n */\nexport async function loadCSVFile(filename: string, bustCache: boolean = false): Promise<LoadedFileData> {\n  try {\n    // Add cache-busting query parameter to force fresh load\n    const cacheBuster = bustCache ? `?t=${Date.now()}` : '';\n    const baseUrl = import.meta.env.BASE_URL;\n    const response = await fetch(`${baseUrl}data/${filename}${cacheBuster}`, {\n      cache: bustCache ? 'no-store' : 'default',\n      headers: {\n        'Cache-Control': bustCache ? 'no-cache, no-store, must-revalidate' : 'default',\n        'Pragma': bustCache ? 'no-cache' : 'default'\n      }\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Failed to load ${filename}: ${response.status} ${response.statusText}`);\n    }\n    \n    const data = await response.text();\n    const timestamp = parseTimestampFromFilename(filename);\n    \n    return {\n      filename,\n      timestamp: timestamp || new Date(),\n      data\n    };\n  } catch (error) {\n    return {\n      filename,\n      timestamp: new Date(),\n      data: '',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    };\n  }\n}\n\n// Session storage keys for caching\nconst FILE_CACHE_KEY = 'optionAnalysis_fileCache';\nconst DARKPOOL_FILE_CACHE_KEY = 'optionAnalysis_darkPoolFileCache';\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\n// Helper functions for session storage\nfunction getSessionCache(key: string): Map<string, { data: LoadedFileData; timestamp: number }> {\n  try {\n    const cached = sessionStorage.getItem(key);\n    if (cached) {\n      const parsed = JSON.parse(cached);\n      const map = new Map<string, { data: LoadedFileData; timestamp: number }>();\n      for (const [k, v] of Object.entries(parsed)) {\n        map.set(k, v as { data: LoadedFileData; timestamp: number });\n      }\n      return map;\n    }\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.warn('Failed to load from session storage:', error);\n    }\n  }\n  return new Map<string, { data: LoadedFileData; timestamp: number }>();\n}\n\nfunction setSessionCache(key: string, cache: Map<string, { data: LoadedFileData; timestamp: number }>): void {\n  try {\n    const obj = Object.fromEntries(cache);\n    sessionStorage.setItem(key, JSON.stringify(obj));\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.warn('Failed to save to session storage:', error);\n    }\n  }\n}\n\nfunction clearSessionCache(key: string): void {\n  try {\n    sessionStorage.removeItem(key);\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.warn('Failed to clear session storage:', error);\n    }\n  }\n}\n\n/**\n * Clear all session storage caches for the application\n */\nexport function clearAllSessionCaches(): void {\n  clearSessionCache(FILE_CACHE_KEY);\n  clearSessionCache(DARKPOOL_FILE_CACHE_KEY);\n  if (import.meta.env.DEV) {\n    console.log('🧹 All session storage caches cleared');\n  }\n}\n\n/**\n * Clear the file loading cache for options data\n */\nexport function clearFileCache(): void {\n  clearSessionCache(FILE_CACHE_KEY);\n  if (import.meta.env.DEV) {\n    console.log('🧹 Options file cache cleared');\n  }\n}\n\n/**\n * Clear the file loading cache for dark pool data\n */\nexport function clearDarkPoolFileCache(): void {\n  clearSessionCache(DARKPOOL_FILE_CACHE_KEY);\n  if (import.meta.env.DEV) {\n    console.log('🧹 Dark pool file cache cleared');\n  }\n}\n\n/**\n * Load all CSV files from the data directory with caching\n */\nexport async function loadAllDataFiles(bustCache: boolean = false): Promise<LoadedFileData[]> {\n  try {\n    const files = await getDataFiles();\n    const now = Date.now();\n    \n    // Get cache from session storage\n    const fileCache = getSessionCache(FILE_CACHE_KEY);\n    \n    // If busting cache, skip cache check and load all files fresh\n    if (bustCache) {\n      if (import.meta.env.DEV) {\n        console.log('🔄 Cache busting enabled - loading all files fresh...');\n      }\n      const loadPromises = files.map(file => loadCSVFile(file.filename, true));\n      const results = await Promise.all(loadPromises);\n      \n      // Update cache with fresh data\n      results.forEach(result => {\n        if (!result.error) {\n          fileCache.set(result.filename, { data: result, timestamp: now });\n        }\n      });\n      \n      // Save updated cache to session storage\n      setSessionCache(FILE_CACHE_KEY, fileCache);\n      \n      const successful = results.filter(result => !result.error);\n      if (import.meta.env.DEV) {\n        console.log(`✓ Loaded ${successful.length} files fresh (cache bypassed)`);\n      }\n      return successful;\n    }\n    \n    // Normal caching behavior\n    const cachedResults: LoadedFileData[] = [];\n    const filesToLoad: string[] = [];\n    \n    files.forEach(file => {\n      const cached = fileCache.get(file.filename);\n      if (cached && (now - cached.timestamp) < CACHE_DURATION) {\n        cachedResults.push(cached.data);\n      } else {\n        filesToLoad.push(file.filename);\n      }\n    });\n    \n    // Load only uncached files\n    let newResults: LoadedFileData[] = [];\n    if (filesToLoad.length > 0) {\n      const loadPromises = filesToLoad.map(filename => loadCSVFile(filename, false));\n      newResults = await Promise.all(loadPromises);\n      \n      // Update cache\n      newResults.forEach(result => {\n        if (!result.error) {\n          fileCache.set(result.filename, { data: result, timestamp: now });\n        }\n      });\n      \n      // Save updated cache to session storage\n      setSessionCache(FILE_CACHE_KEY, fileCache);\n    }\n    \n    const allResults = [...cachedResults, ...newResults];\n    \n    // Filter out files with errors and log them\n    const successful = allResults.filter(result => !result.error);\n    const failed = allResults.filter(result => result.error);\n    \n    if (import.meta.env.DEV && failed.length > 0) {\n      console.warn('Failed to load some data files:', failed);\n    }\n    \n    if (import.meta.env.DEV) {\n      console.log(`Successfully loaded ${successful.length} data files (${cachedResults.length} cached, ${newResults.filter(r => !r.error).length} new)`);\n    }\n    return successful;\n  } catch (error) {\n    console.error('Failed to load data files:', error);\n    return [];\n  }\n}\n\n/**\n * Load all dark pool CSV files from the data directory with caching\n */\nexport async function loadAllDarkPoolDataFiles(bustCache: boolean = false): Promise<LoadedFileData[]> {\n  try {\n    const files = await getDarkPoolDataFiles();\n    const now = Date.now();\n    \n    // Get dark pool cache from session storage\n    const darkPoolFileCache = getSessionCache(DARKPOOL_FILE_CACHE_KEY);\n    \n    // If busting cache, skip cache check and load all files fresh\n    if (bustCache) {\n      if (import.meta.env.DEV) {\n        console.log('🔄 Cache busting enabled - loading all dark pool files fresh...');\n      }\n      const loadPromises = files.map(file => loadCSVFile(file.filename, true));\n      const results = await Promise.all(loadPromises);\n      \n      // Update dark pool cache with fresh data\n      results.forEach(result => {\n        if (!result.error) {\n          darkPoolFileCache.set(result.filename, { data: result, timestamp: now });\n        }\n      });\n      \n      // Save updated cache to session storage\n      setSessionCache(DARKPOOL_FILE_CACHE_KEY, darkPoolFileCache);\n      \n      const successful = results.filter(result => !result.error);\n      if (import.meta.env.DEV) {\n        console.log(`✓ Loaded ${successful.length} dark pool files fresh (cache bypassed)`);\n      }\n      return successful;\n    }\n    \n    // Normal caching behavior\n    const cachedResults: LoadedFileData[] = [];\n    const filesToLoad: string[] = [];\n    \n    files.forEach(file => {\n      const cached = darkPoolFileCache.get(file.filename);\n      if (cached && (now - cached.timestamp) < CACHE_DURATION) {\n        cachedResults.push(cached.data);\n      } else {\n        filesToLoad.push(file.filename);\n      }\n    });\n    \n    // Load only uncached files\n    let newResults: LoadedFileData[] = [];\n    if (filesToLoad.length > 0) {\n      const loadPromises = filesToLoad.map(filename => loadCSVFile(filename, false));\n      newResults = await Promise.all(loadPromises);\n      \n      // Update dark pool cache\n      newResults.forEach(result => {\n        if (!result.error) {\n          darkPoolFileCache.set(result.filename, { data: result, timestamp: now });\n        }\n      });\n      \n      // Save updated cache to session storage\n      setSessionCache(DARKPOOL_FILE_CACHE_KEY, darkPoolFileCache);\n    }\n    \n    const allResults = [...cachedResults, ...newResults];\n    \n    // Filter out files with errors and log them\n    const successful = allResults.filter(result => !result.error);\n    const failed = allResults.filter(result => result.error);\n    \n    if (import.meta.env.DEV && failed.length > 0) {\n      console.warn('Failed to load some dark pool data files:', failed);\n    }\n    \n    if (import.meta.env.DEV) {\n      console.log(`Successfully loaded ${successful.length} dark pool data files (${cachedResults.length} cached, ${newResults.filter(r => !r.error).length} new)`);\n    }\n    return successful;\n  } catch (error) {\n    console.error('Failed to load dark pool data files:', error);\n    return [];\n  }\n}\n\n\n/**\n * Preload data files in the background\n */\nexport function preloadDataFiles(): Promise<LoadedFileData[]> {\n  return loadAllDataFiles();\n}\n\n/**\n * Generate filename for new data file based on current timestamp\n */\nexport function generateDataFilename(date: Date = new Date()): string {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  const hour = String(date.getHours()).padStart(2, '0');\n  const minute = String(date.getMinutes()).padStart(2, '0');\n  \n  return `options_data_${year}-${month}-${day}_${hour}-${minute}.csv`;\n}\n\n/**\n * Get the most recent data file timestamp\n */\nexport function getMostRecentTimestamp(files: FileInfo[]): Date | null {\n  if (files.length === 0) return null;\n  \n  return files.reduce((latest, file) => \n    file.timestamp > latest ? file.timestamp : latest, \n    files[0].timestamp\n  );\n}\n\n/**\n * Get files from the last N hours\n */\nexport function getRecentFiles(files: FileInfo[], hours: number = 24): FileInfo[] {\n  const cutoff = new Date(Date.now() - hours * 60 * 60 * 1000);\n  return files.filter(file => file.timestamp >= cutoff);\n}\n","\n/**\n * Fetch current stock price using multiple data sources\n * Priority: Finnhub (real-time NASDAQ) → Yahoo Finance (fallback)\n * \n * To use Finnhub API (optional, for better NASDAQ data):\n * 1. Get free API key from https://finnhub.io/\n * 2. Create .env file: VITE_FINNHUB_API_KEY=your_key_here\n */\nexport async function fetchStockPrice(ticker: string): Promise<number | null> {\n  // Try Finnhub API first if API key is available (best for NASDAQ real-time data)\n  const finnhubApiKey = import.meta.env.VITE_FINNHUB_API_KEY;\n  \n  if (finnhubApiKey) {\n    try {\n      const finnhubUrl = `https://finnhub.io/api/v1/quote?symbol=${ticker}&token=${finnhubApiKey}`;\n      \n      const response = await fetch(finnhubUrl);\n      \n      if (response.ok) {\n        const data = await response.json();\n        const currentPrice = data?.c; // 'c' is current price in Finnhub API\n        \n        if (currentPrice && typeof currentPrice === 'number' && currentPrice > 0) {\n          if (import.meta.env.DEV) {\n            console.log(`✓ Fetched price from Finnhub (NASDAQ) for ${ticker}: $${currentPrice}`);\n          }\n          return currentPrice;\n        }\n      }\n    } catch (error) {\n      if (import.meta.env.DEV) {\n        console.warn(`Finnhub API failed for ${ticker}, trying fallback:`, error);\n      }\n    }\n  }\n\n  // Fallback to Yahoo Finance API with CORS proxy\n  try {\n    // Try direct Yahoo Finance API first\n    let yahooUrl = `https://query1.finance.yahoo.com/v8/finance/chart/${ticker}?interval=1d&range=1d`;\n    let response = await fetch(yahooUrl, { \n      mode: 'cors',\n      headers: {\n        'Accept': 'application/json',\n      }\n    });\n    \n    // If CORS fails, try with CORS proxy\n    if (!response.ok || response.status === 0) {\n      if (import.meta.env.DEV) {\n        console.log(`Yahoo Finance direct access failed, trying CORS proxy...`);\n      }\n      \n      // Use allorigins.win as CORS proxy (free, no auth)\n      const proxyUrl = `https://api.allorigins.win/raw?url=${encodeURIComponent(yahooUrl)}`;\n      response = await fetch(proxyUrl);\n    }\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    // Extract current price from the response\n    const currentPrice = data?.chart?.result?.[0]?.meta?.regularMarketPrice;\n    \n    if (currentPrice && typeof currentPrice === 'number') {\n      if (import.meta.env.DEV) {\n        console.log(`✓ Fetched price from Yahoo Finance for ${ticker}: $${currentPrice}`);\n      }\n      return currentPrice;\n    }\n    \n    return null;\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.error(`❌ All APIs failed to fetch stock price for ${ticker}:`, error);\n      console.log(`💡 Solution: Add Finnhub API key to .env file (see README.md)`);\n    }\n    return null;\n  }\n}\n\n// Session storage key for price caching\nconst PRICE_CACHE_KEY = 'optionAnalysis_priceCache';\nconst CACHE_DURATION = 900000; // 15 minutes cache (15 * 60 * 1000)\n\n// Helper functions for session storage\nfunction getSessionPriceCache(): Map<string, { price: number; timestamp: number }> {\n  try {\n    const cached = sessionStorage.getItem(PRICE_CACHE_KEY);\n    if (cached) {\n      const parsed = JSON.parse(cached);\n      const map = new Map<string, { price: number; timestamp: number }>();\n      for (const [k, v] of Object.entries(parsed)) {\n        map.set(k, v as { price: number; timestamp: number });\n      }\n      return map;\n    }\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.warn('Failed to load price cache from session storage:', error);\n    }\n  }\n  return new Map<string, { price: number; timestamp: number }>();\n}\n\nfunction setSessionPriceCache(cache: Map<string, { price: number; timestamp: number }>): void {\n  try {\n    const obj = Object.fromEntries(cache);\n    sessionStorage.setItem(PRICE_CACHE_KEY, JSON.stringify(obj));\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.warn('Failed to save price cache to session storage:', error);\n    }\n  }\n}\n\nfunction clearSessionPriceCache(): void {\n  try {\n    sessionStorage.removeItem(PRICE_CACHE_KEY);\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.warn('Failed to clear price cache from session storage:', error);\n    }\n  }\n}\n\n/**\n * Get real-time stock price with intelligent caching\n * Only fetches from API if price wasn't checked in the last 15 minutes\n */\nexport async function getCurrentPrice(\n  ticker: string\n): Promise<{\n  price: number | null;\n  source: 'api' | 'none';\n  cached: boolean;\n}> {\n  const priceCache = getSessionPriceCache();\n  const cached = priceCache.get(ticker);\n  const now = Date.now();\n  \n  // Return cached price if it's less than 15 minutes old\n  if (cached && (now - cached.timestamp) < CACHE_DURATION) {\n    if (import.meta.env.DEV) {\n      const minutesAgo = Math.floor((now - cached.timestamp) / 60000);\n      console.log(`Using cached price for ${ticker} (${minutesAgo} min old): $${cached.price}`);\n    }\n    return { price: cached.price, source: 'api', cached: true };\n  }\n  \n  // Fetch new price from API\n  const apiPrice = await fetchStockPrice(ticker);\n  \n  if (apiPrice !== null) {\n    priceCache.set(ticker, { price: apiPrice, timestamp: now });\n    setSessionPriceCache(priceCache);\n    if (import.meta.env.DEV) {\n      console.log(`Fetched fresh price for ${ticker}: $${apiPrice}`);\n    }\n    return { price: apiPrice, source: 'api', cached: false };\n  }\n\n  return { price: null, source: 'none', cached: false };\n}\n\nexport async function getCachedStockPrice(ticker: string): Promise<number | null> {\n  const result = await getCurrentPrice(ticker);\n  return result.price;\n}\n\n/**\n * Clear the price cache\n */\nexport function clearPriceCache(): void {\n  clearSessionPriceCache();\n  if (import.meta.env.DEV) {\n    console.log('🧹 Price cache cleared from session storage');\n  }\n}\n\n","import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { ArrowLeft, Calendar, RefreshCw, Search } from 'lucide-react';\nimport TickerList from './TickerList';\nimport VolumeProfileChart from './VolumeProfileChart';\nimport TradeList from './TradeList';\nimport StrikeExpiryHeatmap from './StrikeExpiryHeatmap';\nimport TickerPsychologyAnalysis from './TickerPsychologyAnalysis';\nimport { \n  mergeDataFromFiles,\n  getTickerSummaries, \n  getVolumeProfileForTicker, \n  getExpiryDatesForTicker,\n  getHighestVolumeData,\n  clearDataCache,\n  OptionData,\n  MergedDataInfo\n} from '../utils/dataParser';\nimport { loadAllDataFiles, clearFileCache } from '../utils/fileLoader';\nimport { getCurrentPrice, clearPriceCache } from '../utils/stockPrice';\n\n// We'll load the CSV data via fetch instead of import\n\nexport interface OptionsDashboardProps {\n  activeDashboard: 'options' | 'darkpool' | 'psychology';\n  setActiveDashboard: (dashboard: 'options' | 'darkpool' | 'psychology') => void;\n}\n\nconst OptionsDashboard: React.FC<OptionsDashboardProps> = ({ activeDashboard, setActiveDashboard }) => {\n  const [selectedTicker, setSelectedTicker] = useState<string | null>(null);\n  const [selectedExpiry, setSelectedExpiry] = useState<string | null>(null);\n  const [optionData, setOptionData] = useState<OptionData[]>([]);\n  const [dataInfo, setDataInfo] = useState<MergedDataInfo | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [currentPrice, setCurrentPrice] = useState<number | null>(null);\n  const [priceSource, setPriceSource] = useState<'api' | 'none'>('none');\n  const [isPriceCached, setIsPriceCached] = useState(false);\n  const [searchTerm, setSearchTerm] = useState<string>('');\n\n  useEffect(() => {\n    const loadAllData = async (bustCache: boolean = false) => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        // Load all CSV files from the data directory\n        const loadedFiles = await loadAllDataFiles(bustCache);\n        \n        if (loadedFiles.length === 0) {\n          throw new Error('No data files found in the data directory');\n        }\n        \n        // Merge data from all files\n        const { mergedData, info } = mergeDataFromFiles(\n          loadedFiles.map(file => ({\n            filename: file.filename,\n            data: file.data,\n            timestamp: file.timestamp\n          }))\n        );\n        \n        setOptionData(mergedData);\n        setDataInfo(info);\n        setLoading(false);\n        \n        if (import.meta.env.DEV) {\n          console.log(`Loaded ${info.totalFiles} files with ${info.totalRecords} total records`);\n        }\n      } catch (error) {\n        console.error('Error loading data files:', error);\n        setError(error instanceof Error ? error.message : 'Failed to load data');\n        setLoading(false);\n      }\n    };\n\n    loadAllData(false); // Normal load on mount\n  }, []);\n\n  const tickerSummaries = useMemo(() => {\n    return getTickerSummaries(optionData);\n  }, [optionData]);\n\n  const filteredTickerSummaries = useMemo(() => {\n    if (!searchTerm.trim()) {\n      return tickerSummaries;\n    }\n    \n    const searchLower = searchTerm.toLowerCase();\n    return tickerSummaries.filter(ticker => \n      ticker.ticker.toLowerCase().includes(searchLower)\n    );\n  }, [tickerSummaries, searchTerm]);\n\n\n  const expiryDates = useMemo(() => {\n    if (!selectedTicker) return [];\n    return getExpiryDatesForTicker(optionData, selectedTicker);\n  }, [optionData, selectedTicker]);\n\n  const volumeProfileData = useMemo(() => {\n    if (!selectedTicker) return [];\n    return getVolumeProfileForTicker(optionData, selectedTicker, selectedExpiry || undefined);\n  }, [optionData, selectedTicker, selectedExpiry]);\n\n  // Get filtered trades for the selected ticker and expiry\n  const filteredTrades = useMemo(() => {\n    if (!selectedTicker) return [];\n    return optionData.filter(trade => {\n      const matchesTicker = trade.ticker === selectedTicker;\n      const matchesExpiry = !selectedExpiry || trade.expiry === selectedExpiry;\n      return matchesTicker && matchesExpiry;\n    });\n  }, [optionData, selectedTicker, selectedExpiry]);\n\n  const highestVolumeData = useMemo(() => {\n    if (!selectedTicker) return null;\n    return getHighestVolumeData(optionData, selectedTicker, selectedExpiry || undefined);\n  }, [optionData, selectedTicker, selectedExpiry]);\n\n  const tickerTrades = useMemo(() => {\n    if (!selectedTicker) return [];\n    return optionData.filter(option => \n      option.ticker === selectedTicker && \n      (!selectedExpiry || option.expiry === selectedExpiry)\n    );\n  }, [optionData, selectedTicker, selectedExpiry]);\n\n  const handleTickerSelect = useCallback((ticker: string) => {\n    setSelectedTicker(ticker);\n    setSelectedExpiry(null); // Reset expiry selection when changing ticker\n  }, []);\n\n  const handleBackToList = useCallback(() => {\n    setSelectedTicker(null);\n    setSelectedExpiry(null);\n  }, []);\n\n  const handleExpirySelect = useCallback((expiry: string) => {\n    setSelectedExpiry(expiry === selectedExpiry ? null : expiry);\n  }, [selectedExpiry]);\n\n  const handleRefreshData = useCallback(async () => {\n    try {\n      console.log('🔄 Performing hard refresh for options data...');\n      \n      // Clear all options related caches\n      clearDataCache();      // Clear options parsed data cache\n      clearFileCache();      // Clear options file loading cache\n      clearPriceCache();     // Clear stock price cache (shared)\n      \n      console.log('✓ Options caches cleared (parsed data, file cache, and price cache)');\n      console.log('🔄 Reloading options data with cache bypass...');\n      \n      setLoading(true);\n      setError(null);\n      \n      // Load all CSV files with cache busting enabled\n      const loadedFiles = await loadAllDataFiles(true);\n      \n      if (loadedFiles.length === 0) {\n        throw new Error('No data files found in the data directory');\n      }\n      \n      // Merge data from all files\n      const { mergedData, info } = mergeDataFromFiles(\n        loadedFiles.map(file => ({\n          filename: file.filename,\n          data: file.data,\n          timestamp: file.timestamp\n        }))\n      );\n      \n      setOptionData(mergedData);\n      setDataInfo(info);\n      \n      // Reset current price and reload it\n      setCurrentPrice(null);\n      setPriceSource('none');\n      setIsPriceCached(false);\n      \n      // Reload price if a ticker is selected\n      if (selectedTicker) {\n        const { price, source, cached } = await getCurrentPrice(selectedTicker);\n        setCurrentPrice(price);\n        setPriceSource(source);\n        setIsPriceCached(cached);\n      }\n      \n      setLoading(false);\n      \n      console.log('✓ Data reloaded successfully:', {\n        files: info.totalFiles,\n        records: info.totalRecords,\n        latestData: info.dateRange.latest\n      });\n    } catch (error) {\n      console.error('Error during hard refresh:', error);\n      setError(error instanceof Error ? error.message : 'Failed to refresh data');\n      setLoading(false);\n    }\n  }, [selectedTicker]);\n\n  // Fetch current stock price when ticker is selected (real-time API with 15min cache)\n  useEffect(() => {\n    if (!selectedTicker) {\n      setCurrentPrice(null);\n      setPriceSource('none');\n      setIsPriceCached(false);\n      return;\n    }\n\n    const fetchPrice = async () => {\n      const result = await getCurrentPrice(selectedTicker);\n      setCurrentPrice(result.price);\n      setPriceSource(result.source);\n      setIsPriceCached(result.cached);\n      \n      if (import.meta.env.DEV) {\n        console.log(`Stock price for ${selectedTicker}:`, result.price, `(source: ${result.source}, cached: ${result.cached})`);\n      }\n    };\n\n    fetchPrice();\n  }, [selectedTicker]);\n\n  if (loading) {\n    return (\n      <div className=\"dashboard-loading\">\n        <div className=\"loading-spinner\"></div>\n        <p>Loading options data from multiple files...</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"dashboard-error\">\n        <div className=\"error-icon\">⚠️</div>\n        <h3>Error Loading Data</h3>\n        <p>{error}</p>\n        <button \n          className=\"retry-button\" \n          onClick={() => window.location.reload()}\n        >\n          Retry\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"options-dashboard\">\n      {/* Compact Header with Data Summary */}\n      <header className=\"dashboard-header\">\n        <div className=\"header-left\">\n          <h1>Market Analysis Dashboard</h1>\n          {dataInfo && (\n            <div className=\"header-stats\">\n              <span className=\"header-stat\">{dataInfo.totalFiles} files</span>\n              <span className=\"stat-separator\">•</span>\n              <span className=\"header-stat\">{dataInfo.totalRecords.toLocaleString()} records</span>\n              <span className=\"stat-separator\">•</span>\n              <span className=\"header-stat\">\n                {dataInfo.files && dataInfo.files.length > 0\n                  ? dataInfo.files[0].timestamp.toLocaleString('en-GB', {\n                      day: '2-digit',\n                      month: '2-digit',\n                      year: 'numeric',\n                      hour: '2-digit',\n                      minute: '2-digit',\n                      second: '2-digit',\n                      hour12: false\n                    })\n                  : dataInfo.dateRange.latest?.toLocaleString('en-GB', {\n                      day: '2-digit',\n                      month: '2-digit',\n                      year: 'numeric',\n                      hour: '2-digit',\n                      minute: '2-digit',\n                      second: '2-digit',\n                      hour12: false\n                    }) || ''}\n              </span>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"header-right\">\n          {!selectedTicker && (\n            <div className=\"search-container-header\">\n              <Search className=\"search-icon\" />\n              <input\n                type=\"text\"\n                className=\"search-input\"\n                placeholder=\"Search tickers...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n              />\n              {searchTerm && (\n                <button \n                  className=\"clear-search\"\n                  onClick={() => setSearchTerm('')}\n                  title=\"Clear search\"\n                >\n                  ×\n                </button>\n              )}\n            </div>\n          )}\n          \n          <div className=\"nav-buttons\">\n            <button \n              className={`nav-button ${activeDashboard === 'options' ? 'active' : ''}`}\n              onClick={() => setActiveDashboard('options')}\n            >\n              Options Analysis\n            </button>\n            <button \n              className={`nav-button ${activeDashboard === 'darkpool' ? 'active' : ''}`}\n              onClick={() => setActiveDashboard('darkpool')}\n            >\n              Dark Pool Analysis\n            </button>\n            <button \n              className={`nav-button ${activeDashboard === 'psychology' ? 'active' : ''}`}\n              onClick={() => setActiveDashboard('psychology')}\n            >\n              Overall Analysis\n            </button>\n          </div>\n          \n          <button \n            className=\"refresh-button-compact\" \n            onClick={handleRefreshData}\n            title=\"Hard Refresh - Clears all caches and reloads data from files\"\n          >\n            <RefreshCw className=\"refresh-icon\" />\n            Hard Refresh\n          </button>\n        </div>\n      </header>\n\n      {!selectedTicker ? (\n        <TickerList \n          tickers={filteredTickerSummaries} \n          onTickerSelect={handleTickerSelect}\n          allData={optionData}\n        />\n      ) : (\n        <div className=\"ticker-detail-view\">\n          <div className=\"detail-header\">\n            <button className=\"back-button\" onClick={handleBackToList}>\n              <ArrowLeft className=\"back-icon\" />\n              Back to Ticker List\n            </button>\n            <h2>{selectedTicker} Options Analysis</h2>\n            {currentPrice && priceSource === 'api' ? (\n              <span className=\"current-price-badge\">\n                <span className=\"price-indicator\"></span>\n                Current Price: ${currentPrice.toFixed(2)}\n                <span className=\"price-status\">\n                  ({isPriceCached ? 'Cached' : 'Live'})\n                </span>\n              </span>\n            ) : (\n              <span className=\"price-unavailable\">\n                Price unavailable\n              </span>\n            )}\n          </div>\n\n          {/* Expiry Date Filter */}\n          <div className=\"expiry-filter\">\n            <div className=\"filter-header\">\n              <Calendar className=\"filter-icon\" />\n              <span>Filter by Expiry Date:</span>\n            </div>\n            <div className=\"expiry-buttons\">\n              <button \n                className={`expiry-button ${!selectedExpiry ? 'active' : ''}`}\n                onClick={() => setSelectedExpiry(null)}\n              >\n                All Expiries\n              </button>\n              {expiryDates.map((expiry) => (\n                <button\n                  key={expiry}\n                  className={`expiry-button ${selectedExpiry === expiry ? 'active' : ''}`}\n                  onClick={() => handleExpirySelect(expiry)}\n                >\n                  {new Date(expiry).toLocaleDateString()}\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* Charts Section - Two Column Layout */}\n          <div className=\"charts-section\">\n            {/* Left Column - Call/Put Volume Chart */}\n            <div className=\"chart-column\">\n              <VolumeProfileChart \n                data={volumeProfileData}\n                highestVolumeData={highestVolumeData}\n                ticker={selectedTicker}\n                expiry={selectedExpiry || undefined}\n                chartType=\"callput\"\n                currentPrice={currentPrice || undefined}\n                trades={filteredTrades}\n              />\n            </div>\n            \n            {/* Right Column - Total Volume Chart */}\n            <div className=\"chart-column\">\n              <VolumeProfileChart \n                data={volumeProfileData}\n                highestVolumeData={highestVolumeData}\n                ticker={selectedTicker}\n                expiry={selectedExpiry || undefined}\n                chartType=\"total\"\n                currentPrice={currentPrice || undefined}\n                trades={filteredTrades}\n              />\n            </div>\n          </div>\n\n          {/* Summary Statistics */}\n          <div className=\"summary-stats\">\n            <div className=\"stat-card\">\n              <h4>Total Volume</h4>\n              <p>{volumeProfileData.reduce((sum, item) => sum + item.totalVolume, 0).toLocaleString()}</p>\n            </div>\n            <div className=\"stat-card\">\n              <h4>Call Volume</h4>\n              <p>{volumeProfileData.reduce((sum, item) => sum + item.callVolume, 0).toLocaleString()}</p>\n            </div>\n            <div className=\"stat-card\">\n              <h4>Put Volume</h4>\n              <p>{volumeProfileData.reduce((sum, item) => sum + item.putVolume, 0).toLocaleString()}</p>\n            </div>\n            <div className=\"stat-card\">\n              <h4>Open Interest</h4>\n              <p>{volumeProfileData.reduce((sum, item) => sum + item.openInterest, 0).toLocaleString()}</p>\n            </div>\n          </div>\n\n          {/* Overall Analysis */}\n          <TickerPsychologyAnalysis \n            ticker={selectedTicker}\n            trades={tickerTrades}\n          />\n\n          {/* Heatmap & Trade History - Two Column Layout */}\n          <div className=\"heatmap-trades-section\">\n            {/* Left Column - Strike × Expiry Heatmap */}\n            <div className=\"heatmap-column\">\n              <StrikeExpiryHeatmap \n                trades={tickerTrades}\n                currentPrice={currentPrice || undefined}\n              />\n            </div>\n\n            {/* Right Column - Trade List */}\n            <div className=\"trades-column\">\n              <div className=\"trade-list-section\">\n                <h3>Trade History for {selectedTicker}</h3>\n                <p>Found {tickerTrades.length} trades</p>\n                <TradeList \n                  trades={tickerTrades}\n                  ticker={selectedTicker}\n                  expiry={selectedExpiry || undefined}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default OptionsDashboard;\n","import React, { memo, useState, useMemo } from 'react';\nimport { DarkPoolData } from '../utils/dataParser';\n\ninterface DarkPoolListProps {\n  trades: DarkPoolData[];\n  ticker?: string;\n}\n\ninterface DarkPoolRowProps {\n  trade: DarkPoolData;\n  volumeStats: {\n    mean: number;\n    stdDev: number;\n    q75: number;\n    q90: number;\n    q95: number;\n  };\n  valueStats: {\n    mean: number;\n    stdDev: number;\n    q75: number;\n    q90: number;\n    q95: number;\n  };\n}\n\nconst DarkPoolRow: React.FC<DarkPoolRowProps> = memo(({ trade, volumeStats, valueStats }) => {\n  const formatExecutionDateTime = (timestamp: string): string => {\n    try {\n      const date = new Date(timestamp);\n      return date.toLocaleString('en-US', {\n        month: '2-digit',\n        day: '2-digit',\n        year: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: true\n      });\n    } catch (error) {\n      return 'Unknown';\n    }\n  };\n\n  const formatQuantity = (quantity: number): string => {\n    if (quantity >= 1000000) {\n      return `${(quantity / 1000000).toFixed(1)}M`;\n    } else if (quantity >= 1000) {\n      return `${(quantity / 1000).toFixed(1)}K`;\n    }\n    return quantity.toLocaleString();\n  };\n\n  // Parse total value to check if it's a high-value trade\n  const parseTotalValue = (totalValue: string): number => {\n    const cleanValue = totalValue.replace(/[$,]/g, '');\n    const num = parseFloat(cleanValue);\n    \n    if (totalValue.includes('M')) {\n      return num * 1000000;\n    } else if (totalValue.includes('K')) {\n      return num * 1000;\n    }\n    return num;\n  };\n\n  const totalValue = parseTotalValue(trade.totalValue);\n  \n  // Determine color based on statistical analysis\n  const getRowColor = () => {\n    \n    // Unusual trades (top 10% in volume or value)\n    if (trade.quantity >= volumeStats.q90 || totalValue >= valueStats.q90) {\n      return 'rgba(0, 200, 0, 0.6)'; // Green for unusual trades\n    }\n    \n    // Default: White for all other trades\n    return 'rgba(255, 255, 255, 0.1)'; // White for normal trades\n  };\n\n  return (\n    <div \n      className=\"darkpool-row-horizontal\"\n      style={{\n        backgroundColor: getRowColor(),\n        borderLeft: trade.quantity >= volumeStats.q90 || totalValue >= valueStats.q90\n          ? '4px solid #00c800'\n          : 'none'\n      }}\n    >\n      <div className=\"darkpool-cell-h symbol\">{trade.ticker}</div>\n      <div className=\"darkpool-cell-h quantity\">{formatQuantity(trade.quantity)}</div>\n      <div className=\"darkpool-cell-h price\">${trade.price.toFixed(2)}</div>\n      <div className=\"darkpool-cell-h total-value\">{trade.totalValue}</div>\n      <div className=\"darkpool-cell-h exec-time\">{formatExecutionDateTime(trade.timestamp)}</div>\n    </div>\n  );\n});\n\nDarkPoolRow.displayName = 'DarkPoolRow';\n\ntype SortOption = 'timestamp' | 'quantity' | 'total-value' | 'price';\n\n// Helper function to calculate statistics\nconst calculateStats = (values: number[]) => {\n  const sorted = [...values].sort((a, b) => a - b);\n  const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n  const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length;\n  const stdDev = Math.sqrt(variance);\n  \n  const q75Index = Math.floor(sorted.length * 0.75);\n  const q90Index = Math.floor(sorted.length * 0.90);\n  const q95Index = Math.floor(sorted.length * 0.95);\n  \n  return {\n    mean,\n    stdDev,\n    q75: sorted[q75Index] || 0,\n    q90: sorted[q90Index] || 0,\n    q95: sorted[q95Index] || 0\n  };\n};\n\nconst DarkPoolList: React.FC<DarkPoolListProps> = memo(({ trades, ticker }) => {\n  const [sortBy, setSortBy] = useState<SortOption>('timestamp');\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');\n\n  // Calculate statistics for volume and value\n  const { volumeStats, valueStats } = useMemo(() => {\n    if (trades.length === 0) {\n      return {\n        volumeStats: { mean: 0, stdDev: 0, q75: 0, q90: 0, q95: 0 },\n        valueStats: { mean: 0, stdDev: 0, q75: 0, q90: 0, q95: 0 }\n      };\n    }\n\n    const volumes = trades.map(trade => trade.quantity);\n    const values = trades.map(trade => {\n      const cleanValue = trade.totalValue.replace(/[$,]/g, '');\n      const num = parseFloat(cleanValue);\n      \n      if (trade.totalValue.includes('M')) {\n        return num * 1000000;\n      } else if (trade.totalValue.includes('K')) {\n        return num * 1000;\n      }\n      return num;\n    });\n\n    return {\n      volumeStats: calculateStats(volumes),\n      valueStats: calculateStats(values)\n    };\n  }, [trades]);\n\n  const sortedTrades = useMemo(() => {\n    const sorted = [...trades].sort((a, b) => {\n      let comparison = 0;\n      \n      switch (sortBy) {\n        case 'timestamp':\n          comparison = new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime();\n          break;\n        case 'quantity':\n          comparison = a.quantity - b.quantity;\n          break;\n        case 'price':\n          comparison = a.price - b.price;\n          break;\n        case 'total-value':\n          const aValue = parseFloat(a.totalValue.replace(/[$,]/g, ''));\n          const bValue = parseFloat(b.totalValue.replace(/[$,]/g, ''));\n          comparison = aValue - bValue;\n          break;\n        default:\n          comparison = 0;\n      }\n      \n      return sortOrder === 'asc' ? comparison : -comparison;\n    });\n    \n    return sorted;\n  }, [trades, sortBy, sortOrder]);\n\n  const handleSort = (newSortBy: SortOption) => {\n    if (sortBy === newSortBy) {\n      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortBy(newSortBy);\n      setSortOrder('desc');\n    }\n  };\n\n  const getSortIcon = (column: SortOption) => {\n    if (sortBy !== column) return '↕️';\n    return sortOrder === 'asc' ? '↑' : '↓';\n  };\n\n  const totalValue = trades.reduce((sum, trade) => {\n    const value = parseFloat(trade.totalValue.replace(/[$,]/g, ''));\n    return sum + value;\n  }, 0);\n\n  const formatTotalValue = (value: number): string => {\n    if (value >= 1000000000) {\n      return `$${(value / 1000000000).toFixed(1)}B`;\n    } else if (value >= 1000000) {\n      return `$${(value / 1000000).toFixed(1)}M`;\n    } else if (value >= 1000) {\n      return `$${(value / 1000).toFixed(1)}K`;\n    }\n    return `$${value.toFixed(0)}`;\n  };\n\n  return (\n    <div className=\"darkpool-list-container\">\n      <div className=\"darkpool-list-header\">\n        <h3>Dark Pool Trades{ticker ? ` for ${ticker}` : ''}</h3>\n        <div className=\"darkpool-stats\">\n          <span className=\"stat-item\">\n            <strong>{trades.length}</strong> trades\n          </span>\n          <span className=\"stat-item\">\n            <strong>{formatTotalValue(totalValue)}</strong> total value\n          </span>\n        </div>\n      </div>\n      \n      {/* Color Legend */}\n      <div className=\"darkpool-legend\">\n        <div className=\"legend-title\">Trade Volume/Value Indicators:</div>\n        <div className=\"legend-items\">\n          <div className=\"legend-item\">\n            <div className=\"legend-color unusual\"></div>\n            <span>Unusual (Top 10%)</span>\n          </div>\n          <div className=\"legend-item\">\n            <div className=\"legend-color normal\"></div>\n            <span>Normal</span>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"darkpool-list-table\">\n        <div className=\"darkpool-header-row\">\n          <div \n            className=\"darkpool-header-cell symbol\"\n            onClick={() => handleSort('timestamp')}\n          >\n            Symbol {getSortIcon('timestamp')}\n          </div>\n          <div \n            className=\"darkpool-header-cell quantity\"\n            onClick={() => handleSort('quantity')}\n          >\n            Quantity {getSortIcon('quantity')}\n          </div>\n          <div \n            className=\"darkpool-header-cell price\"\n            onClick={() => handleSort('price')}\n          >\n            Price {getSortIcon('price')}\n          </div>\n          <div \n            className=\"darkpool-header-cell total-value\"\n            onClick={() => handleSort('total-value')}\n          >\n            Total Value {getSortIcon('total-value')}\n          </div>\n          <div \n            className=\"darkpool-header-cell exec-time\"\n            onClick={() => handleSort('timestamp')}\n          >\n            Execution Time {getSortIcon('timestamp')}\n          </div>\n        </div>\n        \n        <div className=\"darkpool-trades-container\">\n          {sortedTrades.map((trade, index) => (\n            <DarkPoolRow \n              key={`${trade.ticker}-${trade.timestamp}-${index}`} \n              trade={trade}\n              volumeStats={volumeStats}\n              valueStats={valueStats}\n            />\n          ))}\n        </div>\n      </div>\n      \n      {trades.length === 0 && (\n        <div className=\"no-trades-message\">\n          <p>No dark pool trades found{ticker ? ` for ${ticker}` : ''}.</p>\n        </div>\n      )}\n    </div>\n  );\n});\n\nDarkPoolList.displayName = 'DarkPoolList';\n\nexport default DarkPoolList;\n","import React, { memo, useMemo, useState } from 'react';\nimport { TrendingUp, TrendingDown, Calendar, Clock, ArrowUpDown, Target } from 'lucide-react';\nimport { DarkPoolData } from '../utils/dataParser';\n\ninterface DarkPoolTickerSummary {\n  ticker: string;\n  totalValue: number;\n  totalQuantity: number;\n  tradeCount: number;\n  averagePrice: number;\n  lastActivity: string;\n  maxTradeValue: number;\n  minTradeValue: number;\n  maxQuantity: number;\n  minQuantity: number;\n  avgTradeSize: number;\n  priceVolatility: number;\n  highestVolumePrice: number;\n  highestVolumeTime: string;\n  highestVolumeQuantity: number;\n}\n\ninterface DarkPoolTickerListProps {\n  tickers: DarkPoolTickerSummary[];\n  onTickerSelect: (ticker: string) => void;\n  allData: DarkPoolData[];\n}\n\ntype SortOption = 'recent' | 'oldest' | 'value-high' | 'value-low' | 'quantity-high' | 'quantity-low' | 'trades-high' | 'trades-low' | 'volume-high' | 'volume-low';\n\nconst formatDateTime = (timestamp: string): string => {\n  try {\n    const time = new Date(timestamp);\n    \n    // Check if the date is valid\n    if (isNaN(time.getTime())) {\n      return '';\n    }\n    \n    // Format as \"Oct 8, 2025 3:02 PM\"\n    return time.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric'\n    }) + ' ' + time.toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true\n    });\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.warn('Error parsing timestamp:', timestamp, error);\n    }\n    return '';\n  }\n};\n\nconst formatVolume = (volume: number): string => {\n  if (volume >= 1000000) {\n    return `${(volume / 1000000).toFixed(1)}M`;\n  } else if (volume >= 1000) {\n    return `${(volume / 1000).toFixed(1)}K`;\n  }\n  return volume.toString();\n};\n\nconst formatValue = (value: number): string => {\n  if (value >= 1000000000) {\n    return `$${(value / 1000000000).toFixed(1)}B`;\n  } else if (value >= 1000000) {\n    return `$${(value / 1000000).toFixed(1)}M`;\n  } else if (value >= 1000) {\n    return `$${(value / 1000).toFixed(1)}K`;\n  }\n  return `$${value.toFixed(2)}`;\n};\n\nconst DarkPoolTickerList: React.FC<DarkPoolTickerListProps> = memo(({ tickers, onTickerSelect, allData }) => {\n  const [sortBy, setSortBy] = useState<SortOption>('recent');\n\n  const sortedTickers = useMemo(() => {\n    const sorted = [...tickers];\n    \n    switch (sortBy) {\n      case 'recent':\n        return sorted.sort((a, b) => new Date(b.lastActivity).getTime() - new Date(a.lastActivity).getTime());\n      case 'oldest':\n        return sorted.sort((a, b) => new Date(a.lastActivity).getTime() - new Date(b.lastActivity).getTime());\n      case 'value-high':\n        return sorted.sort((a, b) => b.totalValue - a.totalValue);\n      case 'value-low':\n        return sorted.sort((a, b) => a.totalValue - b.totalValue);\n      case 'quantity-high':\n        return sorted.sort((a, b) => b.totalQuantity - a.totalQuantity);\n      case 'quantity-low':\n        return sorted.sort((a, b) => a.totalQuantity - b.totalQuantity);\n      case 'trades-high':\n        return sorted.sort((a, b) => b.tradeCount - a.tradeCount);\n      case 'trades-low':\n        return sorted.sort((a, b) => a.tradeCount - b.tradeCount);\n      case 'volume-high':\n        return sorted.sort((a, b) => b.highestVolumeQuantity - a.highestVolumeQuantity);\n      case 'volume-low':\n        return sorted.sort((a, b) => a.highestVolumeQuantity - b.highestVolumeQuantity);\n      default:\n        return sorted;\n    }\n  }, [tickers, sortBy]);\n\n  return (\n    <div className=\"ticker-list-container\">\n      <div className=\"ticker-list-header\">\n        <h2>Dark Pool Tickers</h2>\n        <p>Select a ticker to view detailed dark pool activity</p>\n        <div className=\"sort-controls\">\n          <ArrowUpDown className=\"sort-icon\" />\n          <select \n            className=\"sort-selector\"\n            value={sortBy}\n            onChange={(e) => setSortBy(e.target.value as SortOption)}\n          >\n            <option value=\"recent\">Most Recent</option>\n            <option value=\"oldest\">Oldest First</option>\n            <option value=\"value-high\">Value (High to Low)</option>\n            <option value=\"value-low\">Value (Low to High)</option>\n            <option value=\"quantity-high\">Quantity (High to Low)</option>\n            <option value=\"quantity-low\">Quantity (Low to High)</option>\n            <option value=\"trades-high\">Trades (High to Low)</option>\n            <option value=\"trades-low\">Trades (Low to High)</option>\n            <option value=\"volume-high\">High Volume (High to Low)</option>\n            <option value=\"volume-low\">High Volume (Low to High)</option>\n          </select>\n        </div>\n      </div>\n      \n      <div className=\"ticker-grid\">\n        {sortedTickers.map((ticker) => {\n          // Get the last trade for this ticker\n          const lastTrade = allData\n            .filter(trade => trade.ticker === ticker.ticker)\n            .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())[0];\n          \n          return (\n            <div \n              key={ticker.ticker} \n              className=\"ticker-card darkpool-card\"\n              onClick={() => onTickerSelect(ticker.ticker)}\n            >\n              <div className=\"ticker-header\">\n                <h3 className=\"ticker-symbol\">\n                  {ticker.ticker}\n                </h3>\n                <div className=\"ticker-metrics\">\n                  <div className=\"metric\">\n                    <TrendingUp className=\"metric-icon value\" />\n                    <span className=\"metric-label\">Total Value</span>\n                    <span className=\"metric-value\">{formatValue(ticker.totalValue)}</span>\n                  </div>\n                  <div className=\"metric\">\n                    <TrendingDown className=\"metric-icon quantity\" />\n                    <span className=\"metric-label\">Quantity</span>\n                    <span className=\"metric-value\">{formatVolume(ticker.totalQuantity)}</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"ticker-details\">\n                <div className=\"detail-row\">\n                  <span className=\"detail-label\">Total Trades:</span>\n                  <span className=\"detail-value\">{ticker.tradeCount}</span>\n                </div>\n                <div className=\"detail-row\">\n                  <span className=\"detail-label\">Avg Price:</span>\n                  <span className=\"detail-value\">${ticker.averagePrice.toFixed(2)}</span>\n                </div>\n                <div className=\"detail-row\">\n                  <Calendar className=\"detail-icon\" />\n                  <span className=\"detail-label\">Max Trade:</span>\n                  <span className=\"detail-value\">{formatValue(ticker.maxTradeValue)}</span>\n                </div>\n              </div>\n              \n              {/* Analytics Section */}\n              <div className=\"ticker-analytics\">\n                <div className=\"analytics-badge key-levels-badge\">\n                  <Target size={12} />\n                  <span className=\"badge-label\">High Volume:</span>\n                  <span className=\"badge-strikes\">\n                    {formatVolume(ticker.highestVolumeQuantity)} @ ${ticker.highestVolumePrice.toFixed(2)}\n                  </span>\n                </div>\n                <div className=\"analytics-badge max-pain-badge\">\n                  <Clock size={12} />\n                  <span className=\"badge-label\">Peak Time:</span>\n                  <span className=\"badge-strikes\">\n                    {formatDateTime(ticker.highestVolumeTime)}\n                  </span>\n                </div>\n              </div>\n              \n              {/* Last Trade Section - Moved to bottom */}\n              {lastTrade && (\n                <div className=\"detail-row last-trade-row\">\n                  <span className=\"detail-label\">Last Trade:</span>\n                  <span className=\"detail-value last-trade\">\n                    {formatValue(lastTrade.price * lastTrade.quantity)} \n                    <span className=\"trade-side\">\n                      {formatVolume(lastTrade.quantity)} @ ${lastTrade.price.toFixed(2)}\n                    </span>\n                    <span className=\"trade-timestamp\">\n                      {formatDateTime(lastTrade.timestamp)}\n                    </span>\n                  </span>\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n      \n      {sortedTickers.length === 0 && (\n        <div className=\"no-tickers\">\n          <p>No dark pool tickers found</p>\n        </div>\n      )}\n    </div>\n  );\n});\n\nDarkPoolTickerList.displayName = 'DarkPoolTickerList';\n\nexport default DarkPoolTickerList;\n","import React, { useMemo } from 'react';\nimport { DarkPoolData } from '../utils/dataParser';\n\ninterface DarkPoolTradeChartProps {\n  trades: DarkPoolData[];\n  ticker: string;\n}\n\ninterface ChartDataPoint {\n  price: number;\n  volume: number;\n  timestamp: string;\n  value: number;\n}\n\nconst DarkPoolTradeChart: React.FC<DarkPoolTradeChartProps> = ({ trades }) => {\n  const chartData = useMemo(() => {\n    if (!trades || trades.length === 0) return [];\n\n    // Sort trades by price for better visualization\n    const sortedTrades = [...trades].sort((a, b) => a.price - b.price);\n    \n    // Group trades by price ranges for better visualization\n    const priceGroups = new Map<number, ChartDataPoint>();\n    \n    sortedTrades.forEach(trade => {\n      const roundedPrice = Math.round(trade.price * 100) / 100; // Round to 2 decimal places\n      \n      if (priceGroups.has(roundedPrice)) {\n        const existing = priceGroups.get(roundedPrice)!;\n        existing.volume += trade.quantity;\n        existing.value += trade.price * trade.quantity;\n        // Keep the most recent timestamp for this price level\n        if (new Date(trade.timestamp) > new Date(existing.timestamp)) {\n          existing.timestamp = trade.timestamp;\n        }\n      } else {\n        priceGroups.set(roundedPrice, {\n          price: roundedPrice,\n          volume: trade.quantity,\n          timestamp: trade.timestamp,\n          value: trade.price * trade.quantity\n        });\n      }\n    });\n\n    return Array.from(priceGroups.values()).sort((a, b) => a.price - b.price);\n  }, [trades]);\n\n  const maxVolume = useMemo(() => {\n    return Math.max(...chartData.map(d => d.volume), 1);\n  }, [chartData]);\n\n\n  const formatVolume = (volume: number): string => {\n    if (volume >= 1000000) {\n      return `${(volume / 1000000).toFixed(1)}M`;\n    } else if (volume >= 1000) {\n      return `${(volume / 1000).toFixed(1)}K`;\n    }\n    return volume.toString();\n  };\n\n  const formatValue = (value: number): string => {\n    if (value >= 1000000000) {\n      return `$${(value / 1000000000).toFixed(1)}B`;\n    } else if (value >= 1000000) {\n      return `$${(value / 1000000).toFixed(1)}M`;\n    } else if (value >= 1000) {\n      return `$${(value / 1000).toFixed(1)}K`;\n    }\n    return `$${value.toFixed(2)}`;\n  };\n\n  const formatDateTime = (timestamp: string): string => {\n    try {\n      const time = new Date(timestamp);\n      if (isNaN(time.getTime())) return '';\n      \n      return time.toLocaleDateString('en-US', {\n        month: 'short',\n        day: 'numeric',\n        hour: 'numeric',\n        minute: '2-digit',\n        hour12: true\n      });\n    } catch (error) {\n      return '';\n    }\n  };\n\n  if (chartData.length === 0) {\n    return (\n      <div className=\"chart-container\">\n        <h3>Trade Distribution Chart</h3>\n        <div className=\"no-data\">No trade data available for charting</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"chart-container\">\n      \n      <div className=\"chart-content\">\n        <div className=\"chart-y-axis\">\n          <div className=\"y-label\">Volume</div>\n          <div className=\"y-scale\">\n            <div className=\"scale-value\">{formatVolume(maxVolume)}</div>\n            <div className=\"scale-value\">{formatVolume(maxVolume * 0.75)}</div>\n            <div className=\"scale-value\">{formatVolume(maxVolume * 0.5)}</div>\n            <div className=\"scale-value\">{formatVolume(maxVolume * 0.25)}</div>\n            <div className=\"scale-value\">0</div>\n          </div>\n        </div>\n        \n        <div className=\"chart-main\">\n          <div className=\"chart-bars\">\n            {chartData.map((dataPoint, index) => {\n              const height = (dataPoint.volume / maxVolume) * 100;\n              const isHighVolume = dataPoint.volume > maxVolume * 0.8;\n              \n              return (\n                <div\n                  key={`${dataPoint.price}-${index}`}\n                  className={`chart-bar ${isHighVolume ? 'high-volume' : ''}`}\n                  style={{ height: `${height}%` }}\n                  title={`Price: $${dataPoint.price.toFixed(2)}\nVolume: ${formatVolume(dataPoint.volume)}\nValue: ${formatValue(dataPoint.value)}\nTime: ${formatDateTime(dataPoint.timestamp)}`}\n                >\n                  <div className=\"bar-value\">{formatVolume(dataPoint.volume)}</div>\n                </div>\n              );\n            })}\n          </div>\n          \n          <div className=\"chart-x-axis\">\n            <div className=\"x-label\">Price ($)</div>\n            <div className=\"x-scale\">\n              {chartData.map((dataPoint, index) => {\n                return (\n                  <div key={`price-${index}`} className=\"x-tick\">\n                    <span className=\"price-label\">${dataPoint.price.toFixed(2)}</span>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DarkPoolTradeChart;\n","import React, { useMemo } from 'react';\nimport { DarkPoolData } from '../utils/dataParser';\n\ninterface DarkPoolTimeChartProps {\n  trades: DarkPoolData[];\n  ticker: string;\n}\n\ninterface TimeDataPoint {\n  time: string;\n  volume: number;\n  tradeCount: number;\n  avgPrice: number;\n  totalValue: number;\n}\n\nconst DarkPoolTimeChart: React.FC<DarkPoolTimeChartProps> = ({ trades }) => {\n  const chartData = useMemo(() => {\n    if (!trades || trades.length === 0) return [];\n\n    // Group trades by time periods (hourly)\n    const timeGroups = new Map<string, TimeDataPoint>();\n    \n    trades.forEach(trade => {\n      const date = new Date(trade.timestamp);\n      const timeKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')} ${String(date.getHours()).padStart(2, '0')}:00`;\n      \n      if (timeGroups.has(timeKey)) {\n        const existing = timeGroups.get(timeKey)!;\n        existing.volume += trade.quantity;\n        existing.tradeCount += 1;\n        existing.totalValue += trade.price * trade.quantity;\n        existing.avgPrice = existing.totalValue / existing.volume;\n      } else {\n        timeGroups.set(timeKey, {\n          time: timeKey,\n          volume: trade.quantity,\n          tradeCount: 1,\n          avgPrice: trade.price,\n          totalValue: trade.price * trade.quantity\n        });\n      }\n    });\n\n    return Array.from(timeGroups.values()).sort((a, b) => new Date(a.time).getTime() - new Date(b.time).getTime());\n  }, [trades]);\n\n  const maxVolume = useMemo(() => {\n    return Math.max(...chartData.map(d => d.volume), 1);\n  }, [chartData]);\n\n  const formatVolume = (volume: number): string => {\n    if (volume >= 1000000) {\n      return `${(volume / 1000000).toFixed(1)}M`;\n    } else if (volume >= 1000) {\n      return `${(volume / 1000).toFixed(1)}K`;\n    }\n    return volume.toString();\n  };\n\n  const formatValue = (value: number): string => {\n    if (value >= 1000000000) {\n      return `$${(value / 1000000000).toFixed(1)}B`;\n    } else if (value >= 1000000) {\n      return `$${(value / 1000000).toFixed(1)}M`;\n    } else if (value >= 1000) {\n      return `$${(value / 1000).toFixed(1)}K`;\n    }\n    return `$${value.toFixed(2)}`;\n  };\n\n  const formatDateTime = (timestamp: string): string => {\n    try {\n      const time = new Date(timestamp);\n      if (isNaN(time.getTime())) return '';\n      \n      const month = String(time.getMonth() + 1).padStart(2, '0');\n      const day = String(time.getDate()).padStart(2, '0');\n      const hour = String(time.getHours()).padStart(2, '0');\n      const minute = String(time.getMinutes()).padStart(2, '0');\n      \n      return `${month}/${day}-${hour}:${minute}`;\n    } catch (error) {\n      return '';\n    }\n  };\n\n  if (chartData.length === 0) {\n    return (\n      <div className=\"chart-container\">\n        <h3>Volume Over Time</h3>\n        <div className=\"no-data\">No trade data available for time analysis</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"chart-container\">\n      \n      <div className=\"chart-content\">\n        <div className=\"chart-y-axis\">\n          <div className=\"y-label\">Volume</div>\n          <div className=\"y-scale\">\n            <div className=\"scale-value\">{formatVolume(maxVolume)}</div>\n            <div className=\"scale-value\">{formatVolume(maxVolume * 0.75)}</div>\n            <div className=\"scale-value\">{formatVolume(maxVolume * 0.5)}</div>\n            <div className=\"scale-value\">{formatVolume(maxVolume * 0.25)}</div>\n            <div className=\"scale-value\">0</div>\n          </div>\n        </div>\n        \n        <div className=\"chart-main\">\n          <div className=\"chart-bars\">\n            {chartData.map((dataPoint, index) => {\n              const height = (dataPoint.volume / maxVolume) * 100;\n              const isHighVolume = dataPoint.volume > maxVolume * 0.8;\n              \n              return (\n                <div\n                  key={`${dataPoint.time}-${index}`}\n                  className={`chart-bar ${isHighVolume ? 'high-volume' : ''}`}\n                  style={{ height: `${height}%` }}\n                  title={`Time: ${formatDateTime(dataPoint.time)}\nVolume: ${formatVolume(dataPoint.volume)}\nTrades: ${dataPoint.tradeCount}\nAvg Price: $${dataPoint.avgPrice.toFixed(2)}\nTotal Value: ${formatValue(dataPoint.totalValue)}`}\n                >\n                  <div className=\"bar-value\">{formatVolume(dataPoint.volume)}</div>\n                </div>\n              );\n            })}\n          </div>\n          \n          <div className=\"chart-x-axis\">\n            <div className=\"x-label\">Time</div>\n            <div className=\"x-scale\">\n              {chartData.map((dataPoint, index) => {\n                return (\n                  <div key={`time-${index}`} className=\"x-tick\">\n                    <span className=\"time-label\">{formatDateTime(dataPoint.time)}</span>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DarkPoolTimeChart;\n","import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { ArrowLeft, RefreshCw, Search } from 'lucide-react';\nimport DarkPoolList from './DarkPoolList';\nimport DarkPoolTickerList from './DarkPoolTickerList';\nimport DarkPoolTradeChart from './DarkPoolTradeChart';\nimport DarkPoolTimeChart from './DarkPoolTimeChart';\nimport { \n  mergeDarkPoolDataFromFiles,\n  getDarkPoolTickerSummaries, \n  clearDarkPoolDataCache,\n  DarkPoolData,\n  MergedDataInfo\n} from '../utils/dataParser';\nimport { loadAllDarkPoolDataFiles, clearDarkPoolFileCache } from '../utils/fileLoader';\nimport { getCurrentPrice, clearPriceCache } from '../utils/stockPrice';\n\nexport interface DarkPoolDashboardProps {\n  activeDashboard: 'options' | 'darkpool' | 'psychology';\n  setActiveDashboard: (dashboard: 'options' | 'darkpool' | 'psychology') => void;\n}\n\nconst DarkPoolDashboard: React.FC<DarkPoolDashboardProps> = ({ activeDashboard, setActiveDashboard }) => {\n  const [selectedTicker, setSelectedTicker] = useState<string | null>(null);\n  const [darkPoolData, setDarkPoolData] = useState<DarkPoolData[]>([]);\n  const [dataInfo, setDataInfo] = useState<MergedDataInfo | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [currentPrice, setCurrentPrice] = useState<number | null>(null);\n  const [priceSource, setPriceSource] = useState<'api' | 'none'>('none');\n  const [isPriceCached, setIsPriceCached] = useState(false);\n  const [searchTerm, setSearchTerm] = useState<string>('');\n\n  useEffect(() => {\n    const loadAllData = async (bustCache: boolean = false) => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        // Load all dark pool CSV files from the data directory\n        const loadedFiles = await loadAllDarkPoolDataFiles(bustCache);\n        \n        if (loadedFiles.length === 0) {\n          throw new Error('No dark pool data files found in the data directory');\n        }\n        \n        // Merge data from all files\n        const { mergedData, info } = mergeDarkPoolDataFromFiles(\n          loadedFiles.map(file => ({\n            filename: file.filename,\n            data: file.data,\n            timestamp: file.timestamp\n          }))\n        );\n        \n        setDarkPoolData(mergedData);\n        setDataInfo(info);\n        setLoading(false);\n        \n        if (import.meta.env.DEV) {\n          console.log(`Loaded ${info.totalFiles} dark pool files with ${info.totalRecords} total records`);\n        }\n      } catch (error) {\n        console.error('Error loading dark pool data files:', error);\n        setError(error instanceof Error ? error.message : 'Failed to load dark pool data');\n        setLoading(false);\n      }\n    };\n\n    loadAllData(false); // Normal load on mount\n  }, []);\n\n  const tickerSummaries = useMemo(() => {\n    const summaries = getDarkPoolTickerSummaries(darkPoolData);\n    \n    // Transform to match the new structure\n    return summaries.map(summary => {\n      const tickerTrades = darkPoolData.filter(trade => trade.ticker === summary.ticker);\n      const quantities = tickerTrades.map(trade => trade.quantity);\n      const values = tickerTrades.map(trade => trade.price * trade.quantity);\n      const prices = tickerTrades.map(trade => trade.price);\n      \n      // Find the highest volume trade\n      const highestVolumeTrade = tickerTrades.reduce((max, trade) => \n        trade.quantity > max.quantity ? trade : max, tickerTrades[0]);\n      \n      // Calculate additional metrics\n      const avgTradeSize = summary.totalValue / summary.tradeCount;\n      const priceVolatility = prices.length > 1 ? \n        Math.sqrt(prices.reduce((acc, price) => acc + Math.pow(price - summary.averagePrice, 2), 0) / prices.length) : 0;\n      \n      return {\n        ticker: summary.ticker,\n        totalValue: summary.totalValue,\n        totalQuantity: summary.totalQuantity,\n        tradeCount: summary.tradeCount,\n        averagePrice: summary.averagePrice,\n        lastActivity: summary.lastActivity,\n        maxTradeValue: Math.max(...values),\n        minTradeValue: Math.min(...values),\n        maxQuantity: Math.max(...quantities),\n        minQuantity: Math.min(...quantities),\n        avgTradeSize: avgTradeSize,\n        priceVolatility: priceVolatility,\n        highestVolumePrice: highestVolumeTrade?.price || 0,\n        highestVolumeTime: highestVolumeTrade?.timestamp || '',\n        highestVolumeQuantity: highestVolumeTrade?.quantity || 0\n      };\n    });\n  }, [darkPoolData]);\n\n  const filteredTickerSummaries = useMemo(() => {\n    if (!searchTerm.trim()) {\n      return tickerSummaries;\n    }\n    \n    const searchLower = searchTerm.toLowerCase();\n    return tickerSummaries.filter(ticker => \n      ticker.ticker.toLowerCase().includes(searchLower)\n    );\n  }, [tickerSummaries, searchTerm]);\n\n  // Get filtered trades for the selected ticker\n  const filteredTrades = useMemo(() => {\n    if (!selectedTicker) return [];\n    return darkPoolData.filter(trade => trade.ticker === selectedTicker);\n  }, [darkPoolData, selectedTicker]);\n\n  const handleTickerSelect = useCallback((ticker: string) => {\n    setSelectedTicker(ticker);\n  }, []);\n\n  const handleBackToList = useCallback(() => {\n    setSelectedTicker(null);\n  }, []);\n\n  const handleRefreshData = useCallback(async () => {\n    try {\n      console.log('🔄 Performing hard refresh for dark pool data...');\n      \n      // Clear all dark pool related caches\n      clearDarkPoolDataCache();      // Clear dark pool parsed data cache\n      clearDarkPoolFileCache();      // Clear dark pool file loading cache\n      clearPriceCache();             // Clear stock price cache (shared)\n      \n      console.log('✓ Dark pool caches cleared (parsed data, file cache, and price cache)');\n      console.log('🔄 Reloading dark pool data with cache bypass...');\n      \n      setLoading(true);\n      setError(null);\n      \n      // Load all dark pool CSV files with cache busting enabled\n      const loadedFiles = await loadAllDarkPoolDataFiles(true);\n      \n      if (loadedFiles.length === 0) {\n        throw new Error('No dark pool data files found in the data directory');\n      }\n      \n      // Merge data from all files\n      const { mergedData, info } = mergeDarkPoolDataFromFiles(\n        loadedFiles.map(file => ({\n          filename: file.filename,\n          data: file.data,\n          timestamp: file.timestamp\n        }))\n      );\n      \n      setDarkPoolData(mergedData);\n      setDataInfo(info);\n      \n      // Reset current price and reload it\n      setCurrentPrice(null);\n      setPriceSource('none');\n      setIsPriceCached(false);\n      \n      // Reload price if a ticker is selected\n      if (selectedTicker) {\n        const { price, source, cached } = await getCurrentPrice(selectedTicker);\n        setCurrentPrice(price);\n        setPriceSource(source);\n        setIsPriceCached(cached);\n      }\n      \n      setLoading(false);\n      \n      console.log('✓ Dark pool data reloaded successfully:', {\n        files: info.totalFiles,\n        records: info.totalRecords,\n        latestData: info.dateRange.latest\n      });\n    } catch (error) {\n      console.error('Error during hard refresh:', error);\n      setError(error instanceof Error ? error.message : 'Failed to refresh dark pool data');\n      setLoading(false);\n    }\n  }, [selectedTicker]);\n\n  // Fetch current stock price when ticker is selected (real-time API with 15min cache)\n  useEffect(() => {\n    if (!selectedTicker) {\n      setCurrentPrice(null);\n      setPriceSource('none');\n      setIsPriceCached(false);\n      return;\n    }\n\n    const fetchPrice = async () => {\n      const result = await getCurrentPrice(selectedTicker);\n      setCurrentPrice(result.price);\n      setPriceSource(result.source);\n      setIsPriceCached(result.cached);\n      \n      if (import.meta.env.DEV) {\n        console.log(`Stock price for ${selectedTicker}:`, result.price, `(source: ${result.source}, cached: ${result.cached})`);\n      }\n    };\n\n    fetchPrice();\n  }, [selectedTicker]);\n\n  if (loading) {\n    return (\n      <div className=\"dashboard-loading\">\n        <div className=\"loading-spinner\"></div>\n        <p>Loading dark pool data from multiple files...</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"dashboard-error\">\n        <div className=\"error-icon\">⚠️</div>\n        <h3>Error Loading Dark Pool Data</h3>\n        <p>{error}</p>\n        <button \n          className=\"retry-button\" \n          onClick={() => window.location.reload()}\n        >\n          Retry\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"darkpool-dashboard\">\n      {/* Compact Header with Data Summary */}\n      <header className=\"dashboard-header\">\n        <div className=\"header-left\">\n          <h1>Market Analysis Dashboard</h1>\n          {dataInfo && (\n            <div className=\"header-stats\">\n              <span className=\"header-stat\">{dataInfo.totalFiles} files</span>\n              <span className=\"stat-separator\">•</span>\n              <span className=\"header-stat\">{dataInfo.totalRecords.toLocaleString()} records</span>\n              <span className=\"stat-separator\">•</span>\n              <span className=\"header-stat\">\n                {dataInfo.files && dataInfo.files.length > 0\n                  ? dataInfo.files[0].timestamp.toLocaleString('en-GB', {\n                      day: '2-digit',\n                      month: '2-digit',\n                      year: 'numeric',\n                      hour: '2-digit',\n                      minute: '2-digit',\n                      second: '2-digit',\n                      hour12: false\n                    })\n                  : dataInfo.dateRange.latest?.toLocaleString('en-GB', {\n                      day: '2-digit',\n                      month: '2-digit',\n                      year: 'numeric',\n                      hour: '2-digit',\n                      minute: '2-digit',\n                      second: '2-digit',\n                      hour12: false\n                    }) || ''}\n              </span>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"header-right\">\n          {!selectedTicker && (\n            <div className=\"search-container-header\">\n              <Search className=\"search-icon\" />\n              <input\n                type=\"text\"\n                className=\"search-input\"\n                placeholder=\"Search tickers...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n              />\n              {searchTerm && (\n                <button \n                  className=\"clear-search\"\n                  onClick={() => setSearchTerm('')}\n                  title=\"Clear search\"\n                >\n                  ×\n                </button>\n              )}\n            </div>\n          )}\n          \n          <div className=\"nav-buttons\">\n            <button \n              className={`nav-button ${activeDashboard === 'options' ? 'active' : ''}`}\n              onClick={() => setActiveDashboard('options')}\n            >\n              Options Analysis\n            </button>\n            <button \n              className={`nav-button ${activeDashboard === 'darkpool' ? 'active' : ''}`}\n              onClick={() => setActiveDashboard('darkpool')}\n            >\n              Dark Pool Analysis\n            </button>\n            <button \n              className={`nav-button ${activeDashboard === 'psychology' ? 'active' : ''}`}\n              onClick={() => setActiveDashboard('psychology')}\n            >\n              Overall Analysis\n            </button>\n          </div>\n          \n          <button \n            className=\"refresh-button-compact\" \n            onClick={handleRefreshData}\n            title=\"Hard Refresh - Clears all caches and reloads data from files\"\n          >\n            <RefreshCw className=\"refresh-icon\" />\n            Hard Refresh\n          </button>\n        </div>\n      </header>\n\n      {!selectedTicker ? (\n        <DarkPoolTickerList \n          tickers={filteredTickerSummaries} \n          onTickerSelect={handleTickerSelect}\n          allData={darkPoolData}\n        />\n      ) : (\n        <div className=\"ticker-detail-view\">\n          <div className=\"detail-header\">\n            <button className=\"back-button\" onClick={handleBackToList}>\n              <ArrowLeft className=\"back-icon\" />\n              Back to Ticker List\n            </button>\n            <h2>{selectedTicker} Dark Pool Analysis</h2>\n            {currentPrice && priceSource === 'api' ? (\n              <span className=\"current-price-badge\">\n                <span className=\"price-indicator\"></span>\n                Current Price: ${currentPrice.toFixed(2)}\n                <span className=\"price-status\">\n                  ({isPriceCached ? 'Cached' : 'Live'})\n                </span>\n              </span>\n            ) : (\n              <span className=\"price-unavailable\">\n                Price unavailable\n              </span>\n            )}\n          </div>\n\n          {/* Charts Section - 2 Column Layout */}\n          <div className=\"charts-container\">\n            <div className=\"chart-column\">\n              <DarkPoolTradeChart \n                trades={filteredTrades}\n                ticker={selectedTicker}\n              />\n            </div>\n            <div className=\"chart-column\">\n              <DarkPoolTimeChart \n                trades={filteredTrades}\n                ticker={selectedTicker}\n              />\n            </div>\n          </div>\n\n          {/* Dark Pool Trade List */}\n          <div className=\"darkpool-trades-section\">\n            <DarkPoolList \n              trades={filteredTrades}\n              ticker={selectedTicker}\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DarkPoolDashboard;\n","/**\n * Central session storage management for the Option Analysis application\n * Handles clearing all session storage caches when the application closes\n */\n\nimport { clearAllSessionCaches } from './fileLoader';\nimport { clearAllDataParserCaches } from './dataParser';\nimport { clearPriceCache } from './stockPrice';\n\n/**\n * Clear all session storage caches used by the application\n * Also clears service worker caches if available\n */\nexport async function clearAllApplicationCaches(): Promise<void> {\n  try {\n    // Clear file loader caches\n    clearAllSessionCaches();\n    \n    // Clear data parser caches\n    clearAllDataParserCaches();\n    \n    // Clear price cache\n    clearPriceCache();\n    \n    // Clear any other session storage items that might exist\n    const keysToRemove: string[] = [];\n    for (let i = 0; i < sessionStorage.length; i++) {\n      const key = sessionStorage.key(i);\n      if (key && key.startsWith('optionAnalysis_')) {\n        keysToRemove.push(key);\n      }\n    }\n    \n    keysToRemove.forEach(key => {\n      try {\n        sessionStorage.removeItem(key);\n      } catch (error) {\n        if (import.meta.env.DEV) {\n          console.warn(`Failed to remove session storage key ${key}:`, error);\n        }\n      }\n    });\n    \n    // Clear service worker caches if available\n    if ('caches' in window) {\n      try {\n        const cacheNames = await caches.keys();\n        await Promise.all(cacheNames.map(name => {\n          if (import.meta.env.DEV) {\n            console.log(`🗑️ Deleting cache: ${name}`);\n          }\n          return caches.delete(name);\n        }));\n        if (import.meta.env.DEV) {\n          console.log('✅ Service worker caches cleared');\n        }\n      } catch (cacheError) {\n        if (import.meta.env.DEV) {\n          console.warn('Failed to clear service worker caches:', cacheError);\n        }\n      }\n    }\n    \n    if (import.meta.env.DEV) {\n      console.log('🧹 All application session storage and caches cleared');\n    }\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.error('Failed to clear application caches:', error);\n    }\n  }\n}\n\n/**\n * Initialize session storage cleanup on application close\n * This should be called once when the application starts\n */\nexport function initializeSessionStorageCleanup(): void {\n  // Clear session storage when the page is about to unload\n  const handleBeforeUnload = () => {\n    clearAllApplicationCaches();\n  };\n  \n  // Clear session storage when the page is unloaded\n  const handleUnload = () => {\n    clearAllApplicationCaches();\n  };\n  \n  // Clear session storage when the page is hidden (mobile browsers)\n  const handleVisibilityChange = () => {\n    if (document.visibilityState === 'hidden') {\n      clearAllApplicationCaches();\n    }\n  };\n  \n  // Add event listeners\n  window.addEventListener('beforeunload', handleBeforeUnload);\n  window.addEventListener('unload', handleUnload);\n  document.addEventListener('visibilitychange', handleVisibilityChange);\n  \n  // Also clear on page hide (for mobile browsers)\n  window.addEventListener('pagehide', handleBeforeUnload);\n  \n  if (import.meta.env.DEV) {\n    console.log('🔧 Session storage cleanup initialized');\n  }\n}\n\n/**\n * Get all session storage keys used by the application\n */\nexport function getApplicationSessionStorageKeys(): string[] {\n  const keys: string[] = [];\n  for (let i = 0; i < sessionStorage.length; i++) {\n    const key = sessionStorage.key(i);\n    if (key && key.startsWith('optionAnalysis_')) {\n      keys.push(key);\n    }\n  }\n  return keys;\n}\n\n/**\n * Get the total size of application session storage in bytes\n */\nexport function getApplicationSessionStorageSize(): number {\n  let totalSize = 0;\n  for (let i = 0; i < sessionStorage.length; i++) {\n    const key = sessionStorage.key(i);\n    if (key && key.startsWith('optionAnalysis_')) {\n      const value = sessionStorage.getItem(key);\n      if (value) {\n        totalSize += key.length + value.length;\n      }\n    }\n  }\n  return totalSize;\n}\n","import React, { useMemo } from 'react';\nimport { OptionData, formatPremium } from '../utils/dataParser';\nimport { \n  analyzeTickerWeeklySentiment, \n  TickerWeeklyAnalysis,\n  WeeklyTickerData \n} from '../utils/tradePsychology';\n\ninterface TickerWeeklyAnalysisProps {\n  trades: OptionData[];\n  sortedAnalyses?: TickerWeeklyAnalysis[];\n}\n\nconst TickerWeeklyAnalysisComponent: React.FC<TickerWeeklyAnalysisProps> = ({ trades, sortedAnalyses }) => {\n  const tickerAnalyses = useMemo(() => {\n    // Use sorted analyses if provided, otherwise compute from trades\n    if (sortedAnalyses) {\n      return sortedAnalyses;\n    }\n    if (!trades || trades.length === 0) return [];\n    return analyzeTickerWeeklySentiment(trades);\n  }, [trades, sortedAnalyses]);\n\n  if (tickerAnalyses.length === 0) {\n    return (\n      <div className=\"ticker-weekly-analysis\">\n        <h3>Ticker Weekly Analysis</h3>\n        <p>No data available for ticker weekly analysis</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"ticker-weekly-analysis\">\n      <h3>Ticker Weekly Analysis</h3>\n      <p>Bullish/Bearish sentiment by ticker for each week</p>\n      \n      <div className=\"ticker-analysis-grid\">\n        {tickerAnalyses.slice(0, 20).map((analysis) => (\n          <TickerAnalysisCard key={analysis.ticker} analysis={analysis} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\ninterface TickerAnalysisCardProps {\n  analysis: TickerWeeklyAnalysis;\n}\n\nconst TickerAnalysisCard: React.FC<TickerAnalysisCardProps> = ({ analysis }) => {\n  const totalVolume = analysis.weeks.reduce((sum, week) => sum + week.totalVolume, 0);\n  const totalTrades = analysis.weeks.reduce((sum, week) => sum + week.totalTrades, 0);\n  const totalPremium = analysis.weeks.reduce((sum, week) => sum + week.totalPremium, 0);\n\n  return (\n    <div className={`ticker-analysis-card ${analysis.overallSentiment}`}>\n      <div className=\"ticker-header\">\n        <h4>{analysis.ticker}</h4>\n        <div className={`overall-sentiment ${analysis.overallSentiment}`}>\n          {analysis.overallSentiment.toUpperCase()}\n        </div>\n      </div>\n      \n      <div className=\"ticker-summary\">\n        <div className=\"summary-metric\">\n          <span className=\"metric-label\">Volume</span>\n          <span className=\"metric-value\">{formatVolume(totalVolume)}</span>\n        </div>\n        <div className=\"summary-metric\">\n          <span className=\"metric-label\">Trades</span>\n          <span className=\"metric-value\">{totalTrades.toLocaleString()}</span>\n        </div>\n        <div className=\"summary-metric\">\n          <span className=\"metric-label\">Premium</span>\n          <span className=\"metric-value\">{formatPremium(totalPremium)}</span>\n        </div>\n        <div className=\"summary-metric\">\n          <span className=\"metric-label\">Weeks</span>\n          <span className=\"metric-value\">{analysis.weeks.length}</span>\n        </div>\n      </div>\n\n      <div className=\"trend-info\">\n        <div className={`trend-direction ${analysis.trendDirection}`}>\n          <span className=\"trend-label\">Trend</span>\n          <span className=\"trend-value\">{analysis.trendDirection}</span>\n        </div>\n        <div className={`confidence ${analysis.confidence}`}>\n          <span className=\"confidence-label\">Confidence</span>\n          <span className=\"confidence-value\">{analysis.confidence}</span>\n        </div>\n      </div>\n\n      <div className=\"weekly-breakdown\">\n        <div className=\"weeks-list\">\n          {analysis.weeks.slice(0, 2).map((week) => (\n            <WeekRow key={`${week.weekStart}-${week.weekEnd}`} week={week} />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\ninterface WeekRowProps {\n  week: WeeklyTickerData;\n}\n\nconst WeekRow: React.FC<WeekRowProps> = ({ week }) => {\n  const weekLabel = `${formatWeekDate(week.weekStart)} - ${formatWeekDate(week.weekEnd)}`;\n  \n  return (\n    <div className={`week-row ${week.psychology.sentiment}`}>\n      <div className=\"week-header\">\n        <span className=\"week-date\">{weekLabel}</span>\n        <div className={`week-sentiment ${week.psychology.sentiment}`}>\n          {week.psychology.sentiment.toUpperCase()}\n        </div>\n      </div>\n      \n      <div className=\"week-metrics\">\n        <div className=\"week-metric\">\n          <span className=\"metric-label\">Vol</span>\n          <span className=\"metric-value\">{formatVolume(week.totalVolume)}</span>\n        </div>\n        <div className=\"week-metric\">\n          <span className=\"metric-label\">C/P</span>\n          <span className=\"metric-value\">{week.callPutRatio.toFixed(1)}</span>\n        </div>\n        <div className=\"week-metric\">\n          <span className=\"metric-label\">Trd</span>\n          <span className=\"metric-value\">{week.totalTrades}</span>\n        </div>\n        <div className=\"week-metric\">\n          <span className=\"metric-label\">Swp</span>\n          <span className=\"metric-value\">{week.sweepCount + week.unusualSweepCount + week.highlyUnusualSweepCount}</span>\n        </div>\n      </div>\n      \n      <div className=\"week-psychology\">\n        <span className=\"psychology-description\">{week.psychology.description}</span>\n      </div>\n    </div>\n  );\n};\n\n// Utility functions\nfunction formatVolume(volume: number): string {\n  if (volume >= 1000000) {\n    return `${(volume / 1000000).toFixed(1)}M`;\n  } else if (volume >= 1000) {\n    return `${(volume / 1000).toFixed(1)}K`;\n  }\n  return volume.toString();\n}\n\nfunction formatWeekDate(dateStr: string): string {\n  const date = new Date(dateStr);\n  return date.toLocaleDateString('en-US', { \n    month: 'short', \n    day: 'numeric' \n  });\n}\n\nexport default TickerWeeklyAnalysisComponent;\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { ArrowLeft, RefreshCw, AlertTriangle } from 'lucide-react';\nimport { \n  mergeDataFromFiles,\n  clearDataCache,\n  OptionData,\n  MergedDataInfo\n} from '../utils/dataParser';\nimport { loadAllDataFiles } from '../utils/fileLoader';\nimport { clearAllApplicationCaches } from '../utils/sessionStorageManager';\nimport TickerWeeklyAnalysisComponent from './TickerWeeklyAnalysis';\nimport { TickerWeeklyAnalysis, analyzeTickerWeeklySentiment } from '../utils/tradePsychology';\n\ntype DashboardType = 'options' | 'darkpool' | 'psychology';\n\ntype SortField = 'volume' | 'premium' | 'recent' | 'sentiment' | 'trades' | 'ticker';\ntype SortDirection = 'asc' | 'desc';\n\ninterface OverallAnalysisDashboardProps {\n  activeDashboard: DashboardType;\n  setActiveDashboard: (dashboard: DashboardType) => void;\n}\n\nconst OverallAnalysisDashboard: React.FC<OverallAnalysisDashboardProps> = ({ setActiveDashboard }) => {\n  const [optionData, setOptionData] = useState<OptionData[]>([]);\n  const [, setDataInfo] = useState<MergedDataInfo | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [sortField, setSortField] = useState<SortField>('volume');\n  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');\n  const [loadingTimeout, setLoadingTimeout] = useState<NodeJS.Timeout | null>(null);\n  \n  useEffect(() => {\n    const loadAllData = async (bustCache: boolean = false) => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        // Set a timeout to prevent infinite loading\n        const timeout = setTimeout(() => {\n          setError('Loading is taking longer than expected. This might be a cache issue. Try refreshing or clearing cache.');\n        }, 15000); // 15 second timeout\n        \n        setLoadingTimeout(timeout);\n        \n        // Load all CSV files from the data directory\n        const loadedFiles = await loadAllDataFiles(bustCache);\n        \n        if (loadedFiles.length === 0) {\n          throw new Error('No data files found in the data directory');\n        }\n        \n        // Merge data from all files\n        const { mergedData, info } = mergeDataFromFiles(loadedFiles);\n        \n        setOptionData(mergedData);\n        setDataInfo(info);\n        \n        // Clear timeout on success\n        if (timeout) {\n          clearTimeout(timeout);\n          setLoadingTimeout(null);\n        }\n        \n        if (import.meta.env.DEV) {\n          console.log(`Loaded ${mergedData.length} option records from ${info.totalFiles} files`);\n          console.log('Date range:', info.dateRange);\n        }\n      } catch (err) {\n        console.error('Error loading data:', err);\n        setError(err instanceof Error ? err.message : 'Failed to load data');\n        \n        // Clear timeout on error\n        if (loadingTimeout) {\n          clearTimeout(loadingTimeout);\n          setLoadingTimeout(null);\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Load data on mount\n    loadAllData();\n    \n    // Cleanup timeout on unmount\n    return () => {\n      if (loadingTimeout) {\n        clearTimeout(loadingTimeout);\n      }\n    };\n  }, []);\n\n  \n\n  const handleRefresh = async () => {\n    // Clear all caches (now async)\n    clearDataCache();\n    await clearAllApplicationCaches();\n    \n    const loadAllData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        // Set timeout for refresh\n        const timeout = setTimeout(() => {\n          setError('Refresh is taking longer than expected. Try clearing cache manually.');\n        }, 15000);\n        \n        setLoadingTimeout(timeout);\n        \n        const loadedFiles = await loadAllDataFiles(true);\n        \n        if (loadedFiles.length === 0) {\n          throw new Error('No data files found in the data directory');\n        }\n        \n        const { mergedData, info } = mergeDataFromFiles(loadedFiles);\n        \n        setOptionData(mergedData);\n        setDataInfo(info);\n        \n        // Clear timeout on success\n        if (timeout) {\n          clearTimeout(timeout);\n          setLoadingTimeout(null);\n        }\n        \n        if (import.meta.env.DEV) {\n          console.log(`Refreshed: Loaded ${mergedData.length} option records from ${info.totalFiles} files`);\n        }\n      } catch (err) {\n        console.error('Error refreshing data:', err);\n        setError(err instanceof Error ? err.message : 'Failed to refresh data');\n        \n        // Clear timeout on error\n        if (loadingTimeout) {\n          clearTimeout(loadingTimeout);\n          setLoadingTimeout(null);\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    await loadAllData();\n  };\n\n  const handleClearCache = () => {\n    clearDataCache();\n    clearAllApplicationCaches();\n    setError(null);\n    setLoading(true);\n    \n    // Reload after clearing cache\n    setTimeout(() => {\n      window.location.reload();\n    }, 100);\n  };\n\n  // Sort ticker analyses based on current sort settings\n  const sortedTickerAnalyses = useMemo(() => {\n    if (!optionData || optionData.length === 0) return [];\n    \n    const analyses = analyzeTickerWeeklySentiment(optionData);\n    \n    return analyses.sort((a: TickerWeeklyAnalysis, b: TickerWeeklyAnalysis) => {\n      let aValue: number | string;\n      let bValue: number | string;\n      \n      switch (sortField) {\n        case 'volume':\n          aValue = a.weeks.reduce((sum, week) => sum + week.totalVolume, 0);\n          bValue = b.weeks.reduce((sum, week) => sum + week.totalVolume, 0);\n          break;\n        case 'premium':\n          aValue = a.weeks.reduce((sum, week) => sum + week.totalPremium, 0);\n          bValue = b.weeks.reduce((sum, week) => sum + week.totalPremium, 0);\n          break;\n        case 'trades':\n          aValue = a.weeks.reduce((sum, week) => sum + week.totalTrades, 0);\n          bValue = b.weeks.reduce((sum, week) => sum + week.totalTrades, 0);\n          break;\n        case 'recent':\n          // Sort by most recent week's activity (volume + premium)\n          const aRecentWeek = a.weeks[a.weeks.length - 1];\n          const bRecentWeek = b.weeks[b.weeks.length - 1];\n          aValue = (aRecentWeek?.totalVolume || 0) + (aRecentWeek?.totalPremium || 0);\n          bValue = (bRecentWeek?.totalVolume || 0) + (bRecentWeek?.totalPremium || 0);\n          break;\n        case 'sentiment':\n          // Convert sentiment to numeric value for sorting\n          const sentimentOrder = { bullish: 3, bearish: 2, mixed: 1, neutral: 0 };\n          aValue = sentimentOrder[a.overallSentiment];\n          bValue = sentimentOrder[b.overallSentiment];\n          break;\n        case 'ticker':\n          aValue = a.ticker;\n          bValue = b.ticker;\n          break;\n        default:\n          aValue = 0;\n          bValue = 0;\n      }\n      \n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortDirection === 'asc' \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n      \n      const numA = Number(aValue);\n      const numB = Number(bValue);\n      \n      return sortDirection === 'asc' ? numA - numB : numB - numA;\n    });\n  }, [optionData, sortField, sortDirection]);\n\n  const handleSortChange = (field: SortField) => {\n    if (sortField === field) {\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('desc'); // Default to descending for most fields\n    }\n  };\n\n  const getSortLabel = (field: SortField): string => {\n    const labels = {\n      volume: 'Total Volume',\n      premium: 'Total Premium',\n      trades: 'Total Trades',\n      recent: 'Recent Activity',\n      sentiment: 'Sentiment',\n      ticker: 'Ticker'\n    };\n    return labels[field];\n  };\n\n  if (loading) {\n    return (\n      <div className=\"trade-psychology-dashboard\">\n        <div className=\"dashboard-header\">\n          <div className=\"header-controls\">\n            <div className=\"header-title-group\">\n              <button \n                className=\"back-button\"\n                onClick={() => setActiveDashboard('options')}\n                title=\"Back to Options Dashboard\"\n              >\n                <ArrowLeft size={20} />\n              </button>\n              <h2>Overall Analysis</h2>\n            </div>\n            \n            {/* Sort Controls - Full Width */}\n            <div className=\"sort-controls\">\n              {(['volume', 'premium', 'trades', 'recent', 'sentiment', 'ticker'] as SortField[]).map((field) => (\n                <button\n                  key={field}\n                  className={`sort-tab ${sortField === field ? 'active' : ''}`}\n                  onClick={() => handleSortChange(field)}\n                  title={`Sort by ${getSortLabel(field)}`}\n                >\n                  <span>{getSortLabel(field)}</span>\n                  {sortField === field && (\n                    <span className=\"sort-direction\">\n                      {sortDirection === 'asc' ? '↑' : '↓'}\n                    </span>\n                  )}\n                </button>\n              ))}\n            </div>\n            \n            <div className=\"header-actions\">\n              <button \n                className=\"refresh-button\"\n                onClick={handleRefresh}\n                title=\"Refresh Data\"\n              >\n                <RefreshCw size={20} />\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"loading\">\n          <p>Loading overall analysis data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"trade-psychology-dashboard\">\n        <div className=\"dashboard-header\">\n          <div className=\"header-controls\">\n            <div className=\"header-title-group\">\n              <button \n                className=\"back-button\"\n                onClick={() => setActiveDashboard('options')}\n                title=\"Back to Options Dashboard\"\n              >\n                <ArrowLeft size={20} />\n              </button>\n              <h2>Overall Analysis</h2>\n            </div>\n            \n            {/* Sort Controls - Full Width */}\n            <div className=\"sort-controls\">\n              {(['volume', 'premium', 'trades', 'recent', 'sentiment', 'ticker'] as SortField[]).map((field) => (\n                <button\n                  key={field}\n                  className={`sort-tab ${sortField === field ? 'active' : ''}`}\n                  onClick={() => handleSortChange(field)}\n                  title={`Sort by ${getSortLabel(field)}`}\n                >\n                  <span>{getSortLabel(field)}</span>\n                  {sortField === field && (\n                    <span className=\"sort-direction\">\n                      {sortDirection === 'asc' ? '↑' : '↓'}\n                    </span>\n                  )}\n                </button>\n              ))}\n            </div>\n            \n            <div className=\"header-actions\">\n              <button \n                className=\"refresh-button\"\n                onClick={handleRefresh}\n                title=\"Refresh Data\"\n              >\n                <RefreshCw size={20} />\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"error\">\n          <div className=\"error-icon\">\n            <AlertTriangle size={48} />\n          </div>\n          <h3>Error Loading Data</h3>\n          <p>{error}</p>\n          <div className=\"error-actions\">\n            <button onClick={handleRefresh} className=\"retry-button\">\n              <RefreshCw size={16} />\n              Try Again\n            </button>\n            <button onClick={handleClearCache} className=\"clear-cache-button\">\n              <AlertTriangle size={16} />\n              Clear Cache & Reload\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n\n\n  return (\n    <div className=\"trade-psychology-dashboard\">\n      <div className=\"dashboard-header\">\n        <div className=\"header-controls\">\n          <div className=\"header-title-group\">\n            <button \n              className=\"back-button\"\n              onClick={() => setActiveDashboard('options')}\n              title=\"Back to Options Dashboard\"\n            >\n              <ArrowLeft size={20} />\n            </button>\n            <h2>Overall Analysis</h2>\n          </div>\n          \n          {/* Sort Controls - Full Width */}\n          <div className=\"sort-controls\">\n            {(['volume', 'premium', 'trades', 'recent', 'sentiment', 'ticker'] as SortField[]).map((field) => (\n              <button\n                key={field}\n                className={`sort-tab ${sortField === field ? 'active' : ''}`}\n                onClick={() => handleSortChange(field)}\n                title={`Sort by ${getSortLabel(field)}`}\n              >\n                <span>{getSortLabel(field)}</span>\n                {sortField === field && (\n                  <span className=\"sort-direction\">\n                    {sortDirection === 'asc' ? '↑' : '↓'}\n                  </span>\n                )}\n              </button>\n            ))}\n          </div>\n          \n          <div className=\"header-actions\">\n            <button \n              className=\"refresh-button\"\n              onClick={handleRefresh}\n              title=\"Refresh Data\"\n            >\n              <RefreshCw size={20} />\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Ticker Weekly Analysis */}\n      <TickerWeeklyAnalysisComponent \n        trades={optionData} \n        sortedAnalyses={sortedTickerAnalyses}\n      />\n    </div>\n  );\n};\n\n\nexport default OverallAnalysisDashboard;\n","import { Component, ErrorInfo, ReactNode } from 'react';\n\ninterface Props {\n  children: ReactNode;\n  fallback?: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: ErrorInfo;\n}\n\nclass ErrorBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): State {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('ErrorBoundary caught an error:', error, errorInfo);\n    this.setState({ error, errorInfo });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      return (\n        <div className=\"error-boundary\">\n          <div className=\"error-content\">\n            <h2>Something went wrong</h2>\n            <p>An error occurred while rendering this component.</p>\n            <details className=\"error-details\">\n              <summary>Error Details</summary>\n              <pre>{this.state.error?.toString()}</pre>\n              <pre>{this.state.errorInfo?.componentStack}</pre>\n            </details>\n            <button \n              className=\"retry-button\"\n              onClick={() => this.setState({ hasError: false, error: undefined, errorInfo: undefined })}\n            >\n              Try Again\n            </button>\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import { useState } from 'react';\nimport OptionsDashboard from './components/OptionsDashboard';\nimport DarkPoolDashboard from './components/DarkPoolDashboard';\nimport OverallAnalysisDashboard from './components/OverallAnalysisDashboard';\nimport ErrorBoundary from './components/ErrorBoundary';\nimport './App.css';\n\ntype DashboardType = 'options' | 'darkpool' | 'psychology';\n\nfunction App() {\n  const [activeDashboard, setActiveDashboard] = useState<DashboardType>('options');\n\n  return (\n    <div className=\"app\">\n      <main>\n        <ErrorBoundary>\n          {activeDashboard === 'options' ? (\n            <OptionsDashboard \n              activeDashboard={activeDashboard}\n              setActiveDashboard={setActiveDashboard}\n            />\n          ) : activeDashboard === 'darkpool' ? (\n            <DarkPoolDashboard \n              activeDashboard={activeDashboard}\n              setActiveDashboard={setActiveDashboard}\n            />\n          ) : (\n            <OverallAnalysisDashboard \n              activeDashboard={activeDashboard}\n              setActiveDashboard={setActiveDashboard}\n            />\n          )}\n        </ErrorBoundary>\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\nimport { initializeSessionStorageCleanup } from './utils/sessionStorageManager'\n\n// Register service worker for better performance\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', () => {\n    // Use dynamic base path for GitHub Pages\n    const basePath = import.meta.env.BASE_URL;\n    navigator.serviceWorker.register(`${basePath}sw.js`)\n      .then((registration) => {\n        console.log('SW registered: ', registration);\n        \n        // Check for updates\n        registration.addEventListener('updatefound', () => {\n          const newWorker = registration.installing;\n          newWorker?.addEventListener('statechange', () => {\n            if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n              // New service worker available, prompt user to reload\n              console.log('🔄 New service worker available. Please reload the page.');\n            }\n          });\n        });\n      })\n      .catch((registrationError) => {\n        console.log('SW registration failed: ', registrationError);\n      });\n  });\n  \n  // Add function to clear all caches and unregister service worker\n  (window as any).clearAllCaches = async () => {\n    try {\n      // Unregister all service workers\n      const registrations = await navigator.serviceWorker.getRegistrations();\n      await Promise.all(registrations.map(reg => reg.unregister()));\n      \n      // Clear all caches\n      const cacheNames = await caches.keys();\n      await Promise.all(cacheNames.map(name => caches.delete(name)));\n      \n      // Clear session storage\n      sessionStorage.clear();\n      \n      // Clear local storage\n      localStorage.clear();\n      \n      console.log('✅ All caches cleared!');\n      alert('All caches cleared! Please reload the page.');\n      window.location.reload();\n    } catch (error) {\n      console.error('Failed to clear caches:', error);\n    }\n  };\n}\n\n// Initialize session storage cleanup\ninitializeSessionStorageCleanup();\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n)\n"],"names":["f","require$$0","k","l","m","n","p","q","c","a","g","b","d","e","h","reactJsxRuntime_production_min","jsxRuntimeModule","client","PARSE_CACHE_KEY","DARKPOOL_PARSE_CACHE_KEY","TICKER_SUMMARY_CACHE_KEY","DARKPOOL_TICKER_SUMMARY_CACHE_KEY","getSessionParseCache","key","cached","parsed","map","v","setSessionParseCache","cache","obj","getSessionDarkPoolParseCache","setSessionDarkPoolParseCache","getSessionTickerSummaryCache","setSessionTickerSummaryCache","getSessionDarkPoolTickerSummaryCache","setSessionDarkPoolTickerSummaryCache","clearSessionCache","clearDataCache","clearDarkPoolDataCache","clearAllDataParserCaches","parseTimestampFromData","timestampStr","now","today","monthMap","convertTo24Hour","hour","ampm","hour24","match","monthName","day","year","minute","month","yesterday","isOptionExpired","expiryStr","parts","parseCSVData","csvText","sourceFile","cacheKey","parseCache","lines","data","estimatedSize","dataIndex","i","line","fields","parseCSVLine","timestamp","sweepType","ticker","strike","expiry","optionType","volume","_a","premium","openInterest","_b","bidAskSpread","invalidTickers","isValidTicker","isExpired","getTickerSummaries","tickerSummaryCache","tickerMap","option","parsedTimestamp","summary","parsePremium","currentTimestamp","result","expirySet","dateA","dateB","getVolumeProfileForTicker","filteredData","strikeMap","profile","getExpiryDatesForTicker","expiries","getHighestVolumeData","highestVolume","max","current","cleanPremium","num","formatVolume","formatPremium","mergeDataFromFiles","fileData","mergedData","fileInfo","earliestDate","latestDate","uniqueTrades","timestampA","file","parsedData","trade","fileTimestamp","info","parseDarkPoolData","csvContent","filename","darkPoolParseCache","darkPoolData","quantityStr","priceStr","_c","totalValue","_d","_e","quantity","price","inQuotes","char","mergeDarkPoolDataFromFiles","files","allData","totalRecords","record","recordDate","getDarkPoolTickerSummaries","darkPoolTickerSummaryCache","existing","tradeDate","formatDateTime","parsedDate","time","TickerList","memo","tickers","onTickerSelect","sortBy","setSortBy","useState","getTodayVolume","tickerTrades","t","todayVolume","todayDate","sortedTickers","useMemo","sorted","jsxs","jsx","ArrowUpDown","callDominant","putDominant","dominanceClass","TrendingUp","TrendingDown","Calendar","dayVolumes","dayCallVolumes","dayPutVolumes","daysAgo","currentWeekStart","currentWeekEnd","dayOfWeek","parseExpiryDate","isoMatch","strikeVolumes","expiryDate","volumes","topStrikes","Target","idx","VolumeProfileChart","highestVolumeData","chartType","currentPrice","trades","tooltip","setTooltip","getBarWidth","useCallback","maxVolume","getTooltipData","strikeTrades","totalVolume","sum","totalPremium","premiumFormatted","premiumFull","sweepTypes","tradeVolumes","size","tradeDetails","handleBarMouseEnter","rect","tooltipData","handleBarMouseLeave","prev","handleBarMouseMove","getCurrentPrice","isCurrentPrice","filteredChartData","maxTotalVolume","minStrike","maxStrike","totalVolumeSum","getStrikePosition","index","item","totalItems","spacing","reversedIndex","getCurrentPricePosition","clampedPrice","lowerStrike","upperStrike","lowerIndex","upperIndex","currentStrike","nextStrike","lowerPos","upperPos","lowerReversed","upperReversed","priceRatio","getChartHeight","Fragment","date","TradeRow","formatExecutionDateTime","fullMatch","formattedDate","formattedTime","isHighValue","TradeList","sortedTrades","expiryA","expiryB","filteredTrades","getTradeKey","hasK","hasM","StrikeExpiryHeatmap","heatmapData","strikes","maxAbsValue","dataMap","strikeSet","cell","sortedStrikes","sortedExpiries","maxAbs","absValue","getColor","value","alpha","formatValue","isCurrentPriceStrike","getCellKey","hasData","isAtMoney","analyzeTradePsychology","hourlyData","callPutRatio","premiumCallPutRatio","sweepCount","unusualSweepCount","highlyUnusualSweepCount","totalTrades","sentiment","confidence","totalSweeps","activity","sweepIntensity","description","isTradingHour","getTradingHours","hours","aggregateTradesByHour","targetDate","hourlyMap","rawHour","hourData","avgTradeSize","analyzeDailyTradePsychology","dailySummary","totalCallVolume","totalPutVolume","dailyHourlyData","dateStr","getPreviousTradingDay","prevDay","isTradingDay","getMostRecentTradeDate","mostRecentDate","analyzeFourDayTradePsychology","days","currentDate","dayAnalysis","overallTrend","analyzeOverallTrend","hourlyPatterns","analyzeHourlyPatterns","sentiments","confidences","sentimentCounts","acc","dominantSentiment","highConfidenceDays","volumeTrend","avgVolume","patterns","tradingHours","avgTrades","consistency","getWeekStart","diff","getWeekEnd","weekStart","weekEnd","formatDate","analyzeWeeklyTradePsychology","weeklyData","volumeThreshold","tradesThreshold","analyzeTickerWeeklySentiment","tickerGroups","analyses","weekGroups","weekKey","weeks","weekTrades","weekStartDate","weekEndDate","callTrades","putTrades","callVolume","putVolume","callTradeCount","putTradeCount","callPremium","putPremium","uniqueExpiries","psychology","w","overallSentiment","trendDirection","recentSentiment","previousSentiment","maxCount","aTotalVolume","week","TickerPsychologyAnalysis","selectedDay","setSelectedDay","analysis","event","selectedDayData","DayColumn","HourBar","isSelected","onClick","formatHour","onMouseEnter","onMouseLeave","height","hasTrades","isHalfHour","wholeHour","parseTimestampFromFilename","timeStr","getDataFiles","response","apiData","getDarkPoolDataFiles","loadCSVFile","bustCache","cacheBuster","error","FILE_CACHE_KEY","DARKPOOL_FILE_CACHE_KEY","CACHE_DURATION","getSessionCache","setSessionCache","clearAllSessionCaches","clearFileCache","clearDarkPoolFileCache","loadAllDataFiles","fileCache","loadPromises","results","cachedResults","filesToLoad","newResults","allResults","successful","failed","loadAllDarkPoolDataFiles","darkPoolFileCache","fetchStockPrice","finnhubApiKey","finnhubUrl","yahooUrl","proxyUrl","PRICE_CACHE_KEY","getSessionPriceCache","setSessionPriceCache","clearSessionPriceCache","priceCache","apiPrice","clearPriceCache","OptionsDashboard","activeDashboard","setActiveDashboard","selectedTicker","setSelectedTicker","selectedExpiry","setSelectedExpiry","optionData","setOptionData","dataInfo","setDataInfo","loading","setLoading","setError","setCurrentPrice","priceSource","setPriceSource","isPriceCached","setIsPriceCached","searchTerm","setSearchTerm","useEffect","loadedFiles","tickerSummaries","filteredTickerSummaries","searchLower","expiryDates","volumeProfileData","matchesTicker","matchesExpiry","handleTickerSelect","handleBackToList","handleExpirySelect","handleRefreshData","source","Search","RefreshCw","ArrowLeft","DarkPoolRow","volumeStats","valueStats","formatQuantity","cleanValue","getRowColor","calculateStats","values","mean","val","variance","stdDev","q75Index","q90Index","q95Index","DarkPoolList","sortOrder","setSortOrder","comparison","aValue","bValue","handleSort","newSortBy","getSortIcon","column","formatTotalValue","DarkPoolTickerList","lastTrade","Clock","DarkPoolTradeChart","chartData","priceGroups","roundedPrice","dataPoint","isHighVolume","DarkPoolTimeChart","timeGroups","timeKey","DarkPoolDashboard","setDarkPoolData","quantities","prices","highestVolumeTrade","priceVolatility","clearAllApplicationCaches","keysToRemove","cacheNames","name","initializeSessionStorageCleanup","handleBeforeUnload","handleUnload","handleVisibilityChange","TickerWeeklyAnalysisComponent","sortedAnalyses","tickerAnalyses","TickerAnalysisCard","WeekRow","weekLabel","formatWeekDate","OverallAnalysisDashboard","sortField","setSortField","sortDirection","setSortDirection","loadingTimeout","setLoadingTimeout","timeout","err","handleRefresh","handleClearCache","sortedTickerAnalyses","aRecentWeek","bRecentWeek","sentimentOrder","numA","numB","handleSortChange","field","getSortLabel","AlertTriangle","ErrorBoundary","Component","props","errorInfo","App","basePath","registration","newWorker","registrationError","registrations","reg","ReactDOM","React"],"mappings":"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","x_google_ignoreList":[0,1,2]}