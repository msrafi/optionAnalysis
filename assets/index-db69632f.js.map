{"version":3,"file":"index-db69632f.js","sources":["../../node_modules/react/cjs/react-jsx-runtime.production.min.js","../../node_modules/react/jsx-runtime.js","../../node_modules/react-dom/client.js","../../src/utils/dataParser.ts","../../src/components/TickerList.tsx","../../src/components/VolumeProfileChart.tsx","../../src/components/TradeList.tsx","../../src/components/StrikeExpiryHeatmap.tsx","../../src/utils/fileLoader.ts","../../src/utils/stockPrice.ts","../../src/components/OptionsDashboard.tsx","../../src/components/ErrorBoundary.tsx","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","export interface OptionData {\n  ticker: string;\n  strike: number;\n  expiry: string;\n  optionType: 'Call' | 'Put';\n  volume: number;\n  premium: string;\n  openInterest: number;\n  bidAskSpread: number;\n  timestamp: string;\n  sweepType: string;\n  sourceFile?: string; // Track which file this data came from\n}\n\nexport interface MergedDataInfo {\n  totalFiles: number;\n  totalRecords: number;\n  dateRange: {\n    earliest: Date | null;\n    latest: Date | null;\n  };\n  files: {\n    filename: string;\n    recordCount: number;\n    timestamp: Date;\n  }[];\n}\n\nexport interface TickerSummary {\n  ticker: string;\n  totalVolume: number;\n  callVolume: number;\n  putVolume: number;\n  totalPremium: number;\n  uniqueExpiries: string[];\n  lastActivity: string;\n  lastActivityDate: Date | null;\n  lastTrade: {\n    strike: number;\n    optionType: 'Call' | 'Put';\n    volume: number;\n    premium: string;\n    sweepType: string;\n    timestamp: string;\n  } | null;\n}\n\nexport interface VolumeProfileData {\n  strike: number;\n  callVolume: number;\n  putVolume: number;\n  openInterest: number;\n  totalVolume: number;\n}\n\nexport interface HighestVolumeData {\n  strike: number;\n  totalVolume: number;\n  callVolume: number;\n  putVolume: number;\n  openInterest: number;\n}\n\n// Cache for parsed data to avoid re-parsing\nconst parseCache = new Map<string, OptionData[]>();\n\n// Clear cache function for development\nexport function clearDataCache() {\n  parseCache.clear();\n  tickerSummaryCache.clear();\n  if (import.meta.env.DEV) {\n    console.log('Data cache cleared - all caches reset');\n  }\n}\n\n/**\n * Parse timestamp from CSV data\n * Expected format: \"Wednesday, October 8, 2025 at 3:02 PM\"\n */\nexport function parseTimestampFromData(timestampStr: string): Date | null {\n  try {\n    if (!timestampStr) return null;\n    \n    // Handle format: \"Wednesday, October 8, 2025 at 3:02 PM\"\n    const match = timestampStr.match(/(\\w+),\\s+(\\w+)\\s+(\\d+),\\s+(\\d+)\\s+at\\s+(\\d+):(\\d+)\\s+(AM|PM)/i);\n    if (!match) {\n      if (import.meta.env.DEV) {\n        console.warn(`Timestamp format not recognized: ${timestampStr}`);\n      }\n      return null;\n    }\n    \n    const [, , monthName, day, year, hour, minute, ampm] = match;\n    \n    // Convert month name to number\n    const monthMap: { [key: string]: number } = {\n      'january': 0, 'february': 1, 'march': 2, 'april': 3,\n      'may': 4, 'june': 5, 'july': 6, 'august': 7,\n      'september': 8, 'october': 9, 'november': 10, 'december': 11\n    };\n    \n    const month = monthMap[monthName.toLowerCase()];\n    if (month === undefined) {\n      if (import.meta.env.DEV) {\n        console.warn(`Unknown month: ${monthName}`);\n      }\n      return null;\n    }\n    \n    // Convert 12-hour to 24-hour format\n    let hour24 = parseInt(hour);\n    if (ampm.toUpperCase() === 'PM' && hour24 !== 12) {\n      hour24 += 12;\n    } else if (ampm.toUpperCase() === 'AM' && hour24 === 12) {\n      hour24 = 0;\n    }\n    \n    const parsedDate = new Date(parseInt(year), month, parseInt(day), hour24, parseInt(minute));\n    return parsedDate;\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.warn(`Failed to parse timestamp: ${timestampStr}`, error);\n    }\n    return null;\n  }\n}\n\n/**\n * Check if an option has expired based on its expiry date\n * Expected format: \"MM/DD/YYYY\" (e.g., \"10/10/2025\")\n */\nfunction isOptionExpired(expiryStr: string): boolean {\n  try {\n    if (!expiryStr) return false;\n    \n    // Parse expiry date from MM/DD/YYYY format\n    const parts = expiryStr.split('/');\n    if (parts.length !== 3) return false;\n    \n    const month = parseInt(parts[0]) - 1; // JavaScript months are 0-indexed\n    const day = parseInt(parts[1]);\n    const year = parseInt(parts[2]);\n    \n    // Create expiry date at end of day (23:59:59) to ensure options expire after market close\n    const expiryDate = new Date(year, month, day, 23, 59, 59);\n    const today = new Date();\n    \n    // Option is expired if expiry date is before today\n    return expiryDate < today;\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.warn(`Failed to parse expiry date: ${expiryStr}`, error);\n    }\n    return false; // If we can't parse it, don't filter it out\n  }\n}\n\nexport function parseCSVData(csvText: string, sourceFile?: string): OptionData[] {\n  // Check cache first\n  const cacheKey = `${sourceFile || 'unknown'}_${csvText.length}_${csvText.slice(0, 100)}`;\n  const cached = parseCache.get(cacheKey);\n  if (cached) {\n    return cached;\n  }\n\n  const lines = csvText.split('\\n');\n  const data: OptionData[] = [];\n  \n  // Pre-allocate array with estimated size for better performance\n  const estimatedSize = Math.max(1000, lines.length * 0.8);\n  data.length = estimatedSize;\n  let dataIndex = 0;\n  \n  // Skip header row\n  for (let i = 1; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (!line) continue;\n    \n    // Parse CSV line (handle quoted fields)\n    const fields = parseCSVLine(line);\n    \n    if (fields.length < 20) continue;\n    \n    try {\n      // Extract relevant fields based on the CSV structure\n      // Col 1: Avatar URL, Col 2: Username, Col 3: APP, Col 4: Short time, Col 5: Separator\n      const timestamp = fields[5] || ''; // Column 6 (index 5) - Full Timestamp\n      const sweepType = fields[6] || ''; // Column 7 (index 6) - Sweep Type (e.g., \"Call Sweep\")\n      const ticker = fields[7] || '';     // Column 8 (index 7) - Ticker\n      const strike = parseFloat(fields[8]) || 0;  // Column 9 (index 8) - Strike\n      const expiry = fields[9] || '';     // Column 10 (index 9) - Expiry\n      const optionType = fields[10] as 'Call' | 'Put'; // Column 11 (index 10) - Option Type\n      const volume = parseInt(fields[12]?.replace(/,/g, '') || '0'); // Column 13 (index 12) - Volume\n      const premium = fields[13] || '$0';  // Column 14 (index 13) - Premium\n      const openInterest = parseInt(fields[14]?.replace(/,/g, '') || '0'); // Column 15 (index 14) - OI\n      const bidAskSpread = 0; // Not available in current format\n      \n      // Filter out non-ticker entries (trade types, sweep types, etc.)\n      const invalidTickers = ['Ask', 'Above', 'Bid', 'Below', 'Sweep', 'Block', 'Trade', 'Volume', 'Premium'];\n      const isValidTicker = ticker && \n        ticker.length >= 1 && \n        ticker.length <= 10 && \n        !invalidTickers.includes(ticker) &&\n        !ticker.match(/^\\d+$/) && // Not just numbers\n        !ticker.includes(' ') && // No spaces\n        /^[A-Z0-9]+$/.test(ticker); // Only uppercase letters and numbers\n      \n      // Check if the option has expired\n      const isExpired = isOptionExpired(expiry);\n      \n      // Only process valid option data with valid tickers and non-expired options\n      if (isValidTicker && strike > 0 && expiry && optionType && volume > 0 && !isExpired) {\n        data[dataIndex++] = {\n          ticker,\n          strike,\n          expiry,\n          optionType,\n          volume,\n          premium,\n          openInterest,\n          bidAskSpread,\n          timestamp,\n          sweepType,\n          sourceFile\n        };\n      }\n    } catch (error) {\n      if (import.meta.env.DEV) {\n        console.warn('Error parsing line:', line, error);\n      }\n    }\n  }\n  \n  // Trim array to actual size\n  data.length = dataIndex;\n  \n  // Cache the result\n  parseCache.set(cacheKey, data);\n  \n  return data;\n}\n\nfunction parseCSVLine(line: string): string[] {\n  const fields: string[] = [];\n  let current = '';\n  let inQuotes = false;\n  \n  for (let i = 0; i < line.length; i++) {\n    const char = line[i];\n    \n    if (char === '\"') {\n      inQuotes = !inQuotes;\n    } else if (char === ',' && !inQuotes) {\n      fields.push(current.trim());\n      current = '';\n    } else {\n      current += char;\n    }\n  }\n  \n  fields.push(current.trim());\n  return fields;\n}\n\n// Cache for ticker summaries\nconst tickerSummaryCache = new Map<string, TickerSummary[]>();\n\nexport function getTickerSummaries(data: OptionData[]): TickerSummary[] {\n  // Create cache key based on data length and first few items\n  const cacheKey = `${data.length}_${data.slice(0, 3).map(d => `${d.ticker}_${d.timestamp}`).join('_')}`;\n  const cached = tickerSummaryCache.get(cacheKey);\n  if (cached) {\n    return cached;\n  }\n\n  const tickerMap = new Map<string, TickerSummary & { expirySet: Set<string> }>();\n  \n  // Use for loop for better performance than forEach\n  for (let i = 0; i < data.length; i++) {\n    const option = data[i];\n    \n    if (!tickerMap.has(option.ticker)) {\n      const parsedTimestamp = parseTimestampFromData(option.timestamp);\n      tickerMap.set(option.ticker, {\n        ticker: option.ticker,\n        totalVolume: 0,\n        callVolume: 0,\n        putVolume: 0,\n        totalPremium: 0,\n        uniqueExpiries: [],\n        expirySet: new Set<string>(),\n        lastActivity: option.timestamp,\n        lastActivityDate: parsedTimestamp,\n        lastTrade: {\n          strike: option.strike,\n          optionType: option.optionType,\n          volume: option.volume,\n          premium: option.premium,\n          sweepType: option.sweepType,\n          timestamp: option.timestamp\n        }\n      });\n    }\n    \n    const summary = tickerMap.get(option.ticker)!;\n    summary.totalVolume += option.volume;\n    summary.totalPremium += parsePremium(option.premium);\n    \n    if (option.optionType === 'Call') {\n      summary.callVolume += option.volume;\n    } else {\n      summary.putVolume += option.volume;\n    }\n    \n    // Use Set for O(1) expiry checking instead of O(n) array.includes()\n    if (!summary.expirySet.has(option.expiry)) {\n      summary.expirySet.add(option.expiry);\n      summary.uniqueExpiries.push(option.expiry);\n    }\n    \n    // Update last activity if this is more recent\n    const currentTimestamp = parseTimestampFromData(option.timestamp);\n    if (currentTimestamp && summary.lastActivityDate && currentTimestamp > summary.lastActivityDate) {\n      summary.lastActivity = option.timestamp;\n      summary.lastActivityDate = currentTimestamp;\n      // Update last trade with most recent trade\n      summary.lastTrade = {\n        strike: option.strike,\n        optionType: option.optionType,\n        volume: option.volume,\n        premium: option.premium,\n        sweepType: option.sweepType,\n        timestamp: option.timestamp\n      };\n    } else if (currentTimestamp && !summary.lastActivityDate) {\n      summary.lastActivity = option.timestamp;\n      summary.lastActivityDate = currentTimestamp;\n      // Set last trade if none exists\n      if (!summary.lastTrade) {\n        summary.lastTrade = {\n          strike: option.strike,\n          optionType: option.optionType,\n          volume: option.volume,\n          premium: option.premium,\n          sweepType: option.sweepType,\n          timestamp: option.timestamp\n        };\n      }\n    }\n  }\n  \n  // Sort by most recent activity first, then by total volume\n  // Remove the expirySet before returning (it was just for performance)\n  const result = Array.from(tickerMap.values()).map(({ expirySet, ...summary }) => summary).sort((a, b) => {\n    // Use parsed dates for more accurate sorting\n    const dateA = a.lastActivityDate;\n    const dateB = b.lastActivityDate;\n    \n    // First sort by most recent activity\n    if (dateA && dateB && dateA.getTime() !== dateB.getTime()) {\n      return dateB.getTime() - dateA.getTime();\n    }\n    \n    // If same activity time or no dates, sort by total volume\n    return b.totalVolume - a.totalVolume;\n  });\n  \n  // Cache the result\n  tickerSummaryCache.set(cacheKey, result);\n  \n  return result;\n}\n\nexport function getVolumeProfileForTicker(\n  data: OptionData[], \n  ticker: string, \n  expiry?: string\n): VolumeProfileData[] {\n  const filteredData = data.filter(option => \n    option.ticker === ticker && \n    (!expiry || option.expiry === expiry)\n  );\n  \n  const strikeMap = new Map<number, VolumeProfileData>();\n  \n  filteredData.forEach(option => {\n    if (!strikeMap.has(option.strike)) {\n      strikeMap.set(option.strike, {\n        strike: option.strike,\n        callVolume: 0,\n        putVolume: 0,\n        openInterest: 0,\n        totalVolume: 0\n      });\n    }\n    \n    const profile = strikeMap.get(option.strike)!;\n    profile.totalVolume += option.volume;\n    profile.openInterest += option.openInterest;\n    \n    if (option.optionType === 'Call') {\n      profile.callVolume += option.volume;\n    } else {\n      profile.putVolume += option.volume;\n    }\n  });\n  \n  return Array.from(strikeMap.values())\n    .sort((a, b) => a.strike - b.strike);\n}\n\nexport function getExpiryDatesForTicker(data: OptionData[], ticker: string): string[] {\n  const expiries = new Set<string>();\n  \n  data.forEach(option => {\n    if (option.ticker === ticker) {\n      expiries.add(option.expiry);\n    }\n  });\n  \n  return Array.from(expiries).sort((a, b) => new Date(a).getTime() - new Date(b).getTime());\n}\n\nexport function getHighestVolumeData(\n  data: OptionData[], \n  ticker: string, \n  expiry?: string\n): HighestVolumeData | null {\n  const filteredData = data.filter(option => \n    option.ticker === ticker && \n    (!expiry || option.expiry === expiry)\n  );\n  \n  if (!filteredData.length) return null;\n  \n  const strikeMap = new Map<number, VolumeProfileData>();\n  \n  filteredData.forEach(option => {\n    if (!strikeMap.has(option.strike)) {\n      strikeMap.set(option.strike, {\n        strike: option.strike,\n        callVolume: 0,\n        putVolume: 0,\n        openInterest: 0,\n        totalVolume: 0\n      });\n    }\n    \n    const profile = strikeMap.get(option.strike)!;\n    profile.totalVolume += option.volume;\n    profile.openInterest += option.openInterest;\n    \n    if (option.optionType === 'Call') {\n      profile.callVolume += option.volume;\n    } else {\n      profile.putVolume += option.volume;\n    }\n  });\n  \n  const profiles = Array.from(strikeMap.values());\n  const highestVolume = profiles.reduce((max, current) => \n    current.totalVolume > max.totalVolume ? current : max\n  );\n  \n  return {\n    strike: highestVolume.strike,\n    totalVolume: highestVolume.totalVolume,\n    callVolume: highestVolume.callVolume,\n    putVolume: highestVolume.putVolume,\n    openInterest: highestVolume.openInterest\n  };\n}\n\nfunction parsePremium(premium: string): number {\n  const cleanPremium = premium.replace(/[$,K]/g, '');\n  const num = parseFloat(cleanPremium);\n  \n  if (premium.includes('K')) {\n    return num * 1000;\n  } else if (premium.includes('M')) {\n    return num * 1000000;\n  }\n  \n  return num;\n}\n\nexport function formatVolume(volume: number): string {\n  if (volume >= 1000000) {\n    return `${(volume / 1000000).toFixed(1)}M`;\n  } else if (volume >= 1000) {\n    return `${(volume / 1000).toFixed(1)}K`;\n  }\n  return volume.toString();\n}\n\nexport function formatPremium(premium: number): string {\n  if (premium >= 1000000) {\n    return `$${(premium / 1000000).toFixed(1)}M`;\n  } else if (premium >= 1000) {\n    return `$${(premium / 1000).toFixed(1)}K`;\n  }\n  return `$${premium.toFixed(0)}`;\n}\n\n/**\n * Merge data from multiple CSV files\n */\nexport function mergeDataFromFiles(fileData: Array<{filename: string, data: string, timestamp: Date}>): {\n  mergedData: OptionData[];\n  info: MergedDataInfo;\n} {\n  const mergedData: OptionData[] = [];\n  const fileInfo: MergedDataInfo['files'] = [];\n  let earliestDate: Date | null = null;\n  let latestDate: Date | null = null;\n  \n  // Track unique trades to avoid duplicates\n  const uniqueTrades = new Map<string, OptionData>();\n  \n  // Sort files by timestamp (most recent first)\n  const sortedFiles = fileData.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n  \n  sortedFiles.forEach(file => {\n    const parsedData = parseCSVData(file.data, file.filename);\n    \n    // Deduplicate trades based on key fields\n    parsedData.forEach(trade => {\n      // Create unique key from trade characteristics\n      const key = `${trade.ticker}_${trade.strike}_${trade.expiry}_${trade.optionType}_${trade.volume}_${trade.premium}_${trade.timestamp}`;\n      \n      // Only add if we haven't seen this exact trade before\n      if (!uniqueTrades.has(key)) {\n        uniqueTrades.set(key, trade);\n      }\n    });\n    \n    fileInfo.push({\n      filename: file.filename,\n      recordCount: parsedData.length,\n      timestamp: file.timestamp\n    });\n    \n    // Update date range\n    if (!earliestDate || file.timestamp < earliestDate) {\n      earliestDate = file.timestamp;\n    }\n    if (!latestDate || file.timestamp > latestDate) {\n      latestDate = file.timestamp;\n    }\n  });\n  \n  // Convert Map values to array\n  mergedData.push(...uniqueTrades.values());\n  \n  const info: MergedDataInfo = {\n    totalFiles: fileData.length,\n    totalRecords: mergedData.length,\n    dateRange: {\n      earliest: earliestDate,\n      latest: latestDate\n    },\n    files: fileInfo\n  };\n  \n  return { mergedData, info };\n}\n\n/**\n * Get data summary for the merged dataset\n */\nexport function getDataSummary(data: OptionData[]): {\n  totalTickers: number;\n  totalVolume: number;\n  totalCalls: number;\n  totalPuts: number;\n  uniqueExpiries: number;\n  dateRange: {\n    earliest: Date | null;\n    latest: Date | null;\n  };\n  sourceFiles: string[];\n} {\n  const tickers = new Set<string>();\n  const expiries = new Set<string>();\n  const sourceFiles = new Set<string>();\n  let totalVolume = 0;\n  let totalCalls = 0;\n  let totalPuts = 0;\n  let earliestDate: Date | null = null;\n  let latestDate: Date | null = null;\n  \n  data.forEach(option => {\n    tickers.add(option.ticker);\n    expiries.add(option.expiry);\n    if (option.sourceFile) sourceFiles.add(option.sourceFile);\n    \n    totalVolume += option.volume;\n    if (option.optionType === 'Call') {\n      totalCalls += option.volume;\n    } else {\n      totalPuts += option.volume;\n    }\n    \n    // Use parsed timestamp for more accurate date range\n    const parsedTimestamp = parseTimestampFromData(option.timestamp);\n    if (parsedTimestamp) {\n      if (!earliestDate || parsedTimestamp < earliestDate) {\n        earliestDate = parsedTimestamp;\n      }\n      if (!latestDate || parsedTimestamp > latestDate) {\n        latestDate = parsedTimestamp;\n      }\n    }\n  });\n  \n  return {\n    totalTickers: tickers.size,\n    totalVolume,\n    totalCalls,\n    totalPuts,\n    uniqueExpiries: expiries.size,\n    dateRange: {\n      earliest: earliestDate,\n      latest: latestDate\n    },\n    sourceFiles: Array.from(sourceFiles)\n  };\n}\n\n/**\n * Filter data by time range\n */\nexport function filterDataByTimeRange(\n  data: OptionData[], \n  startDate: Date, \n  endDate: Date\n): OptionData[] {\n  return data.filter(option => {\n    const timestamp = new Date(option.timestamp);\n    return timestamp >= startDate && timestamp <= endDate;\n  });\n}\n\n/**\n * Get data from the last N hours\n */\nexport function getRecentData(data: OptionData[], hours: number = 24): OptionData[] {\n  const cutoff = new Date(Date.now() - hours * 60 * 60 * 1000);\n  return filterDataByTimeRange(data, cutoff, new Date());\n}\n\n// ============================================================================\n// ANALYTICAL FEATURES\n// ============================================================================\n\nexport interface UnusualActivityAlert {\n  ticker: string;\n  alertType: 'volume' | 'premium' | 'sweep' | 'multiple';\n  severity: 'low' | 'medium' | 'high';\n  reason: string;\n  metrics: {\n    totalVolume: number;\n    totalPremium: number;\n    callPutRatio: number;\n    sweepCount: number;\n    avgTradeSize: number;\n  };\n}\n\nexport interface KeyPriceLevel {\n  strike: number;\n  volume: number;\n  openInterest: number;\n  premium: number;\n  significance: 'high' | 'medium' | 'low';\n  type: 'call' | 'put' | 'both';\n}\n\nexport interface GammaExposure {\n  strike: number;\n  netGammaExposure: number; // Positive = dealers long gamma, Negative = dealers short gamma\n  callVolume: number;\n  putVolume: number;\n  callOI: number;\n  putOI: number;\n  level: 'extreme' | 'high' | 'moderate' | 'low';\n}\n\nexport interface TickerAnalytics {\n  ticker: string;\n  unusualActivity?: UnusualActivityAlert | null;\n  keyPriceLevels: KeyPriceLevel[];\n  gammaExposure: GammaExposure[];\n  maxPainStrike: number | null;\n  currentPrice?: number;\n}\n\n/**\n * Detect unusual activity for a ticker\n */\nexport function detectUnusualActivity(\n  tickerData: OptionData[],\n  ticker: string,\n  allData: OptionData[]\n): UnusualActivityAlert | null {\n  if (tickerData.length === 0) return null;\n\n  // Calculate metrics for this ticker\n  const totalVolume = tickerData.reduce((sum, t) => sum + t.volume, 0);\n  const totalPremium = tickerData.reduce((sum, t) => {\n    const premium = parseFloat(t.premium.replace(/[$,]/g, '')) || 0;\n    return sum + premium;\n  }, 0);\n  \n  const callVolume = tickerData.filter(t => t.optionType === 'Call').reduce((sum, t) => sum + t.volume, 0);\n  const putVolume = tickerData.filter(t => t.optionType === 'Put').reduce((sum, t) => sum + t.volume, 0);\n  const callPutRatio = putVolume > 0 ? callVolume / putVolume : callVolume;\n  \n  const sweepCount = tickerData.filter(t => t.sweepType && t.sweepType.toLowerCase().includes('sweep')).length;\n  const avgTradeSize = totalVolume / tickerData.length;\n\n  // Calculate baseline (average across all tickers for comparison)\n  const allTickers = [...new Set(allData.map(t => t.ticker))];\n  const avgVolumePerTicker = allData.reduce((sum, t) => sum + t.volume, 0) / allTickers.length;\n  const avgPremiumPerTicker = allData.reduce((sum, t) => {\n    const premium = parseFloat(t.premium.replace(/[$,]/g, '')) || 0;\n    return sum + premium;\n  }, 0) / allTickers.length;\n\n  // Detection criteria\n  const alerts: string[] = [];\n  let severity: 'low' | 'medium' | 'high' = 'low';\n  let alertType: 'volume' | 'premium' | 'sweep' | 'multiple' = 'volume';\n  \n  // High volume alert (3x average)\n  if (totalVolume > avgVolumePerTicker * 3) {\n    alerts.push(`Volume ${((totalVolume / avgVolumePerTicker) * 100).toFixed(0)}% above average`);\n    severity = 'high';\n    alertType = 'volume';\n  } else if (totalVolume > avgVolumePerTicker * 2) {\n    alerts.push(`Volume ${((totalVolume / avgVolumePerTicker) * 100).toFixed(0)}% above average`);\n    severity = 'medium';\n  }\n\n  // High premium alert (3x average)\n  if (totalPremium > avgPremiumPerTicker * 3) {\n    alerts.push(`Premium ${((totalPremium / avgPremiumPerTicker) * 100).toFixed(0)}% above average`);\n    severity = 'high';\n    if (alertType !== 'volume') alertType = 'premium';\n    else alertType = 'multiple';\n  } else if (totalPremium > avgPremiumPerTicker * 2) {\n    alerts.push(`Premium ${((totalPremium / avgPremiumPerTicker) * 100).toFixed(0)}% above average`);\n    if (severity !== 'high') severity = 'medium';\n  }\n\n  // Unusual sweep activity\n  if (sweepCount > 5) {\n    alerts.push(`${sweepCount} sweeps detected`);\n    severity = 'high';\n    alertType = alertType === 'volume' || alertType === 'premium' ? 'multiple' : 'sweep';\n  } else if (sweepCount > 2) {\n    alerts.push(`${sweepCount} sweeps detected`);\n    if (severity === 'low') severity = 'medium';\n  }\n\n  // Extreme call/put ratio\n  if (callPutRatio > 5) {\n    alerts.push(`Heavy call bias (${callPutRatio.toFixed(1)}:1)`);\n    if (severity === 'low') severity = 'medium';\n  } else if (callPutRatio < 0.2) {\n    alerts.push(`Heavy put bias (1:${(1/callPutRatio).toFixed(1)})`);\n    if (severity === 'low') severity = 'medium';\n  }\n\n  // Large average trade size\n  if (avgTradeSize > 5000) {\n    alerts.push(`Large avg trade size: ${formatVolume(Math.round(avgTradeSize))}`);\n    if (severity === 'low') severity = 'medium';\n  }\n\n  // Return alert if any criteria met\n  if (alerts.length > 0) {\n    return {\n      ticker,\n      alertType,\n      severity,\n      reason: alerts.join(' • '),\n      metrics: {\n        totalVolume,\n        totalPremium,\n        callPutRatio,\n        sweepCount,\n        avgTradeSize\n      }\n    };\n  }\n\n  return null;\n}\n\n/**\n * Identify key price levels based on volume and open interest\n */\nexport function identifyKeyPriceLevels(\n  tickerData: OptionData[],\n  topN: number = 5\n): KeyPriceLevel[] {\n  if (tickerData.length === 0) return [];\n\n  // Aggregate by strike price\n  const strikeMap = new Map<number, {\n    volume: number;\n    openInterest: number;\n    premium: number;\n    callVolume: number;\n    putVolume: number;\n  }>();\n\n  tickerData.forEach(trade => {\n    const existing = strikeMap.get(trade.strike) || {\n      volume: 0,\n      openInterest: 0,\n      premium: 0,\n      callVolume: 0,\n      putVolume: 0\n    };\n\n    const premium = parseFloat(trade.premium.replace(/[$,]/g, '')) || 0;\n\n    existing.volume += trade.volume;\n    existing.openInterest += trade.openInterest;\n    existing.premium += premium;\n    \n    if (trade.optionType === 'Call') {\n      existing.callVolume += trade.volume;\n    } else {\n      existing.putVolume += trade.volume;\n    }\n\n    strikeMap.set(trade.strike, existing);\n  });\n\n  // Convert to array and sort by combined score\n  const levels = Array.from(strikeMap.entries()).map(([strike, data]) => {\n    // Combined significance score (weighted: 40% volume, 40% OI, 20% premium)\n    const maxVolume = Math.max(...Array.from(strikeMap.values()).map(v => v.volume));\n    const maxOI = Math.max(...Array.from(strikeMap.values()).map(v => v.openInterest));\n    const maxPremium = Math.max(...Array.from(strikeMap.values()).map(v => v.premium));\n    \n    const volumeScore = maxVolume > 0 ? data.volume / maxVolume : 0;\n    const oiScore = maxOI > 0 ? data.openInterest / maxOI : 0;\n    const premiumScore = maxPremium > 0 ? data.premium / maxPremium : 0;\n    \n    const combinedScore = volumeScore * 0.4 + oiScore * 0.4 + premiumScore * 0.2;\n    \n    let significance: 'high' | 'medium' | 'low' = 'low';\n    if (combinedScore > 0.7) significance = 'high';\n    else if (combinedScore > 0.4) significance = 'medium';\n\n    let type: 'call' | 'put' | 'both' = 'both';\n    if (data.callVolume > data.putVolume * 2) type = 'call';\n    else if (data.putVolume > data.callVolume * 2) type = 'put';\n\n    return {\n      strike,\n      volume: data.volume,\n      openInterest: data.openInterest,\n      premium: data.premium,\n      significance,\n      type,\n      combinedScore\n    };\n  });\n\n  // Sort by combined score and return top N\n  return levels\n    .sort((a, b) => b.combinedScore - a.combinedScore)\n    .slice(0, topN)\n    .map(({ combinedScore, ...rest }) => rest);\n}\n\n/**\n * Estimate gamma exposure at each strike\n * Note: This is a simplified estimation without actual Greeks data\n */\nexport function estimateGammaExposure(\n  tickerData: OptionData[],\n  currentPrice?: number\n): GammaExposure[] {\n  if (tickerData.length === 0) return [];\n\n  // Aggregate by strike\n  const strikeMap = new Map<number, {\n    callVolume: number;\n    putVolume: number;\n    callOI: number;\n    putOI: number;\n  }>();\n\n  tickerData.forEach(trade => {\n    const existing = strikeMap.get(trade.strike) || {\n      callVolume: 0,\n      putVolume: 0,\n      callOI: 0,\n      putOI: 0\n    };\n\n    if (trade.optionType === 'Call') {\n      existing.callVolume += trade.volume;\n      existing.callOI += trade.openInterest;\n    } else {\n      existing.putVolume += trade.volume;\n      existing.putOI += trade.openInterest;\n    }\n\n    strikeMap.set(trade.strike, existing);\n  });\n\n  // Calculate gamma exposure estimates\n  const exposures = Array.from(strikeMap.entries()).map(([strike, data]) => {\n    // Simplified gamma estimation:\n    // Dealers are typically short options (providing liquidity)\n    // Call OI = dealers short calls = negative gamma for dealers (must buy as price rises)\n    // Put OI = dealers short puts = positive gamma for dealers (must sell as price falls)\n    \n    // Weight ATM options higher (simplified: within 10% of current price gets full weight)\n    let atmWeight = 1;\n    if (currentPrice) {\n      const percentFromCurrent = Math.abs(strike - currentPrice) / currentPrice;\n      if (percentFromCurrent < 0.05) atmWeight = 2; // Very close to ATM\n      else if (percentFromCurrent < 0.10) atmWeight = 1.5; // Near ATM\n      else if (percentFromCurrent > 0.20) atmWeight = 0.5; // Far OTM/ITM\n    }\n\n    // Net gamma exposure (negative = dealers need to buy on way up, sell on way down)\n    // Using OI as it represents open positions that need hedging\n    const netGammaExposure = (data.putOI - data.callOI) * atmWeight;\n    \n    const absExposure = Math.abs(netGammaExposure);\n    const maxExposure = Math.max(...Array.from(strikeMap.values()).map(v => \n      Math.abs((v.putOI - v.callOI))\n    ));\n    \n    let level: 'extreme' | 'high' | 'moderate' | 'low' = 'low';\n    if (maxExposure > 0) {\n      const exposureRatio = absExposure / maxExposure;\n      if (exposureRatio > 0.7) level = 'extreme';\n      else if (exposureRatio > 0.4) level = 'high';\n      else if (exposureRatio > 0.2) level = 'moderate';\n    }\n\n    return {\n      strike,\n      netGammaExposure,\n      callVolume: data.callVolume,\n      putVolume: data.putVolume,\n      callOI: data.callOI,\n      putOI: data.putOI,\n      level\n    };\n  });\n\n  // Sort by strike price\n  return exposures.sort((a, b) => a.strike - b.strike);\n}\n\n/**\n * Calculate max pain (strike where option holders lose most money)\n */\nexport function calculateMaxPain(tickerData: OptionData[]): number | null {\n  if (tickerData.length === 0) return null;\n\n  // Get unique strikes\n  const strikes = [...new Set(tickerData.map(t => t.strike))].sort((a, b) => a - b);\n  \n  // For each strike, calculate total loss for option holders\n  const painMap = new Map<number, number>();\n\n  strikes.forEach(testStrike => {\n    let totalPain = 0;\n\n    tickerData.forEach(trade => {\n      const { strike, optionType, openInterest } = trade;\n      \n      if (optionType === 'Call') {\n        // Calls lose value if price is below strike\n        if (testStrike < strike) {\n          totalPain += openInterest * (strike - testStrike);\n        }\n      } else {\n        // Puts lose value if price is above strike\n        if (testStrike > strike) {\n          totalPain += openInterest * (testStrike - strike);\n        }\n      }\n    });\n\n    painMap.set(testStrike, totalPain);\n  });\n\n  // Find strike with maximum pain\n  let maxPainStrike = strikes[0];\n  let maxPain = painMap.get(strikes[0]) || 0;\n\n  painMap.forEach((pain, strike) => {\n    if (pain > maxPain) {\n      maxPain = pain;\n      maxPainStrike = strike;\n    }\n  });\n\n  return maxPainStrike;\n}\n\n/**\n * Get complete analytics for a ticker\n */\nexport function getTickerAnalytics(\n  ticker: string,\n  allData: OptionData[],\n  currentPrice?: number\n): TickerAnalytics {\n  const tickerData = allData.filter(t => t.ticker === ticker);\n  \n  return {\n    ticker,\n    unusualActivity: detectUnusualActivity(tickerData, ticker, allData),\n    keyPriceLevels: identifyKeyPriceLevels(tickerData, 5),\n    gammaExposure: estimateGammaExposure(tickerData, currentPrice),\n    maxPainStrike: calculateMaxPain(tickerData),\n    currentPrice\n  };\n}\n","import React, { memo, useMemo, useState } from 'react';\nimport { TrendingUp, TrendingDown, Calendar, Clock, ArrowUpDown, Target, Zap } from 'lucide-react';\nimport { TickerSummary, formatVolume, formatPremium, OptionData, getTickerAnalytics } from '../utils/dataParser';\n\ninterface TickerListProps {\n  tickers: TickerSummary[];\n  onTickerSelect: (ticker: string) => void;\n  allData: OptionData[];\n}\n\ntype SortOption = 'recent' | 'oldest' | 'volume-high' | 'volume-low' | 'calls-high' | 'puts-high' | 'premium-high' | 'premium-low';\n\nconst formatDateTime = (timestamp: string, parsedDate?: Date | null): string => {\n  try {\n    let time: Date;\n    \n    // Use parsed date if available, otherwise try to parse the timestamp string\n    if (parsedDate) {\n      time = parsedDate;\n    } else {\n      time = new Date(timestamp);\n    }\n    \n    // Check if the date is valid\n    if (isNaN(time.getTime())) {\n      return 'Unknown';\n    }\n    \n    // Format as \"Oct 8, 2025 3:02 PM\"\n    return time.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric'\n    }) + ' ' + time.toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true\n    });\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.warn('Error parsing timestamp:', timestamp, error);\n    }\n    return 'Unknown';\n  }\n};\n\nconst TickerList: React.FC<TickerListProps> = memo(({ tickers, onTickerSelect, allData }) => {\n  const [sortBy, setSortBy] = useState<SortOption>('recent');\n\n  const sortedTickers = useMemo(() => {\n    const sorted = [...tickers];\n    \n    switch (sortBy) {\n      case 'recent':\n        return sorted.sort((a, b) => {\n          if (a.lastActivityDate && b.lastActivityDate) {\n            return b.lastActivityDate.getTime() - a.lastActivityDate.getTime();\n          }\n          return 0;\n        });\n      \n      case 'oldest':\n        return sorted.sort((a, b) => {\n          if (a.lastActivityDate && b.lastActivityDate) {\n            return a.lastActivityDate.getTime() - b.lastActivityDate.getTime();\n          }\n          return 0;\n        });\n      \n      case 'volume-high':\n        return sorted.sort((a, b) => b.totalVolume - a.totalVolume);\n      \n      case 'volume-low':\n        return sorted.sort((a, b) => a.totalVolume - b.totalVolume);\n      \n      case 'calls-high':\n        return sorted.sort((a, b) => b.callVolume - a.callVolume);\n      \n      case 'puts-high':\n        return sorted.sort((a, b) => b.putVolume - a.putVolume);\n      \n      case 'premium-high':\n        return sorted.sort((a, b) => b.totalPremium - a.totalPremium);\n      \n      case 'premium-low':\n        return sorted.sort((a, b) => a.totalPremium - b.totalPremium);\n      \n      default:\n        return sorted;\n    }\n  }, [tickers, sortBy]);\n\n  return (\n    <div className=\"ticker-list\">\n      <div className=\"ticker-list-header\">\n        <div className=\"header-content\">\n          <h2>Options Volume Dashboard</h2>\n          <p>Click on any ticker to view detailed volume profile</p>\n        </div>\n        <div className=\"sort-controls\">\n          <ArrowUpDown className=\"sort-icon\" />\n          <select \n            className=\"sort-selector\"\n            value={sortBy}\n            onChange={(e) => setSortBy(e.target.value as SortOption)}\n          >\n            <option value=\"recent\">Most Recent</option>\n            <option value=\"oldest\">Oldest First</option>\n            <option value=\"volume-high\">Volume (High to Low)</option>\n            <option value=\"volume-low\">Volume (Low to High)</option>\n            <option value=\"calls-high\">Calls (High to Low)</option>\n            <option value=\"puts-high\">Puts (High to Low)</option>\n            <option value=\"premium-high\">Premium (High to Low)</option>\n            <option value=\"premium-low\">Premium (Low to High)</option>\n          </select>\n        </div>\n      </div>\n      \n      <div className=\"ticker-grid\">\n        {sortedTickers.map((ticker) => {\n          const callDominant = ticker.callVolume > ticker.putVolume;\n          const putDominant = ticker.putVolume > ticker.callVolume;\n          const dominanceClass = callDominant ? 'call-dominant' : putDominant ? 'put-dominant' : 'balanced';\n          \n          // Calculate analytics for this ticker\n          const analytics = getTickerAnalytics(ticker.ticker, allData);\n          \n          return (\n            <div \n              key={ticker.ticker} \n              className={`ticker-card ${dominanceClass}`}\n              onClick={() => onTickerSelect(ticker.ticker)}\n            >\n            <div className=\"ticker-header\">\n              <h3 className=\"ticker-symbol\">\n                {ticker.ticker}\n              </h3>\n              <div className=\"ticker-metrics\">\n                <div className=\"metric\">\n                  <TrendingUp className=\"metric-icon call\" />\n                  <span className=\"metric-label\">Calls</span>\n                  <span className=\"metric-value\">{formatVolume(ticker.callVolume)}</span>\n                </div>\n                <div className=\"metric\">\n                  <TrendingDown className=\"metric-icon put\" />\n                  <span className=\"metric-label\">Puts</span>\n                  <span className=\"metric-value\">{formatVolume(ticker.putVolume)}</span>\n                </div>\n              </div>\n            </div>\n            \n                <div className=\"ticker-details\">\n                  <div className=\"detail-row\">\n                    <span className=\"detail-label\">Total Volume:</span>\n                    <span className=\"detail-value\">{formatVolume(ticker.totalVolume)}</span>\n                  </div>\n                  <div className=\"detail-row\">\n                    <span className=\"detail-label\">Total Premium:</span>\n                    <span className=\"detail-value\">{formatPremium(ticker.totalPremium)}</span>\n                  </div>\n                  <div className=\"detail-row\">\n                    <Calendar className=\"detail-icon\" />\n                    <span className=\"detail-label\">Expiries:</span>\n                    <span className=\"detail-value\">{ticker.uniqueExpiries.length}</span>\n                  </div>\n                  {ticker.lastTrade && (\n                    <div className=\"detail-row last-trade-row\">\n                      <span className=\"detail-label\">Last Trade:</span>\n                      <span className=\"detail-value last-trade\">\n                        {ticker.lastTrade.optionType} ${ticker.lastTrade.strike} \n                        <span className={`trade-side ${ticker.lastTrade.optionType.toLowerCase()}`}>\n                          {ticker.lastTrade.optionType === 'Call' ? '↗' : '↘'}\n                        </span>\n                        {formatVolume(ticker.lastTrade.volume)}\n                      </span>\n                    </div>\n                  )}\n                </div>\n                \n                {/* Analytics Section */}\n                {(analytics.keyPriceLevels.length > 0 || analytics.maxPainStrike) && (\n                  <div className=\"ticker-analytics\">\n                    {analytics.keyPriceLevels.length > 0 && (\n                      <div className=\"analytics-badge key-levels-badge\">\n                        <Target size={12} />\n                        <span className=\"badge-label\">Key Levels:</span>\n                        <span className=\"badge-strikes\">\n                          {analytics.keyPriceLevels.slice(0, 3).map((level, idx) => (\n                            <span \n                              key={level.strike} \n                              className={`level-strike level-${level.significance}`}\n                              title={`${level.type === 'call' ? 'Call' : level.type === 'put' ? 'Put' : 'Call/Put'} - Vol: ${formatVolume(level.volume)}, OI: ${formatVolume(level.openInterest)}`}\n                            >\n                              {idx > 0 && ', '}${level.strike}\n                            </span>\n                          ))}\n                        </span>\n                      </div>\n                    )}\n                    \n                    {analytics.maxPainStrike && (\n                      <div className=\"analytics-badge max-pain-badge\">\n                        <Zap size={12} />\n                        <span className=\"badge-label\">Max Pain:</span>\n                        <span className=\"badge-value\">${analytics.maxPainStrike}</span>\n                      </div>\n                    )}\n                  </div>\n                )}\n                \n                <div className=\"ticker-footer\">\n                  <div className=\"last-activity\">\n                    <Clock className=\"activity-icon\" />\n                    <span>{formatDateTime(ticker.lastActivity, ticker.lastActivityDate)}</span>\n                  </div>\n                </div>\n          </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n});\n\nTickerList.displayName = 'TickerList';\n\nexport default TickerList;\n","import React, { memo, useMemo, useCallback, useState } from 'react';\nimport { VolumeProfileData, HighestVolumeData, formatVolume, OptionData } from '../utils/dataParser';\n\nexport interface VolumeProfileChartProps {\n  data: VolumeProfileData[];\n  highestVolumeData: HighestVolumeData | null;\n  ticker: string;\n  expiry?: string;\n  chartType: 'callput' | 'total';\n  currentPrice?: number; // Optional current stock price\n  trades?: OptionData[]; // Raw trade data for tooltips\n}\n\nconst VolumeProfileChart = memo<VolumeProfileChartProps>(({ \n  data, \n  highestVolumeData,\n  ticker, \n  expiry,\n  chartType,\n  currentPrice,\n  trades = []\n}) => {\n  // Tooltip state\n  const [tooltip, setTooltip] = useState<{\n    visible: boolean;\n    x: number;\n    y: number;\n    content: {\n      strike: number;\n      type?: 'Call' | 'Put';\n      volume: number;\n      trades: number;\n      premium: string;\n      premiumFull: string;\n      sweepTypes: string[];\n      tradeVolumes: number[];\n      expiries: string[];\n      size: number;\n      tradeDetails: Array<{\n        volume: number;\n        premium: string;\n        timestamp: string;\n        expiry: string;\n      }>;\n    } | null;\n  }>({\n    visible: false,\n    x: 0,\n    y: 0,\n    content: null\n  });\n\n  const getBarWidth = useCallback((volume: number, maxVolume: number) => {\n    if (maxVolume === 0) return 0;\n    // Scale to 46% of available space (48% total - 2% spacing on each side)\n    // This ensures bars don't exceed the available space with the new spacing\n    return Math.min((volume / maxVolume) * 46, 46);\n  }, []);\n\n  // Build tooltip data for a strike price and option type\n  const getTooltipData = useCallback((strike: number, optionType?: 'Call' | 'Put') => {\n    const strikeTrades = trades.filter(t => \n      t.strike === strike && (!optionType || t.optionType === optionType)\n    );\n    \n    const totalVolume = strikeTrades.reduce((sum, t) => sum + t.volume, 0);\n    const totalPremium = strikeTrades.reduce((sum, t) => {\n      const premium = t.premium.replace(/[$,]/g, '');\n      return sum + (parseFloat(premium) || 0);\n    }, 0);\n    \n    const premiumFormatted = totalPremium >= 1000000 \n      ? (totalPremium / 1000000).toFixed(2) + 'M' \n      : totalPremium >= 1000 \n      ? (totalPremium / 1000).toFixed(1) + 'K' \n      : totalPremium.toFixed(0);\n    \n    // Full premium value with commas\n    const premiumFull = totalPremium.toLocaleString('en-US', {\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    });\n    \n    const sweepTypes = [...new Set(strikeTrades.map(t => t.sweepType))].filter(Boolean);\n    \n    // Get individual trade volumes, sorted by volume descending\n    const tradeVolumes = strikeTrades\n      .map(t => t.volume)\n      .sort((a, b) => b - a); // Show all trades\n    \n    // Get unique expiry dates\n    const expiries = [...new Set(strikeTrades.map(t => t.expiry))].sort();\n    \n    // Size is the same as totalVolume (total contracts)\n    const size = totalVolume;\n    \n    // Get detailed trade information, sorted by volume descending\n    const tradeDetails = strikeTrades\n      .sort((a, b) => b.volume - a.volume)\n      .map(t => ({\n        volume: t.volume,\n        premium: t.premium,\n        timestamp: t.timestamp,\n        expiry: t.expiry\n      }));\n    \n    return {\n      strike,\n      type: optionType,\n      volume: totalVolume,\n      trades: strikeTrades.length,\n      premium: premiumFormatted,\n      premiumFull,\n      sweepTypes,\n      tradeVolumes,\n      expiries,\n      size,\n      tradeDetails\n    };\n  }, [trades]);\n\n  // Handle mouse enter on volume bar\n  const handleBarMouseEnter = useCallback((e: React.MouseEvent, strike: number, optionType?: 'Call' | 'Put') => {\n    const rect = e.currentTarget.getBoundingClientRect();\n    const tooltipData = getTooltipData(strike, optionType);\n    \n    setTooltip({\n      visible: true,\n      x: e.clientX,\n      y: rect.top - 10,\n      content: tooltipData\n    });\n  }, [getTooltipData]);\n\n  // Handle mouse leave\n  const handleBarMouseLeave = useCallback(() => {\n    setTooltip(prev => ({ ...prev, visible: false }));\n  }, []);\n\n  // Handle mouse move to update position\n  const handleBarMouseMove = useCallback((e: React.MouseEvent) => {\n    setTooltip(prev => ({\n      ...prev,\n      x: e.clientX,\n    }));\n  }, []);\n\n  // Determine current price - use provided currentPrice or fall back to highest volume strike\n  const getCurrentPrice = useCallback(() => {\n    return currentPrice || (highestVolumeData?.strike || null);\n  }, [currentPrice, highestVolumeData]);\n\n  // Check if a strike price is the current price\n  const isCurrentPrice = useCallback((strike: number) => {\n    const current = getCurrentPrice();\n    return current !== null && Math.abs(strike - current) < 0.01; // Allow for small floating point differences\n  }, [getCurrentPrice]);\n\n  // Show all strike prices (no filtering)\n  const getFilteredData = useCallback(() => {\n    return data\n      .sort((a, b) => a.strike - b.strike); // Sort in ascending order (lowest to highest)\n  }, [data]);\n\n  // Get chart data for filtered range\n  const filteredData = getFilteredData();\n  const filteredChartData = useMemo(() => {\n    if (!filteredData.length) return { maxVolume: 0, minStrike: 0, maxStrike: 0, maxTotalVolume: 0, totalVolumeSum: 0 };\n    \n    let maxVolume = 0;\n    let maxTotalVolume = 0;\n    let minStrike = Infinity;\n    let maxStrike = -Infinity;\n    let totalVolumeSum = 0;\n    \n    for (let i = 0; i < filteredData.length; i++) {\n      const d = filteredData[i];\n      maxVolume = Math.max(maxVolume, Math.max(d.callVolume, d.putVolume));\n      maxTotalVolume = Math.max(maxTotalVolume, d.totalVolume);\n      minStrike = Math.min(minStrike, d.strike);\n      maxStrike = Math.max(maxStrike, d.strike);\n      totalVolumeSum += d.totalVolume;\n    }\n    \n    return { \n      maxVolume, \n      minStrike: minStrike === Infinity ? 0 : minStrike, \n      maxStrike: maxStrike === -Infinity ? 0 : maxStrike, \n      maxTotalVolume,\n      totalVolumeSum\n    };\n  }, [filteredData]);\n\n  const getStrikePosition = useCallback((strike: number) => {\n    if (!filteredData.length) return 50;\n    if (filteredChartData.maxStrike === filteredChartData.minStrike) return 50;\n    \n    // Calculate position based on index in filtered data for even spacing\n    const index = filteredData.findIndex(item => item.strike === strike);\n    if (index === -1) return 50;\n    \n    const totalItems = filteredData.length;\n    const spacing = 100 / (totalItems + 1); // Even spacing with padding\n    \n    // For Call/Put chart: reverse positioning (lowest at top)\n    // For Total Volume chart: normal positioning (lowest at left)\n    if (chartType === 'callput') {\n      const reversedIndex = totalItems - 1 - index;\n      return spacing * (reversedIndex + 1);\n    } else {\n      // Total Volume chart: prices go from low to high (left to right)\n      return spacing * (index + 1);\n    }\n  }, [filteredData, filteredChartData, chartType]);\n\n  // Get position for current price (interpolates between strikes)\n  const getCurrentPricePosition = useCallback((price: number) => {\n    if (!filteredData.length) return 50;\n    if (filteredChartData.maxStrike === filteredChartData.minStrike) return 50;\n    \n    const minStrike = filteredChartData.minStrike;\n    const maxStrike = filteredChartData.maxStrike;\n    \n    // Clamp price to be within strike range\n    const clampedPrice = Math.max(minStrike, Math.min(maxStrike, price));\n    \n    // Find the strikes immediately above and below the current price\n    let lowerStrike = minStrike;\n    let upperStrike = maxStrike;\n    let lowerIndex = 0;\n    let upperIndex = filteredData.length - 1;\n    \n    for (let i = 0; i < filteredData.length - 1; i++) {\n      const currentStrike = filteredData[i].strike;\n      const nextStrike = filteredData[i + 1].strike;\n      \n      if (currentStrike <= clampedPrice && clampedPrice <= nextStrike) {\n        lowerStrike = currentStrike;\n        upperStrike = nextStrike;\n        lowerIndex = i;\n        upperIndex = i + 1;\n        break;\n      }\n    }\n    \n    // Calculate positions for the bounding strikes using same logic as getStrikePosition\n    const totalItems = filteredData.length;\n    const spacing = 100 / (totalItems + 1);\n    \n    let lowerPos, upperPos;\n    if (chartType === 'callput') {\n      // Reversed positioning for call/put chart\n      const lowerReversed = totalItems - 1 - lowerIndex;\n      const upperReversed = totalItems - 1 - upperIndex;\n      lowerPos = spacing * (lowerReversed + 1);\n      upperPos = spacing * (upperReversed + 1);\n    } else {\n      lowerPos = spacing * (lowerIndex + 1);\n      upperPos = spacing * (upperIndex + 1);\n    }\n    \n    // Interpolate between the two strike positions\n    if (upperStrike === lowerStrike) {\n      return lowerPos;\n    }\n    \n    const priceRatio = (clampedPrice - lowerStrike) / (upperStrike - lowerStrike);\n    const interpolatedPosition = lowerPos + (upperPos - lowerPos) * priceRatio;\n    \n    if (import.meta.env.DEV) {\n      console.log('Price interpolation:', {\n        price: clampedPrice,\n        lowerStrike,\n        upperStrike,\n        lowerPos: lowerPos.toFixed(2),\n        upperPos: upperPos.toFixed(2),\n        priceRatio: priceRatio.toFixed(3),\n        finalPos: interpolatedPosition.toFixed(2)\n      });\n    }\n    \n    return interpolatedPosition;\n  }, [filteredData, filteredChartData, chartType]);\n\n  // Calculate dynamic height based on number of strike prices\n  const getChartHeight = useCallback(() => {\n    const rowHeight = 18; // Height of each strike row\n    const minHeight = 400; // Minimum chart height\n    const calculatedHeight = Math.max(minHeight, filteredData.length * rowHeight + 40); // 40px padding\n    return calculatedHeight;\n  }, [filteredData.length]);\n\n  if (!data.length) {\n    return (\n      <div className=\"volume-profile-chart\">\n        <div className=\"chart-header\">\n          <h3>{ticker} {chartType === 'callput' ? 'Call/Put Volume' : 'Total Volume'}</h3>\n          {expiry && <span className=\"expiry-date\">{expiry}</span>}\n        </div>\n        <div className=\"no-data\">\n          <p>No volume data available for this ticker{expiry ? ` and expiry date` : ''}</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (chartType === 'callput') {\n    return (\n      <>\n      <div className=\"volume-profile-chart modern-mirrored-chart\">\n        <div className=\"chart-header modern-header\">\n          <h3>{ticker} Call/Put Volume</h3>\n          <div className=\"header-info\">\n            {getCurrentPrice() && (\n              <span className=\"current-price-display\">\n                Current Price: <strong>${getCurrentPrice()}</strong>\n              </span>\n            )}\n            {expiry && <span className=\"expiry-date\">{expiry}</span>}\n          </div>\n        </div>\n        \n        <div className=\"chart-container modern-container\">\n          \n          {/* Main Chart Area */}\n          <div \n            className=\"chart-area modern-chart-area\"\n            style={{ height: `${getChartHeight()}px` }}\n          >\n            {/* Center Line */}\n            <div className=\"center-line\"></div>\n            \n            {/* Strike Price Lines */}\n            <div className=\"strike-axis modern-strike-axis\">\n              {filteredData.map((item) => (\n                <div \n                  key={item.strike} \n                  className=\"strike-line modern-strike-line\"\n                  style={{ \n                    top: `${getStrikePosition(item.strike)}%`\n                  }}\n                >\n                  <span \n                    className={`strike-label modern-strike-label ${isCurrentPrice(item.strike) ? 'current-price-label' : ''}`}\n                  >\n                    {item.strike}\n                  </span>\n                </div>\n              ))}\n            </div>\n            \n            {/* Call/Put Volume Bars */}\n            <div className=\"volume-bars modern-volume-bars\">\n              {filteredData.map((item) => (\n                <div \n                  key={item.strike} \n                  className=\"strike-row modern-strike-row\"\n                  style={{ top: `${getStrikePosition(item.strike)}%` }}\n                >\n                  {/* Call volume bar (left side, green) */}\n                  <div \n                    className=\"volume-bar call-bar modern-call-bar\"\n                    style={{ \n                      width: `${getBarWidth(item.callVolume, filteredChartData.maxVolume)}%`,\n                      right: '52%' /* Moved 2% away from center to add spacing */\n                    }}\n                    onMouseEnter={(e) => handleBarMouseEnter(e, item.strike, 'Call')}\n                    onMouseLeave={handleBarMouseLeave}\n                    onMouseMove={handleBarMouseMove}\n                  >\n                    {item.callVolume > 0 && (\n                      <span className=\"volume-text modern-volume-text\">\n                        {formatVolume(item.callVolume)}\n                      </span>\n                    )}\n                  </div>\n                  \n                  {/* Put volume bar (right side, red) */}\n                  <div \n                    className=\"volume-bar put-bar modern-put-bar\"\n                    style={{ \n                      width: `${getBarWidth(item.putVolume, filteredChartData.maxVolume)}%`,\n                      left: '52%' /* Moved 2% away from center to add spacing */\n                    }}\n                    onMouseEnter={(e) => handleBarMouseEnter(e, item.strike, 'Put')}\n                    onMouseLeave={handleBarMouseLeave}\n                    onMouseMove={handleBarMouseMove}\n                  >\n                    {item.putVolume > 0 && (\n                      <span className=\"volume-text modern-volume-text\">\n                        {formatVolume(item.putVolume)}\n                      </span>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n            \n            {/* Current Price Indicator Line */}\n            {getCurrentPrice() && (\n              <div \n                className=\"current-price-line\"\n                style={{ \n                  top: `${getCurrentPricePosition(getCurrentPrice()!)}%`\n                }}\n              >\n                <span className=\"current-price-label-inline\" style={{\n                  position: 'absolute',\n                  left: '105%',\n                  top: '50%',\n                  transform: 'translateY(-50%)',\n                  background: 'linear-gradient(135deg, rgba(255, 193, 7, 0.95), rgba(255, 152, 0, 0.95))',\n                  color: '#000000',\n                  padding: '0.25rem 0.5rem',\n                  borderRadius: '4px',\n                  fontSize: '0.8rem',\n                  fontWeight: '700',\n                  whiteSpace: 'nowrap',\n                  border: '2px solid rgba(255, 193, 7, 1)',\n                  boxShadow: '0 2px 8px rgba(255, 193, 7, 0.4)',\n                  zIndex: 15\n                }}>\n                  ${getCurrentPrice()!.toFixed(2)}\n                </span>\n              </div>\n            )}\n          </div>\n        </div>\n        \n        {/* Legend */}\n        {/* <div className=\"chart-legend modern-legend\">\n          <div className=\"legend-item\">\n            <div className=\"legend-color call modern-legend-call\"></div>\n            <span>Call Volume</span>\n          </div>\n          <div className=\"legend-item\">\n            <div className=\"legend-color put modern-legend-put\"></div>\n            <span>Put Volume</span>\n          </div>\n        </div> */}\n      </div>\n\n      {/* Modern Tooltip */}\n      {tooltip.visible && tooltip.content && (\n        <div \n          className=\"modern-tooltip\"\n          style={{\n            position: 'fixed',\n            left: `${tooltip.x + 15}px`,\n            top: `${tooltip.y}px`,\n            transform: 'translateY(-50%)',\n            pointerEvents: 'auto',\n            zIndex: 9999\n          }}\n          onMouseEnter={() => setTooltip(prev => ({ ...prev, visible: true }))}\n          onMouseLeave={handleBarMouseLeave}\n        >\n          <div className=\"tooltip-header\">\n            <span className=\"tooltip-strike\">${tooltip.content.strike}</span>\n            {tooltip.content.type && (\n              <span className={`tooltip-type ${tooltip.content.type.toLowerCase()}`}>\n                {tooltip.content.type}\n              </span>\n            )}\n          </div>\n          <div className=\"tooltip-body\">\n            {tooltip.content.tradeDetails.length > 0 && (\n              <div className=\"tooltip-trade-details-only\">\n                <div className=\"tooltip-trade-header\">Trade Details:</div>\n                <div className=\"tooltip-trade-list\">\n                  {tooltip.content.tradeDetails.map((trade, idx) => (\n                    <div key={idx} className=\"tooltip-trade-item\">\n                      <div className=\"trade-item-row\">\n                        <span className=\"trade-item-label\">Vol:</span>\n                        <span className=\"trade-item-value\">{trade.volume.toLocaleString()}</span>\n                      </div>\n                      <div className=\"trade-item-row\">\n                        <span className=\"trade-item-label\">Premium:</span>\n                        <span className=\"trade-item-value\">{trade.premium}</span>\n                      </div>\n                      {trade.expiry && (\n                        <div className=\"trade-item-row\">\n                          <span className=\"trade-item-label\">Expiry:</span>\n                          <span className=\"trade-item-value\">\n                            {new Date(trade.expiry).toLocaleDateString('en-US', { \n                              month: 'short', \n                              day: 'numeric',\n                              year: 'numeric'\n                            })}\n                          </span>\n                        </div>\n                      )}\n                      <div className=\"trade-item-row\">\n                        <span className=\"trade-item-label\">Time:</span>\n                        <span className=\"trade-item-value trade-item-time\">\n                          {(() => {\n                            try {\n                              if (!trade.timestamp) return 'N/A';\n                              \n                              // Try parsing the Discord format: \"Monday, October 13, 2025 at 10:07 AM\"\n                              const date = new Date(trade.timestamp);\n                              \n                              // Check if date is valid\n                              if (!isNaN(date.getTime())) {\n                                return `${date.toLocaleDateString('en-US', { \n                                  month: 'short', \n                                  day: 'numeric',\n                                  year: 'numeric'\n                                })} ${date.toLocaleTimeString('en-US', { \n                                  hour: 'numeric', \n                                  minute: '2-digit',\n                                  hour12: true \n                                })}`;\n                              }\n                              \n                              // If date parsing failed, return the original timestamp\n                              return trade.timestamp;\n                            } catch (e) {\n                              return trade.timestamp || 'N/A';\n                            }\n                          })()}\n                        </span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n      </>\n    );\n  }\n\n  // Total Volume Chart (Vertical orientation)\n  return (\n    <>\n    <div className=\"volume-profile-chart total-chart\">\n      <div className=\"chart-header\">\n        <h3>{ticker} Total Volume</h3>\n        <div className=\"header-info\">\n          {getCurrentPrice() && (\n            <span className=\"current-price-display\">\n              Current Price: <strong>${getCurrentPrice()}</strong>\n            </span>\n          )}\n          {expiry && <span className=\"expiry-date\">{expiry}</span>}\n        </div>\n      </div>\n      \n      {/* Chart Header with Price Info */}\n      {/* <div className=\"chart-header\">\n        <div className=\"chart-title\">\n          {ticker} Total Volume\n        </div>\n        <div className=\"price-info\">\n          <div className=\"current-price-box\">\n            Current Price: ${getCurrentPrice()?.toFixed(2) || 'N/A'}\n          </div>\n          <div className=\"price-range-box\">\n            Range: ${filteredData.length > 0 ? filteredData[0].strike.toFixed(0) : 'N/A'} - ${filteredData.length > 0 ? filteredData[filteredData.length - 1].strike.toFixed(0) : 'N/A'}\n          </div>\n        </div>\n      </div> */}\n\n      <div className=\"chart-container vertical\">\n        \n        {/* Main Chart Area */}\n        <div \n          className=\"chart-area vertical\"\n          style={{ height: `${getChartHeight()}px` }}\n        >\n          {/* Total Volume Bars (Vertical) */}\n          <div className=\"volume-bars vertical\">\n            {filteredData.map((item) => (\n              <div \n                key={item.strike} \n                className=\"strike-column\"\n                style={{ left: `${getStrikePosition(item.strike)}%` }}\n              >\n                <div \n                  className=\"volume-bar total-bar vertical\"\n                  style={{ \n                    height: `${getBarWidth(item.totalVolume, filteredChartData.maxTotalVolume)}%`\n                  }}\n                  onMouseEnter={(e) => handleBarMouseEnter(e, item.strike)}\n                  onMouseLeave={handleBarMouseLeave}\n                  onMouseMove={handleBarMouseMove}\n                >\n                  {item.totalVolume > 0 && (\n                    <span className=\"volume-text volume-text-top\">\n                      {formatVolume(item.totalVolume)}\n                      <span className=\"volume-percentage\">\n                        ({filteredChartData.totalVolumeSum > 0 ? ((item.totalVolume / filteredChartData.totalVolumeSum) * 100).toFixed(1) : '0.0'}%)\n                      </span>\n                    </span>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n          \n          {/* Current Price Indicator Line (Vertical) */}\n          {getCurrentPrice() && (\n            <div \n              className=\"current-price-line vertical\"\n              style={{ \n                left: `${getCurrentPricePosition(getCurrentPrice()!)}%`\n              }}\n            >\n              <span className=\"current-price-label-inline\" style={{\n                position: 'absolute',\n                left: '50%',\n                top: '-30px',\n                transform: 'translateX(-50%)',\n                background: 'linear-gradient(135deg, rgba(255, 193, 7, 0.95), rgba(255, 152, 0, 0.95))',\n                color: '#000000',\n                padding: '0.25rem 0.5rem',\n                borderRadius: '4px',\n                fontSize: '0.8rem',\n                fontWeight: '700',\n                whiteSpace: 'nowrap',\n                border: '2px solid rgba(255, 193, 7, 1)',\n                boxShadow: '0 2px 8px rgba(255, 193, 7, 0.4)',\n                zIndex: 15\n              }}>\n                ${getCurrentPrice()!.toFixed(2)}\n              </span>\n            </div>\n          )}\n        </div>\n        \n        {/* X-Axis Price Labels (Bottom) - Moved outside chart area */}\n        <div className=\"x-axis-labels\">\n          {filteredData.map((item) => (\n            <div \n              key={item.strike} \n              className=\"x-axis-label\"\n              style={{ \n                left: `${getStrikePosition(item.strike)}%`\n              }}\n            >\n              <span \n                className={`strike-label ${isCurrentPrice(item.strike) ? 'current-price-label' : ''}`}\n              >\n                {item.strike}\n              </span>\n            </div>\n          ))}\n        </div>\n      </div>\n      \n      {/* Legend */}\n      {/* <div className=\"chart-legend\">\n        <div className=\"legend-item\">\n          <div className=\"legend-color total\"></div>\n          <span>Total Volume</span>\n        </div>\n      </div> */}\n\n      {/* Modern Tooltip */}\n      {tooltip.visible && tooltip.content && (\n        <div \n          className=\"modern-tooltip\"\n          style={{\n            position: 'fixed',\n            left: `${tooltip.x + 15}px`,\n            top: `${tooltip.y}px`,\n            transform: 'translateY(-50%)',\n            pointerEvents: 'auto',\n            zIndex: 9999\n          }}\n          onMouseEnter={() => setTooltip(prev => ({ ...prev, visible: true }))}\n          onMouseLeave={handleBarMouseLeave}\n        >\n          <div className=\"tooltip-header\">\n            <span className=\"tooltip-strike\">${tooltip.content.strike}</span>\n            {tooltip.content.type && (\n              <span className={`tooltip-type ${tooltip.content.type.toLowerCase()}`}>\n                {tooltip.content.type}\n              </span>\n            )}\n          </div>\n          <div className=\"tooltip-body\">\n            {tooltip.content.tradeDetails.length > 0 && (\n              <div className=\"tooltip-trade-details-only\">\n                <div className=\"tooltip-trade-header\">Trade Details:</div>\n                <div className=\"tooltip-trade-list\">\n                  {tooltip.content.tradeDetails.map((trade, idx) => (\n                    <div key={idx} className=\"tooltip-trade-item\">\n                      <div className=\"trade-item-row\">\n                        <span className=\"trade-item-label\">Vol:</span>\n                        <span className=\"trade-item-value\">{trade.volume.toLocaleString()}</span>\n                      </div>\n                      <div className=\"trade-item-row\">\n                        <span className=\"trade-item-label\">Premium:</span>\n                        <span className=\"trade-item-value\">{trade.premium}</span>\n                      </div>\n                      {trade.expiry && (\n                        <div className=\"trade-item-row\">\n                          <span className=\"trade-item-label\">Expiry:</span>\n                          <span className=\"trade-item-value\">\n                            {new Date(trade.expiry).toLocaleDateString('en-US', { \n                              month: 'short', \n                              day: 'numeric',\n                              year: 'numeric'\n                            })}\n                          </span>\n                        </div>\n                      )}\n                      <div className=\"trade-item-row\">\n                        <span className=\"trade-item-label\">Time:</span>\n                        <span className=\"trade-item-value trade-item-time\">\n                          {(() => {\n                            try {\n                              if (!trade.timestamp) return 'N/A';\n                              \n                              // Try parsing the Discord format: \"Monday, October 13, 2025 at 10:07 AM\"\n                              const date = new Date(trade.timestamp);\n                              \n                              // Check if date is valid\n                              if (!isNaN(date.getTime())) {\n                                return `${date.toLocaleDateString('en-US', { \n                                  month: 'short', \n                                  day: 'numeric',\n                                  year: 'numeric'\n                                })} ${date.toLocaleTimeString('en-US', { \n                                  hour: 'numeric', \n                                  minute: '2-digit',\n                                  hour12: true \n                                })}`;\n                              }\n                              \n                              // If date parsing failed, return the original timestamp\n                              return trade.timestamp;\n                            } catch (e) {\n                              return trade.timestamp || 'N/A';\n                            }\n                          })()}\n                        </span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n    </>\n  );\n});\n\nVolumeProfileChart.displayName = 'VolumeProfileChart';\n\nexport default VolumeProfileChart;\n","import React, { memo, useMemo, useCallback, useState } from 'react';\nimport { ArrowUpDown } from 'lucide-react';\nimport { OptionData, formatVolume, parseTimestampFromData } from '../utils/dataParser';\n\ninterface TradeListProps {\n  trades: OptionData[];\n  ticker: string;\n  expiry?: string;\n}\n\ninterface TradeRowProps {\n  trade: OptionData;\n  index: number;\n}\n\nconst TradeRow: React.FC<TradeRowProps> = memo(({ trade }) => {\n  const formatExecutionDateTime = (timestamp: string): string => {\n    try {\n      // Parse the timestamp format from CSV data\n      // Expected format: \"Thursday, October 9, 2025 at 2:15 PM\"\n      const fullMatch = timestamp.match(/(\\w+),\\s+(\\w+)\\s+(\\d+),\\s+(\\d+)\\s+at\\s+(\\d+):(\\d+)\\s+(AM|PM)/i);\n      \n      if (fullMatch) {\n        const [, , monthName, day, , hour, minute, ampm] = fullMatch;\n        \n        // Convert to 24-hour format\n        let hour24 = parseInt(hour);\n        if (ampm.toUpperCase() === 'PM' && hour24 !== 12) {\n          hour24 += 12;\n        } else if (ampm.toUpperCase() === 'AM' && hour24 === 12) {\n          hour24 = 0;\n        }\n        \n        // Format date as MM/DD\n        const monthMap: { [key: string]: string } = {\n          'january': '01', 'february': '02', 'march': '03', 'april': '04',\n          'may': '05', 'june': '06', 'july': '07', 'august': '08',\n          'september': '09', 'october': '10', 'november': '11', 'december': '12'\n        };\n        \n        const month = monthMap[monthName.toLowerCase()] || '01';\n        const formattedDate = `${month}/${day.padStart(2, '0')}`;\n        const formattedTime = `${hour24.toString().padStart(2, '0')}:${minute}`;\n        \n        return `${formattedDate} ${formattedTime}`;\n      }\n      \n      // Fallback to standard date parsing\n      const date = new Date(timestamp);\n      if (isNaN(date.getTime())) return 'Unknown';\n      \n      return date.toLocaleDateString('en-US', { month: '2-digit', day: '2-digit' }) + ' ' + \n             date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: false });\n    } catch (error) {\n      return 'Unknown';\n    }\n  };\n\n  // Parse premium to check if over $1M\n  const parsePremiumValue = (premium: string): number => {\n    const cleanPremium = premium.replace(/[$,]/g, '');\n    const num = parseFloat(cleanPremium);\n    \n    if (premium.includes('M')) {\n      return num * 1000000;\n    } else if (premium.includes('K')) {\n      return num * 1000;\n    }\n    return num;\n  };\n\n  const premiumValue = parsePremiumValue(trade.premium);\n  const isHighValue = premiumValue >= 1000000;\n\n  return (\n    <div \n      className=\"trade-row-horizontal\"\n      style={{\n        backgroundColor: trade.optionType === 'Call' \n          ? (isHighValue ? 'rgba(0, 80, 0, 0.7)' : 'rgba(0, 100, 0, 0.5)') // Darker green for high value\n          : (isHighValue ? 'rgba(100, 0, 0, 0.7)' : 'rgba(139, 0, 0, 0.5)'), // Darker red for high value\n      }}\n    >\n      <div className=\"trade-cell-h symbol\">{trade.ticker}</div>\n      <div className=\"trade-cell-h strike\">{trade.strike}</div>\n      <div className=\"trade-cell-h expiry\">{new Date(trade.expiry).toLocaleDateString('en-US', { month: '2-digit', day: '2-digit', year: 'numeric' })}</div>\n      <div className=\"trade-cell-h type\">{trade.optionType}</div>\n      <div className=\"trade-cell-h side\">{trade.sweepType}</div>\n      <div className=\"trade-cell-h size\">{formatVolume(trade.volume)}</div>\n      <div className=\"trade-cell-h premium\">{trade.premium}</div>\n      <div className=\"trade-cell-h volume\">{formatVolume(trade.volume)}</div>\n      <div className=\"trade-cell-h oi\">{formatVolume(trade.openInterest)}</div>\n      <div className=\"trade-cell-h exec-time\">{formatExecutionDateTime(trade.timestamp)}</div>\n    </div>\n  );\n});\n\nTradeRow.displayName = 'TradeRow';\n\ntype SortOption = 'trade-date' | 'expiry-date' | 'size';\n\nconst TradeList: React.FC<TradeListProps> = memo(({ trades, ticker, expiry }) => {\n  const [sortBy, setSortBy] = useState<SortOption>('trade-date');\n  \n  const sortedTrades = useMemo(() => {\n    return [...trades].sort((a, b) => {\n      switch (sortBy) {\n        case 'trade-date': {\n          // Sort by timestamp (most recent first)\n          const dateA = parseTimestampFromData(a.timestamp);\n          const dateB = parseTimestampFromData(b.timestamp);\n          if (!dateA || !dateB) return 0;\n          return dateB.getTime() - dateA.getTime();\n        }\n        case 'expiry-date': {\n          // Sort by expiry date (earliest first)\n          const expiryA = new Date(a.expiry);\n          const expiryB = new Date(b.expiry);\n          return expiryA.getTime() - expiryB.getTime();\n        }\n        case 'size': {\n          // Sort by volume (largest first)\n          return b.volume - a.volume;\n        }\n        default:\n          return 0;\n      }\n    });\n  }, [trades, sortBy]);\n\n  const filteredTrades = useMemo(() => {\n    if (!expiry) return sortedTrades;\n    return sortedTrades.filter(trade => trade.expiry === expiry);\n  }, [sortedTrades, expiry]);\n\n  if (filteredTrades.length === 0) {\n    return (\n      <div className=\"trade-list\">\n        <div className=\"trade-list-header\">\n          <h3>{ticker} Trade History</h3>\n          {expiry && <span className=\"expiry-filter\">Filtered by: {new Date(expiry).toLocaleDateString()}</span>}\n        </div>\n        <div className=\"no-trades\">\n          <p>No trades found for {ticker}{expiry ? ` on ${new Date(expiry).toLocaleDateString()}` : ''}</p>\n        </div>\n      </div>\n    );\n  }\n\n  const getTradeKey = useCallback((trade: OptionData, index: number) => \n    `${trade.ticker}-${trade.strike}-${trade.expiry}-${trade.timestamp}-${index}`,\n    []\n  );\n\n  return (\n    <div className=\"trade-list\">\n      <div className=\"trade-list-header\">\n        <div className=\"header-left\">\n          <h3>{ticker} Trade History</h3>\n          {expiry && <span className=\"expiry-filter\">Filtered by: {new Date(expiry).toLocaleDateString()}</span>}\n        </div>\n        <div className=\"header-right\">\n          <div className=\"sort-controls\">\n            <ArrowUpDown className=\"sort-icon\" />\n            <select \n              className=\"sort-selector\"\n              value={sortBy}\n              onChange={(e) => setSortBy(e.target.value as SortOption)}\n            >\n              <option value=\"trade-date\">Sort by Trade Date (Recent First)</option>\n              <option value=\"expiry-date\">Sort by Expiry Date (Earliest First)</option>\n              <option value=\"size\">Sort by Size (Largest First)</option>\n            </select>\n          </div>\n          <div className=\"trade-count\">{filteredTrades.length} trades</div>\n        </div>\n      </div>\n      \n      <div className=\"trade-list-content\">\n        <div className=\"trade-list-table\">\n          <div className=\"trade-table-header\">\n            <div className=\"header-cell\">Symbol</div>\n            <div className=\"header-cell\">Strike</div>\n            <div className=\"header-cell\">Expiration</div>\n            <div className=\"header-cell\">Call/Put</div>\n            <div className=\"header-cell\">Side</div>\n            <div className=\"header-cell\">Size</div>\n            <div className=\"header-cell\">Premium</div>\n            <div className=\"header-cell\">Volume</div>\n            <div className=\"header-cell\">OI</div>\n            <div className=\"header-cell\">Exec Time</div>\n          </div>\n          \n          <div className=\"trade-table-body\">\n            {filteredTrades.map((trade, index) => (\n              <TradeRow key={getTradeKey(trade, index)} trade={trade} index={index} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nTradeList.displayName = 'TradeList';\n\nexport default TradeList;\n","import React, { useMemo } from 'react';\nimport { OptionData } from '../utils/dataParser';\n\n// Import the parsePremium function from dataParser\nfunction parsePremium(premium: string): number {\n  const hasK = premium.includes('K');\n  const hasM = premium.includes('M');\n  \n  const cleanPremium = premium.replace(/[$,]/g, '');\n  const num = parseFloat(cleanPremium);\n  \n  if (hasM) {\n    return num * 1000000;\n  } else if (hasK) {\n    return num * 1000;\n  }\n  \n  return num;\n}\n\ninterface StrikeExpiryHeatmapProps {\n  trades: OptionData[];\n  currentPrice?: number;\n}\n\ninterface HeatmapCell {\n  value: number;\n  volume: number;\n  callVolume: number;\n  putVolume: number;\n  trades: number;\n}\n\nconst StrikeExpiryHeatmap: React.FC<StrikeExpiryHeatmapProps> = ({ trades, currentPrice }) => {\n  const { heatmapData, strikes, expiries, maxAbsValue } = useMemo(() => {\n    // Group trades by strike and expiry\n    const dataMap = new Map<string, HeatmapCell>();\n    const strikeSet = new Set<number>();\n    const expirySet = new Set<string>();\n\n    trades.forEach(trade => {\n      const key = `${trade.strike}_${trade.expiry}`;\n      strikeSet.add(trade.strike);\n      expirySet.add(trade.expiry);\n\n      if (!dataMap.has(key)) {\n        dataMap.set(key, {\n          value: 0,\n          volume: 0,\n          callVolume: 0,\n          putVolume: 0,\n          trades: 0\n        });\n      }\n\n      const cell = dataMap.get(key)!;\n      const totalValue = parsePremium(trade.premium);\n\n      // Debug logging for small values\n      if (Math.abs(totalValue) < 10 && trade.ticker === 'TSLA') {\n        console.log(`Small premium detected: ${trade.ticker} ${trade.strike} ${trade.expiry} ${trade.optionType} - Premium: \"${trade.premium}\" -> Parsed: ${totalValue}`);\n      }\n\n      // Aggregate based on option type\n      if (trade.optionType === 'Call') {\n        cell.value += totalValue;\n        cell.callVolume += trade.volume;\n      } else {\n        cell.value -= totalValue; // Puts are negative\n        cell.putVolume += trade.volume;\n      }\n\n      cell.volume += trade.volume;\n      cell.trades += 1;\n    });\n\n    // Sort strikes and expiries\n    const sortedStrikes = Array.from(strikeSet).sort((a, b) => b - a); // Descending\n    const sortedExpiries = Array.from(expirySet).sort((a, b) => {\n      const dateA = new Date(a);\n      const dateB = new Date(b);\n      return dateA.getTime() - dateB.getTime();\n    });\n\n    // Find max absolute value for color scaling\n    let maxAbs = 0;\n    dataMap.forEach(cell => {\n      const absValue = Math.abs(cell.value);\n      if (absValue > maxAbs) maxAbs = absValue;\n    });\n\n    return {\n      heatmapData: dataMap,\n      strikes: sortedStrikes,\n      expiries: sortedExpiries,\n      maxAbsValue: maxAbs\n    };\n  }, [trades]);\n\n  const getColor = (value: number, volume: number) => {\n    if (volume === 0) return 'rgba(255, 255, 255, 0.03)';\n    \n    const intensity = Math.abs(value) / maxAbsValue;\n    const alpha = 0.2 + (intensity * 0.6); // Range from 0.2 to 0.8\n\n    if (value > 0) {\n      // Positive (Calls) - Green\n      return `rgba(76, 175, 80, ${alpha})`;\n    } else {\n      // Negative (Puts) - Red\n      return `rgba(244, 67, 54, ${alpha})`;\n    }\n  };\n\n  const formatValue = (value: number): string => {\n    const absValue = Math.abs(value);\n    if (absValue >= 1000000) {\n      return `${value >= 0 ? '' : '-'}$${(absValue / 1000000).toFixed(1)}M`;\n    } else if (absValue >= 1000) {\n      return `${value >= 0 ? '' : '-'}$${(absValue / 1000).toFixed(1)}K`;\n    } else if (absValue >= 1) {\n      return `${value >= 0 ? '' : '-'}$${absValue.toFixed(0)}`;\n    } else {\n      // For very small values, show more precision\n      return `${value >= 0 ? '' : '-'}$${absValue.toFixed(2)}`;\n    }\n  };\n\n  const isCurrentPriceStrike = (strike: number): boolean => {\n    if (!currentPrice) return false;\n    return Math.abs(strike - currentPrice) < 2; // Within $2\n  };\n\n  const getCellKey = (strike: number, expiry: string) => `${strike}_${expiry}`;\n\n  return (\n    <div className=\"strike-expiry-heatmap\">\n      <div className=\"heatmap-header\">\n        <h3>Strike × Expiry Premium Heatmap</h3>\n        <div className=\"heatmap-legend\">\n          <div className=\"legend-item\">\n            <div className=\"legend-color\" style={{ background: 'rgba(76, 175, 80, 0.6)' }}></div>\n            <span>Call Premium</span>\n          </div>\n          <div className=\"legend-item\">\n            <div className=\"legend-color\" style={{ background: 'rgba(244, 67, 54, 0.6)' }}></div>\n            <span>Put Premium</span>\n          </div>\n          {currentPrice && (\n            <div className=\"legend-item\">\n              <div className=\"legend-color\" style={{ background: 'rgba(255, 193, 7, 0.4)', border: '2px solid #ffc107' }}></div>\n              <span>Current Price (~${currentPrice.toFixed(2)})</span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"heatmap-scroll-container\">\n        <table className=\"heatmap-table\">\n          <thead>\n            <tr>\n              <th className=\"heatmap-corner\">Strike</th>\n              {expiries.map(expiry => (\n                <th key={expiry} className=\"heatmap-expiry\">\n                  {new Date(expiry).toLocaleDateString('en-US', { \n                    month: '2-digit', \n                    day: '2-digit',\n                    year: '2-digit'\n                  })}\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {strikes.map(strike => {\n              const isAtMoney = isCurrentPriceStrike(strike);\n              return (\n                <tr key={strike} className={isAtMoney ? 'current-price-row' : ''}>\n                  <td className={`heatmap-strike ${isAtMoney ? 'at-money' : ''}`}>\n                    {strike.toFixed(1)}\n                    {isAtMoney && <span className=\"atm-indicator\">▶</span>}\n                  </td>\n                  {expiries.map(expiry => {\n                    const cell = heatmapData.get(getCellKey(strike, expiry));\n                    const hasData = cell && cell.volume > 0;\n                    \n                    return (\n                      <td\n                        key={`${strike}_${expiry}`}\n                        className={`heatmap-cell ${hasData ? 'has-data' : ''} ${isAtMoney ? 'at-money-cell' : ''}`}\n                        style={{\n                          background: hasData ? getColor(cell!.value, cell!.volume) : undefined\n                        }}\n                        title={hasData ? \n                          `Strike: $${strike}\\nExpiry: ${expiry}\\nNet Premium: ${formatValue(cell!.value)}\\nVolume: ${cell!.volume}\\nCalls: ${cell!.callVolume}\\nPuts: ${cell!.putVolume}\\nTrades: ${cell!.trades}` \n                          : undefined\n                        }\n                      >\n                        {hasData && (\n                          <div className=\"cell-content\">\n                            <span className=\"cell-value\">{formatValue(cell!.value)}</span>\n                          </div>\n                        )}\n                      </td>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default StrikeExpiryHeatmap;\n\n","/**\n * File loading utilities for handling multiple CSV files\n */\n\nexport interface FileInfo {\n  filename: string;\n  timestamp: Date;\n  size: number;\n}\n\nexport interface LoadedFileData {\n  filename: string;\n  timestamp: Date;\n  data: string;\n  error?: string;\n}\n\n/**\n * Parse timestamp from filename\n * Expected format: options_data_YYYY-MM-DD_HH-MM.csv\n */\nexport function parseTimestampFromFilename(filename: string): Date | null {\n  try {\n    // Extract timestamp from filename: options_data_2024-01-15_10-00.csv\n    const match = filename.match(/options_data_(\\d{4}-\\d{2}-\\d{2})_(\\d{2}-\\d{2})\\.csv/);\n    if (!match) return null;\n    \n    const [, dateStr, timeStr] = match;\n    const [year, month, day] = dateStr.split('-').map(Number);\n    const [hour, minute] = timeStr.split('-').map(Number);\n    \n    return new Date(year, month - 1, day, hour, minute);\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.warn(`Failed to parse timestamp from filename: ${filename}`, error);\n    }\n    return null;\n  }\n}\n\n/**\n * Get all CSV files from the data directory\n */\nexport async function getDataFiles(): Promise<FileInfo[]> {\n  try {\n    // In a real application, you would fetch this from your backend\n    // For now, we'll simulate by checking known files\n    const baseUrl = import.meta.env.BASE_URL;\n    const response = await fetch(`${baseUrl}api/data-files`);\n    \n    if (!response.ok) {\n      // Fallback to static file list for development\n      return [\n        {\n          filename: 'options_data_2024-01-15_10-00.csv',\n          timestamp: new Date('2024-01-15T10:00:00'),\n          size: 0 // Will be updated when file is loaded\n        }\n      ];\n    }\n    \n    const files = await response.json();\n    return files.map((file: any) => ({\n      filename: file.name,\n      timestamp: parseTimestampFromFilename(file.name) || new Date(),\n      size: file.size\n    })).sort((a: FileInfo, b: FileInfo) => \n      b.timestamp.getTime() - a.timestamp.getTime() // Most recent first\n    );\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.warn('Failed to fetch data files list, using fallback:', error);\n    }\n    return [\n      {\n        filename: 'options_data_2024-01-15_10-00.csv',\n        timestamp: new Date('2024-01-15T10:00:00'),\n        size: 0\n      }\n    ];\n  }\n}\n\n/**\n * Load a single CSV file with cache busting\n */\nexport async function loadCSVFile(filename: string, bustCache: boolean = false): Promise<LoadedFileData> {\n  try {\n    // Add cache-busting query parameter to force fresh load\n    const cacheBuster = bustCache ? `?t=${Date.now()}` : '';\n    const baseUrl = import.meta.env.BASE_URL;\n    const response = await fetch(`${baseUrl}data/${filename}${cacheBuster}`, {\n      cache: bustCache ? 'no-store' : 'default',\n      headers: {\n        'Cache-Control': bustCache ? 'no-cache, no-store, must-revalidate' : 'default',\n        'Pragma': bustCache ? 'no-cache' : 'default'\n      }\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Failed to load ${filename}: ${response.status} ${response.statusText}`);\n    }\n    \n    const data = await response.text();\n    const timestamp = parseTimestampFromFilename(filename);\n    \n    return {\n      filename,\n      timestamp: timestamp || new Date(),\n      data\n    };\n  } catch (error) {\n    return {\n      filename,\n      timestamp: new Date(),\n      data: '',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    };\n  }\n}\n\n// Cache for loaded files to avoid re-fetching\nconst fileCache = new Map<string, { data: LoadedFileData; timestamp: number }>();\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\n/**\n * Load all CSV files from the data directory with caching\n */\nexport async function loadAllDataFiles(bustCache: boolean = false): Promise<LoadedFileData[]> {\n  try {\n    const files = await getDataFiles();\n    const now = Date.now();\n    \n    // If busting cache, skip cache check and load all files fresh\n    if (bustCache) {\n      if (import.meta.env.DEV) {\n        console.log('🔄 Cache busting enabled - loading all files fresh...');\n      }\n      const loadPromises = files.map(file => loadCSVFile(file.filename, true));\n      const results = await Promise.all(loadPromises);\n      \n      // Update cache with fresh data\n      results.forEach(result => {\n        if (!result.error) {\n          fileCache.set(result.filename, { data: result, timestamp: now });\n        }\n      });\n      \n      const successful = results.filter(result => !result.error);\n      if (import.meta.env.DEV) {\n        console.log(`✓ Loaded ${successful.length} files fresh (cache bypassed)`);\n      }\n      return successful;\n    }\n    \n    // Normal caching behavior\n    const cachedResults: LoadedFileData[] = [];\n    const filesToLoad: string[] = [];\n    \n    files.forEach(file => {\n      const cached = fileCache.get(file.filename);\n      if (cached && (now - cached.timestamp) < CACHE_DURATION) {\n        cachedResults.push(cached.data);\n      } else {\n        filesToLoad.push(file.filename);\n      }\n    });\n    \n    // Load only uncached files\n    let newResults: LoadedFileData[] = [];\n    if (filesToLoad.length > 0) {\n      const loadPromises = filesToLoad.map(filename => loadCSVFile(filename, false));\n      newResults = await Promise.all(loadPromises);\n      \n      // Update cache\n      newResults.forEach(result => {\n        if (!result.error) {\n          fileCache.set(result.filename, { data: result, timestamp: now });\n        }\n      });\n    }\n    \n    const allResults = [...cachedResults, ...newResults];\n    \n    // Filter out files with errors and log them\n    const successful = allResults.filter(result => !result.error);\n    const failed = allResults.filter(result => result.error);\n    \n    if (import.meta.env.DEV && failed.length > 0) {\n      console.warn('Failed to load some data files:', failed);\n    }\n    \n    if (import.meta.env.DEV) {\n      console.log(`Successfully loaded ${successful.length} data files (${cachedResults.length} cached, ${newResults.filter(r => !r.error).length} new)`);\n    }\n    return successful;\n  } catch (error) {\n    console.error('Failed to load data files:', error);\n    return [];\n  }\n}\n\n/**\n * Clear the file cache\n */\nexport function clearFileCache(): void {\n  fileCache.clear();\n}\n\n/**\n * Preload data files in the background\n */\nexport function preloadDataFiles(): Promise<LoadedFileData[]> {\n  return loadAllDataFiles();\n}\n\n/**\n * Generate filename for new data file based on current timestamp\n */\nexport function generateDataFilename(date: Date = new Date()): string {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  const hour = String(date.getHours()).padStart(2, '0');\n  const minute = String(date.getMinutes()).padStart(2, '0');\n  \n  return `options_data_${year}-${month}-${day}_${hour}-${minute}.csv`;\n}\n\n/**\n * Get the most recent data file timestamp\n */\nexport function getMostRecentTimestamp(files: FileInfo[]): Date | null {\n  if (files.length === 0) return null;\n  \n  return files.reduce((latest, file) => \n    file.timestamp > latest ? file.timestamp : latest, \n    files[0].timestamp\n  );\n}\n\n/**\n * Get files from the last N hours\n */\nexport function getRecentFiles(files: FileInfo[], hours: number = 24): FileInfo[] {\n  const cutoff = new Date(Date.now() - hours * 60 * 60 * 1000);\n  return files.filter(file => file.timestamp >= cutoff);\n}\n","\n/**\n * Fetch current stock price using multiple data sources\n * Priority: Finnhub (real-time NASDAQ) → Yahoo Finance (fallback)\n * \n * To use Finnhub API (optional, for better NASDAQ data):\n * 1. Get free API key from https://finnhub.io/\n * 2. Create .env file: VITE_FINNHUB_API_KEY=your_key_here\n */\nexport async function fetchStockPrice(ticker: string): Promise<number | null> {\n  // Try Finnhub API first if API key is available (best for NASDAQ real-time data)\n  const finnhubApiKey = import.meta.env.VITE_FINNHUB_API_KEY;\n  \n  if (finnhubApiKey) {\n    try {\n      const finnhubUrl = `https://finnhub.io/api/v1/quote?symbol=${ticker}&token=${finnhubApiKey}`;\n      \n      const response = await fetch(finnhubUrl);\n      \n      if (response.ok) {\n        const data = await response.json();\n        const currentPrice = data?.c; // 'c' is current price in Finnhub API\n        \n        if (currentPrice && typeof currentPrice === 'number' && currentPrice > 0) {\n          if (import.meta.env.DEV) {\n            console.log(`✓ Fetched price from Finnhub (NASDAQ) for ${ticker}: $${currentPrice}`);\n          }\n          return currentPrice;\n        }\n      }\n    } catch (error) {\n      if (import.meta.env.DEV) {\n        console.warn(`Finnhub API failed for ${ticker}, trying fallback:`, error);\n      }\n    }\n  }\n\n  // Fallback to Yahoo Finance API with CORS proxy\n  try {\n    // Try direct Yahoo Finance API first\n    let yahooUrl = `https://query1.finance.yahoo.com/v8/finance/chart/${ticker}?interval=1d&range=1d`;\n    let response = await fetch(yahooUrl, { \n      mode: 'cors',\n      headers: {\n        'Accept': 'application/json',\n      }\n    });\n    \n    // If CORS fails, try with CORS proxy\n    if (!response.ok || response.status === 0) {\n      if (import.meta.env.DEV) {\n        console.log(`Yahoo Finance direct access failed, trying CORS proxy...`);\n      }\n      \n      // Use allorigins.win as CORS proxy (free, no auth)\n      const proxyUrl = `https://api.allorigins.win/raw?url=${encodeURIComponent(yahooUrl)}`;\n      response = await fetch(proxyUrl);\n    }\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    // Extract current price from the response\n    const currentPrice = data?.chart?.result?.[0]?.meta?.regularMarketPrice;\n    \n    if (currentPrice && typeof currentPrice === 'number') {\n      if (import.meta.env.DEV) {\n        console.log(`✓ Fetched price from Yahoo Finance for ${ticker}: $${currentPrice}`);\n      }\n      return currentPrice;\n    }\n    \n    return null;\n  } catch (error) {\n    if (import.meta.env.DEV) {\n      console.error(`❌ All APIs failed to fetch stock price for ${ticker}:`, error);\n      console.log(`💡 Solution: Add Finnhub API key to .env file (see README.md)`);\n    }\n    return null;\n  }\n}\n\n/**\n * Cache for stock prices to avoid excessive API calls\n */\nconst priceCache = new Map<string, { price: number; timestamp: number }>();\nconst CACHE_DURATION = 900000; // 15 minutes cache (15 * 60 * 1000)\n\n/**\n * Get real-time stock price with intelligent caching\n * Only fetches from API if price wasn't checked in the last 15 minutes\n */\nexport async function getCurrentPrice(\n  ticker: string\n): Promise<{\n  price: number | null;\n  source: 'api' | 'none';\n  cached: boolean;\n}> {\n  const cached = priceCache.get(ticker);\n  const now = Date.now();\n  \n  // Return cached price if it's less than 15 minutes old\n  if (cached && (now - cached.timestamp) < CACHE_DURATION) {\n    if (import.meta.env.DEV) {\n      const minutesAgo = Math.floor((now - cached.timestamp) / 60000);\n      console.log(`Using cached price for ${ticker} (${minutesAgo} min old): $${cached.price}`);\n    }\n    return { price: cached.price, source: 'api', cached: true };\n  }\n  \n  // Fetch new price from API\n  const apiPrice = await fetchStockPrice(ticker);\n  \n  if (apiPrice !== null) {\n    priceCache.set(ticker, { price: apiPrice, timestamp: now });\n    if (import.meta.env.DEV) {\n      console.log(`Fetched fresh price for ${ticker}: $${apiPrice}`);\n    }\n    return { price: apiPrice, source: 'api', cached: false };\n  }\n\n  return { price: null, source: 'none', cached: false };\n}\n\nexport async function getCachedStockPrice(ticker: string): Promise<number | null> {\n  const result = await getCurrentPrice(ticker);\n  return result.price;\n}\n\n/**\n * Clear the price cache\n */\nexport function clearPriceCache(): void {\n  priceCache.clear();\n}\n\n","import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { ArrowLeft, Calendar, RefreshCw, Search } from 'lucide-react';\nimport TickerList from './TickerList';\nimport VolumeProfileChart from './VolumeProfileChart';\nimport TradeList from './TradeList';\nimport StrikeExpiryHeatmap from './StrikeExpiryHeatmap';\nimport { \n  mergeDataFromFiles,\n  getTickerSummaries, \n  getVolumeProfileForTicker, \n  getExpiryDatesForTicker,\n  getHighestVolumeData,\n  clearDataCache,\n  OptionData,\n  MergedDataInfo\n} from '../utils/dataParser';\nimport { loadAllDataFiles, clearFileCache } from '../utils/fileLoader';\nimport { getCurrentPrice, clearPriceCache } from '../utils/stockPrice';\n\n// We'll load the CSV data via fetch instead of import\n\nconst OptionsDashboard: React.FC = () => {\n  const [selectedTicker, setSelectedTicker] = useState<string | null>(null);\n  const [selectedExpiry, setSelectedExpiry] = useState<string | null>(null);\n  const [optionData, setOptionData] = useState<OptionData[]>([]);\n  const [dataInfo, setDataInfo] = useState<MergedDataInfo | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [currentPrice, setCurrentPrice] = useState<number | null>(null);\n  const [priceSource, setPriceSource] = useState<'api' | 'none'>('none');\n  const [isPriceCached, setIsPriceCached] = useState(false);\n  const [searchTerm, setSearchTerm] = useState<string>('');\n\n  useEffect(() => {\n    const loadAllData = async (bustCache: boolean = false) => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        // Load all CSV files from the data directory\n        const loadedFiles = await loadAllDataFiles(bustCache);\n        \n        if (loadedFiles.length === 0) {\n          throw new Error('No data files found in the data directory');\n        }\n        \n        // Merge data from all files\n        const { mergedData, info } = mergeDataFromFiles(\n          loadedFiles.map(file => ({\n            filename: file.filename,\n            data: file.data,\n            timestamp: file.timestamp\n          }))\n        );\n        \n        setOptionData(mergedData);\n        setDataInfo(info);\n        setLoading(false);\n        \n        if (import.meta.env.DEV) {\n          console.log(`Loaded ${info.totalFiles} files with ${info.totalRecords} total records`);\n        }\n      } catch (error) {\n        console.error('Error loading data files:', error);\n        setError(error instanceof Error ? error.message : 'Failed to load data');\n        setLoading(false);\n      }\n    };\n\n    loadAllData(false); // Normal load on mount\n  }, []);\n\n  const tickerSummaries = useMemo(() => {\n    return getTickerSummaries(optionData);\n  }, [optionData]);\n\n  const filteredTickerSummaries = useMemo(() => {\n    if (!searchTerm.trim()) {\n      return tickerSummaries;\n    }\n    \n    const searchLower = searchTerm.toLowerCase();\n    return tickerSummaries.filter(ticker => \n      ticker.ticker.toLowerCase().includes(searchLower)\n    );\n  }, [tickerSummaries, searchTerm]);\n\n\n  const expiryDates = useMemo(() => {\n    if (!selectedTicker) return [];\n    return getExpiryDatesForTicker(optionData, selectedTicker);\n  }, [optionData, selectedTicker]);\n\n  const volumeProfileData = useMemo(() => {\n    if (!selectedTicker) return [];\n    return getVolumeProfileForTicker(optionData, selectedTicker, selectedExpiry || undefined);\n  }, [optionData, selectedTicker, selectedExpiry]);\n\n  // Get filtered trades for the selected ticker and expiry\n  const filteredTrades = useMemo(() => {\n    if (!selectedTicker) return [];\n    return optionData.filter(trade => {\n      const matchesTicker = trade.ticker === selectedTicker;\n      const matchesExpiry = !selectedExpiry || trade.expiry === selectedExpiry;\n      return matchesTicker && matchesExpiry;\n    });\n  }, [optionData, selectedTicker, selectedExpiry]);\n\n  const highestVolumeData = useMemo(() => {\n    if (!selectedTicker) return null;\n    return getHighestVolumeData(optionData, selectedTicker, selectedExpiry || undefined);\n  }, [optionData, selectedTicker, selectedExpiry]);\n\n  const tickerTrades = useMemo(() => {\n    if (!selectedTicker) return [];\n    return optionData.filter(option => \n      option.ticker === selectedTicker && \n      (!selectedExpiry || option.expiry === selectedExpiry)\n    );\n  }, [optionData, selectedTicker, selectedExpiry]);\n\n  const handleTickerSelect = useCallback((ticker: string) => {\n    setSelectedTicker(ticker);\n    setSelectedExpiry(null); // Reset expiry selection when changing ticker\n  }, []);\n\n  const handleBackToList = useCallback(() => {\n    setSelectedTicker(null);\n    setSelectedExpiry(null);\n  }, []);\n\n  const handleExpirySelect = useCallback((expiry: string) => {\n    setSelectedExpiry(expiry === selectedExpiry ? null : expiry);\n  }, [selectedExpiry]);\n\n  const handleRefreshData = useCallback(async () => {\n    try {\n      console.log('🔄 Performing hard refresh...');\n      \n      // Clear all application caches\n      clearDataCache();      // Clear parsed data cache\n      clearPriceCache();     // Clear stock price cache\n      clearFileCache();      // Clear file loading cache\n      \n      // Clear browser storage\n      try {\n        localStorage.clear();\n        sessionStorage.clear();\n      } catch (error) {\n        console.warn('Could not clear storage:', error);\n      }\n      \n      console.log('✓ All caches cleared');\n      console.log('🔄 Reloading data with cache bypass...');\n      \n      setLoading(true);\n      setError(null);\n      \n      // Load all CSV files with cache busting enabled\n      const loadedFiles = await loadAllDataFiles(true);\n      \n      if (loadedFiles.length === 0) {\n        throw new Error('No data files found in the data directory');\n      }\n      \n      // Merge data from all files\n      const { mergedData, info } = mergeDataFromFiles(\n        loadedFiles.map(file => ({\n          filename: file.filename,\n          data: file.data,\n          timestamp: file.timestamp\n        }))\n      );\n      \n      setOptionData(mergedData);\n      setDataInfo(info);\n      \n      // Reset current price and reload it\n      setCurrentPrice(null);\n      setPriceSource('none');\n      setIsPriceCached(false);\n      \n      // Reload price if a ticker is selected\n      if (selectedTicker) {\n        const { price, source, cached } = await getCurrentPrice(selectedTicker);\n        setCurrentPrice(price);\n        setPriceSource(source);\n        setIsPriceCached(cached);\n      }\n      \n      setLoading(false);\n      \n      console.log('✓ Data reloaded successfully:', {\n        files: info.totalFiles,\n        records: info.totalRecords,\n        latestData: info.dateRange.latest\n      });\n    } catch (error) {\n      console.error('Error during hard refresh:', error);\n      setError(error instanceof Error ? error.message : 'Failed to refresh data');\n      setLoading(false);\n    }\n  }, [selectedTicker]);\n\n  // Fetch current stock price when ticker is selected (real-time API with 15min cache)\n  useEffect(() => {\n    if (!selectedTicker) {\n      setCurrentPrice(null);\n      setPriceSource('none');\n      setIsPriceCached(false);\n      return;\n    }\n\n    const fetchPrice = async () => {\n      const result = await getCurrentPrice(selectedTicker);\n      setCurrentPrice(result.price);\n      setPriceSource(result.source);\n      setIsPriceCached(result.cached);\n      \n      if (import.meta.env.DEV) {\n        console.log(`Stock price for ${selectedTicker}:`, result.price, `(source: ${result.source}, cached: ${result.cached})`);\n      }\n    };\n\n    fetchPrice();\n  }, [selectedTicker]);\n\n  if (loading) {\n    return (\n      <div className=\"dashboard-loading\">\n        <div className=\"loading-spinner\"></div>\n        <p>Loading options data from multiple files...</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"dashboard-error\">\n        <div className=\"error-icon\">⚠️</div>\n        <h3>Error Loading Data</h3>\n        <p>{error}</p>\n        <button \n          className=\"retry-button\" \n          onClick={() => window.location.reload()}\n        >\n          Retry\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"options-dashboard\">\n      {/* Compact Header with Data Summary */}\n      <header className=\"dashboard-header\">\n        <div className=\"header-left\">\n          <h1>Option Analysis Dashboard</h1>\n          {dataInfo && (\n            <div className=\"header-stats\">\n              <span className=\"header-stat\">{dataInfo.totalFiles} files</span>\n              <span className=\"stat-separator\">•</span>\n              <span className=\"header-stat\">{dataInfo.totalRecords.toLocaleString()} records</span>\n              <span className=\"stat-separator\">•</span>\n              <span className=\"header-stat\">{dataInfo.dateRange.latest?.toLocaleString() || 'Unknown'}</span>\n            </div>\n          )}\n        </div>\n        \n        {!selectedTicker && (\n          <div className=\"search-container-header\">\n            <Search className=\"search-icon\" />\n            <input\n              type=\"text\"\n              className=\"search-input\"\n              placeholder=\"Search tickers...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n            />\n            {searchTerm && (\n              <button \n                className=\"clear-search\"\n                onClick={() => setSearchTerm('')}\n                title=\"Clear search\"\n              >\n                ×\n              </button>\n            )}\n          </div>\n        )}\n        \n        <button \n          className=\"refresh-button-compact\" \n          onClick={handleRefreshData}\n          title=\"Hard Refresh - Clears all caches and reloads data from files\"\n        >\n          <RefreshCw className=\"refresh-icon\" />\n          Hard Refresh\n        </button>\n      </header>\n\n      {!selectedTicker ? (\n        <TickerList \n          tickers={filteredTickerSummaries} \n          onTickerSelect={handleTickerSelect}\n          allData={optionData}\n        />\n      ) : (\n        <div className=\"ticker-detail-view\">\n          <div className=\"detail-header\">\n            <button className=\"back-button\" onClick={handleBackToList}>\n              <ArrowLeft className=\"back-icon\" />\n              Back to Ticker List\n            </button>\n            <h2>{selectedTicker} Options Analysis</h2>\n            {currentPrice && priceSource === 'api' ? (\n              <span className=\"current-price-badge\">\n                <span className=\"price-indicator\"></span>\n                Current Price: ${currentPrice.toFixed(2)}\n                <span className=\"price-status\">\n                  ({isPriceCached ? 'Cached' : 'Live'})\n                </span>\n              </span>\n            ) : (\n              <span className=\"price-unavailable\">\n                Price unavailable\n              </span>\n            )}\n          </div>\n\n          {/* Expiry Date Filter */}\n          <div className=\"expiry-filter\">\n            <div className=\"filter-header\">\n              <Calendar className=\"filter-icon\" />\n              <span>Filter by Expiry Date:</span>\n            </div>\n            <div className=\"expiry-buttons\">\n              <button \n                className={`expiry-button ${!selectedExpiry ? 'active' : ''}`}\n                onClick={() => setSelectedExpiry(null)}\n              >\n                All Expiries\n              </button>\n              {expiryDates.map((expiry) => (\n                <button\n                  key={expiry}\n                  className={`expiry-button ${selectedExpiry === expiry ? 'active' : ''}`}\n                  onClick={() => handleExpirySelect(expiry)}\n                >\n                  {new Date(expiry).toLocaleDateString()}\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* Charts Section - Two Column Layout */}\n          <div className=\"charts-section\">\n            {/* Left Column - Call/Put Volume Chart */}\n            <div className=\"chart-column\">\n              <VolumeProfileChart \n                data={volumeProfileData}\n                highestVolumeData={highestVolumeData}\n                ticker={selectedTicker}\n                expiry={selectedExpiry || undefined}\n                chartType=\"callput\"\n                currentPrice={currentPrice || undefined}\n                trades={filteredTrades}\n              />\n            </div>\n            \n            {/* Right Column - Total Volume Chart */}\n            <div className=\"chart-column\">\n              <VolumeProfileChart \n                data={volumeProfileData}\n                highestVolumeData={highestVolumeData}\n                ticker={selectedTicker}\n                expiry={selectedExpiry || undefined}\n                chartType=\"total\"\n                currentPrice={currentPrice || undefined}\n                trades={filteredTrades}\n              />\n            </div>\n          </div>\n\n          {/* Summary Statistics */}\n          <div className=\"summary-stats\">\n            <div className=\"stat-card\">\n              <h4>Total Volume</h4>\n              <p>{volumeProfileData.reduce((sum, item) => sum + item.totalVolume, 0).toLocaleString()}</p>\n            </div>\n            <div className=\"stat-card\">\n              <h4>Call Volume</h4>\n              <p>{volumeProfileData.reduce((sum, item) => sum + item.callVolume, 0).toLocaleString()}</p>\n            </div>\n            <div className=\"stat-card\">\n              <h4>Put Volume</h4>\n              <p>{volumeProfileData.reduce((sum, item) => sum + item.putVolume, 0).toLocaleString()}</p>\n            </div>\n            <div className=\"stat-card\">\n              <h4>Open Interest</h4>\n              <p>{volumeProfileData.reduce((sum, item) => sum + item.openInterest, 0).toLocaleString()}</p>\n            </div>\n          </div>\n\n          {/* Heatmap & Trade History - Two Column Layout */}\n          <div className=\"heatmap-trades-section\">\n            {/* Left Column - Strike × Expiry Heatmap */}\n            <div className=\"heatmap-column\">\n              <StrikeExpiryHeatmap \n                trades={tickerTrades}\n                currentPrice={currentPrice || undefined}\n              />\n            </div>\n\n            {/* Right Column - Trade List */}\n            <div className=\"trades-column\">\n              <div className=\"trade-list-section\">\n                <h3>Trade History for {selectedTicker}</h3>\n                <p>Found {tickerTrades.length} trades</p>\n                <TradeList \n                  trades={tickerTrades}\n                  ticker={selectedTicker}\n                  expiry={selectedExpiry || undefined}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default OptionsDashboard;\n","import { Component, ErrorInfo, ReactNode } from 'react';\n\ninterface Props {\n  children: ReactNode;\n  fallback?: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: ErrorInfo;\n}\n\nclass ErrorBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): State {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('ErrorBoundary caught an error:', error, errorInfo);\n    this.setState({ error, errorInfo });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      return (\n        <div className=\"error-boundary\">\n          <div className=\"error-content\">\n            <h2>Something went wrong</h2>\n            <p>An error occurred while rendering this component.</p>\n            <details className=\"error-details\">\n              <summary>Error Details</summary>\n              <pre>{this.state.error?.toString()}</pre>\n              <pre>{this.state.errorInfo?.componentStack}</pre>\n            </details>\n            <button \n              className=\"retry-button\"\n              onClick={() => this.setState({ hasError: false, error: undefined, errorInfo: undefined })}\n            >\n              Try Again\n            </button>\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import OptionsDashboard from './components/OptionsDashboard'\nimport ErrorBoundary from './components/ErrorBoundary'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <main>\n        <ErrorBoundary>\n          <OptionsDashboard />\n        </ErrorBoundary>\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\n\n// Register service worker for better performance\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', () => {\n    // Use dynamic base path for GitHub Pages\n    const basePath = import.meta.env.BASE_URL;\n    navigator.serviceWorker.register(`${basePath}sw.js`)\n      .then((registration) => {\n        console.log('SW registered: ', registration);\n      })\n      .catch((registrationError) => {\n        console.log('SW registration failed: ', registrationError);\n      });\n  });\n}\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n)\n"],"names":["f","require$$0","k","l","m","n","p","q","c","a","g","b","d","e","h","reactJsxRuntime_production_min","jsxRuntimeModule","client","parseCache","clearDataCache","tickerSummaryCache","parseTimestampFromData","timestampStr","match","monthName","day","year","hour","minute","ampm","month","hour24","isOptionExpired","expiryStr","parts","parseCSVData","csvText","sourceFile","cacheKey","cached","lines","data","estimatedSize","dataIndex","i","line","fields","parseCSVLine","timestamp","sweepType","ticker","strike","expiry","optionType","volume","_a","premium","openInterest","_b","bidAskSpread","invalidTickers","isValidTicker","isExpired","current","inQuotes","char","getTickerSummaries","tickerMap","option","parsedTimestamp","summary","parsePremium","currentTimestamp","result","expirySet","dateA","dateB","getVolumeProfileForTicker","filteredData","strikeMap","profile","getExpiryDatesForTicker","expiries","getHighestVolumeData","highestVolume","max","cleanPremium","num","formatVolume","formatPremium","mergeDataFromFiles","fileData","mergedData","fileInfo","earliestDate","latestDate","uniqueTrades","file","parsedData","trade","key","info","detectUnusualActivity","tickerData","allData","totalVolume","sum","t","totalPremium","callVolume","putVolume","callPutRatio","sweepCount","avgTradeSize","allTickers","avgVolumePerTicker","avgPremiumPerTicker","alerts","severity","alertType","identifyKeyPriceLevels","topN","existing","maxVolume","v","maxOI","maxPremium","volumeScore","oiScore","premiumScore","combinedScore","significance","type","rest","estimateGammaExposure","currentPrice","atmWeight","percentFromCurrent","netGammaExposure","absExposure","maxExposure","level","exposureRatio","calculateMaxPain","strikes","painMap","testStrike","totalPain","maxPainStrike","maxPain","pain","getTickerAnalytics","formatDateTime","parsedDate","time","TickerList","memo","tickers","onTickerSelect","sortBy","setSortBy","useState","sortedTickers","useMemo","sorted","jsxs","jsx","ArrowUpDown","callDominant","putDominant","dominanceClass","analytics","TrendingUp","TrendingDown","Calendar","Target","idx","Zap","Clock","VolumeProfileChart","highestVolumeData","chartType","trades","tooltip","setTooltip","getBarWidth","useCallback","getTooltipData","strikeTrades","premiumFormatted","premiumFull","sweepTypes","tradeVolumes","size","tradeDetails","handleBarMouseEnter","rect","tooltipData","handleBarMouseLeave","prev","handleBarMouseMove","getCurrentPrice","isCurrentPrice","filteredChartData","maxTotalVolume","minStrike","maxStrike","totalVolumeSum","getStrikePosition","index","item","totalItems","spacing","reversedIndex","getCurrentPricePosition","price","clampedPrice","lowerStrike","upperStrike","lowerIndex","upperIndex","currentStrike","nextStrike","lowerPos","upperPos","lowerReversed","upperReversed","priceRatio","getChartHeight","Fragment","date","TradeRow","formatExecutionDateTime","fullMatch","formattedDate","formattedTime","isHighValue","TradeList","sortedTrades","expiryA","expiryB","filteredTrades","getTradeKey","hasK","hasM","StrikeExpiryHeatmap","heatmapData","maxAbsValue","dataMap","strikeSet","cell","totalValue","sortedStrikes","sortedExpiries","maxAbs","absValue","getColor","value","alpha","formatValue","isCurrentPriceStrike","getCellKey","isAtMoney","hasData","parseTimestampFromFilename","filename","dateStr","timeStr","getDataFiles","response","loadCSVFile","bustCache","cacheBuster","error","fileCache","CACHE_DURATION","loadAllDataFiles","files","now","loadPromises","results","cachedResults","filesToLoad","newResults","allResults","successful","failed","clearFileCache","fetchStockPrice","finnhubApiKey","finnhubUrl","yahooUrl","proxyUrl","_d","_c","priceCache","apiPrice","clearPriceCache","OptionsDashboard","selectedTicker","setSelectedTicker","selectedExpiry","setSelectedExpiry","optionData","setOptionData","dataInfo","setDataInfo","loading","setLoading","setError","setCurrentPrice","priceSource","setPriceSource","isPriceCached","setIsPriceCached","searchTerm","setSearchTerm","useEffect","loadedFiles","tickerSummaries","filteredTickerSummaries","searchLower","expiryDates","volumeProfileData","matchesTicker","matchesExpiry","tickerTrades","handleTickerSelect","handleBackToList","handleExpirySelect","handleRefreshData","source","Search","RefreshCw","ArrowLeft","ErrorBoundary","Component","props","errorInfo","App","basePath","registration","registrationError","ReactDOM","React"],"mappings":"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","x_google_ignoreList":[0,1,2]}